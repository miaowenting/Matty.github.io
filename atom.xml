<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matty&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-02-02T09:14:31.946Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miaowenting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年终个人总结</title>
    <link href="http://yoursite.com/2023/02/01/2022%E5%B9%B4%E7%BB%88%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2023/02/01/2022年终个人总结/</id>
    <published>2023-02-01T07:13:50.000Z</published>
    <updated>2023-02-02T09:14:31.946Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="72cda593ff7d7e6e7d5134a9c9a6ac0b97fa39a913acdad5a1ead09c878cbcbb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>LiteFlow语法</title>
    <link href="http://yoursite.com/2022/12/15/LiteFlow%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2022/12/15/LiteFlow语法/</id>
    <published>2022-12-15T02:17:55.000Z</published>
    <updated>2023-03-02T08:42:07.632Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="617d543ec4e048380424bc0cded7855785406136f6cb1e8178fe72c3c0e68a97"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-table-store-101</title>
    <link href="http://yoursite.com/2022/09/30/Flink-table-store-101/"/>
    <id>http://yoursite.com/2022/09/30/Flink-table-store-101/</id>
    <published>2022-09-30T03:37:41.000Z</published>
    <updated>2023-02-21T07:04:52.574Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="747fb6f5e06ddd6aef7092f5df30c782bc8a2c9d49bd8a3b2d137790234e0c49">bc31be23720c4d2bf4233267b462d3984bf1f3cd517db620955c80c1f92d68fb0900e774b552e1f66f295502f226bd1b8c33227f2a2ec7ca6e8b703b8edf048f6d7aa35212539b2552f5a5577cc00dc4bea0f0b50105edfd519f3e41da83d6d15f93912ceae6722140968d1864c378792b07d9e521cb70883dd2549b3fb4a09ba689d6d8f14fe37638b9bf980a99d3740b36531c607db96d88d8a9c480bcff3856c93c33821aac674ca436da927ccd5131c2c7e80214f1d49255bcc32e6b374377ac8bdac446be965901b110e03c0b9d876f6b14c81722015042e6aa2f060990d264d3aa25353128e17e6388885f51a8f85e37cf30976b5d017b2e89deeb9a62bf3df7ad21fd049d856cd4c7a9f263dd5b1b01f8b4051b4a21995b3f7bb648692904fdbbc95d0341b3b7b2bc6c92579c6f1c12ea556c73cc16ea13b93ff07fd7227a0a0c7c3ed4d1be22397516a3b94f8a06ab62b38389e3b48ccc3b77fa456581085e0fe004d57003eecca75d743a57d5e63bdc4196b2343559952784b767fc9d879aab9a887c29590e0c43b9be2f743f2cd5110bd4c62359e00e097e423c0f6423eec5a9700bcc2afc2972a62002d50f8da666f261327ed600d3935e06f91d987056572b39e12b7b11e37190df36ee8ae0b68becde1a646f6e5ba64bec0a3fc72160ed9a14e18da594e48b4f4c8c1b1f609b79b26b8e696a0c4a2e3b79c2e8a97410de67ca95c9b81da61db5ba1e7e7b8bbf643bc59fb188537427b43e061c5a65d4be1d664057d56b11f5a53ca7be033d6283160c52a81244a401c304b1593e364ccbb3f8bb5f3295bdd464949358aae450fd8ba02127d7fdc8e41130748abb3164f2ad47ec1983e535149cdc3180522ecb0fe34cc8f042a3971147a3656a5c54ea9afd1f4799629ffe37cf3c63886f63f705247938044b557b98494bc6d412a90c1514518ad368818cca90140ff7d46cf8a980f7dff8ded848e22aca8890ea0271fb8ba9e6cda79792d26f156414ef6415e4aa2bb731ab0b2a9bdc15f6f80ccc671be5360f1eba2362c36c88e98242f2e07f4c7c858c2be33576a36769bc8fd4001ef47639bcda7093bc0085a988767bc66f7d768fc03f57469a090e81b3d312b121639db890a60ead37224f2421429364a68543c7a521dc89920dae69b75548b13487e83f6c80178bf7a062b99ca7649adb01d1975d91e82ed536d664dc38af4c00776bd41fe94af570226622693b5feb5a5ed77cec232e5a15c3b9a792b678cd1610db15163c440abe4405482051a92ed32362885771b703564eb660f8220e0c2a7277c9b1d8b2228d5063494af1bd80452c2adb40ec467c54aec8bab04d3949709382705b0105f0ddfc6c026d4a5bf096f4613dc51610103dd51091e83005695d0bc07c012c5aa8f0b870cd0406e0141077068134e8d142a867c90cc4c46020c522462f1b5fe913ece6cee00c94817424e7a29d672c7ad36ee25b098c2c45dade7bc217f58d31bfaa1c2211bc173fb50a077eaf17aa58c25f75495400c8b1ade2a8ecc32dfaf1290692cf29fc1335d06bc9b9a07b5595036e4886c29b19fd6880cf50084bbe1e5883919e5f5445b92eafe7fbee88251668ee4c44eb244afb2d82d0bb934743c0fc2a7a8015c7ce414f3dca2ea85a0b6c6ebd9af72be9a907b5b5cf12f5eee7a31e35acbae2aad9163e6cdfd9f12c609f70a3c9e210b105292caad26ae96e43e288a8395cd7952daa375c7cd83461c1e69be8b79e5b9f308057814335a0b38e55254f1de856fb442bd345e69ee6fa1d04e78e2c4d51bf17646aae72c598b6ce499f8e67b3ab83580a8b88cab2f4954f4fd9053368dbad19b88166736d2ab030260344e61e7a7ab45434adc2c84404589fca93f8aefcaabad93423046fb47424a193c081cfd1c9d8211dac6757ca6755d25d2b56cdf0cf0846cb144aa55cdc44a1235c3a441bec9ab681e0a37a2caeab82f35e9935dd84df4843bd8edc831d897f5dc7daebd7497845429d5571f50df42683aca8934f34e3a9ea37afa4efb49c7defdcc87f42de04adbee12537a72bbbad2d279740ce16166a76029c95c98dff7e900daeaed71c137955b9e3d8c1f7dd91226fd4ef2074a13f1a6b0a857d86df4bb398222e2592857235c8f90571139b58dbef3dcd4c333287e89663c63e33ad361baa6c5c7672636122400233b77bac380a330ee41a1302661861fc01986f79372668e31fe151e7384da0a92db6b41570deb3a5e859edaa7e24b7e410dbfb745ef2e9fbbb043181b031e323ed21cf1bf9f1e4004e8c199870bf5c2582dabc2db6081dcafda08e492c1aa557c7671fef17b5eb4e12d555e33fc05ec159324b03e4a8425086b47323f3085ca887514111912d34ddc7c51e3129dff350ada37c17615e06ab072702c780b37ed94891906276cd46d65f6c202ab80f4280673921c1e0e9d86eee0ea9f2d02a8b00f2550912b18972da4b76a86abeac995d211aed98df4da852e8e4e3b67d550c275796c691cde18e3ac9faccfa60a4aa05fb74de27b64803e539eed73f6cf8e1c333e30a9169cfd505238320d52a7fa9f0a2f3aadc22ed35079ab30f6966f8c4a04dbcebe9bce00e18fbe7ee593649e8fc2c6e195aee30d5e0b5a50665765d351cf2c31d02f872aa4030b7f9e3e0578fdc641c922f940d918ad96cd61fa54988c24bfd4cdbc40dbfb034188605f7ca3378ccade5c4f2704a9915552f468b0427bd0d54d249aeba4d277a91d60e9fa4f69e6b515885ecdf966ca36f5848fcb19efdb0f300a385c948bb9f47be0316e84c5c412061b1594d62cfbfc767856b7468838e9bd0071518feb83daf6269aed2e55f6d0c00db84fc996a5865af540e3e75765b9bf61b86e36216f5b3cb90eb6d85214adcda36f4ddf77164dd06877109b7ce123d2466f49cb094e04b4ac30698c84057a81170bc0e54f6a180d1bcbab79fdd4e4728a54bc103e560d2984d3c8c7fb6c9fe84446943d8a1c0d3ff05734ac9cae500d24bbb4c9432e4ceabd264ee036abbe7bb539f88b4625e5197f9fee71f8c7afd55b9ab329e0f80e80c7de94f36ec3d53d66241cbd5b80af5b1536e8c76213ea5ecb07046e146cb2141706402b45c0c9a93e97970a004132c2f18a1dddc6e3fc698dd7856b50ebad9903ad3b6c2a8ca73b2bca1e0ec8bef118c48d61f56d6a02083854741d09212879e3b2a1037e0cd0d6042ff1469ab6222730d1a426b73f187f7478491d7f06531d9e104f3bc8464852171a80511ca025c65afac58ed538c20910bcfdf240b832c6c1b8541be3535167ffe788dd8ba0716e661402cca4eb8bd19fe6bf761ae1261c0eeed42370c56040936f3b58bd8d08d1e7146cde8ec16b91df2a44a24fb5774d228963374eaaa5fc99c556fbcfd42ca0ee16e11cfd100f16e6be3a981b404ef4e621a5a39dc545fa420fd983d686203ab7372a8761b184af46f2e47276095128fccdb6e5706812aada61cd5f527ad15357b5c67222f74f3253082ec16d99a19fc9dcb66c220bb921eace5d8a64a00d918ef57a5403d41a30bc5a872ddd1a32913b346bca6e8327429dd2dabb3c5ed805c3e4411be9d991fb59f9655470658196aae4306a3a28dd9ff45e7ba3a01f4f47b986407eb95cc22a1f67b0d202a804381f86c229de36679e224449c05059eeccdd0123251e6b41a5697b272d1a0e12ba8d6aa84eecfb5b2b27349c512f0b1f221e8933e01478758251708e6a8d8877d203456cd34a00b69c4fed5fd7f0bdf30e235e826a57ed3328b5d7b0245dacbac623db934b167ca388cedbd9ba18a99d5e2664b8abe5d810ec5c8910ca49530d2f91f261e3e9d675a222ef9f5beb3d082dfb59e5c67841ba0ed18d655a2d7b336c2e304f0b77d8bae0e96c81fd74f5e66e7c2372814a1ca2f13af4e22ffbbaced2c2931c3abd307b034ecebcdd1262b935ea163ef6b529cd327223380bb3b89808ded0954ce6b983f943f42492d4c5b1fa645713fde089eaea1e36682e8eefb9364741d883e23c1532850697b47484edc6a8888fc29fd5b967f4e9558a9799982d452dcee4148bcc23857cd59e74e442f0252df57eea9ca13421b82069e13c80a367f8738a55fdfe0daa3254bf9457296988cd94fc333945171f64152c11689cbf319259f67e996c0a096c2a0a646e8c62f05a56e7dfb182cf99ee0903f071ae5ae3cf7dad9e96898a4ba0b3e7d851d30b4b9417c3bb1048dce34962031acd0b16fc7df0c4881f6f65f7b2d59324719c607f6e6d42a90638890700911fe4a17959e4e5f8879db174e1f3d9ba74d605e97cf98ff32d92cf1b5d927464821b113f803c351d2050873ec5850d5e4b22cb03ae3fb8227fd581358d6f3d25f5c136862d07bd0daac0c3ae0417503314c793abe369afa4e37ff146cf01f2b8ce31b0931e3f0ebc307753ba4c8c7139b930d08afc93386c31a006a507426333c4dfc7de8019c663078cdac4025c2394bbfaf2a05bd6da6508b6f7c295d339ba490c9973e08c2efeeddbcf19cda07b8c02c9ed2d16219465930c290b7397bd1318bd8d77ceaf6bc9cc3cc5687068784f81e0aa70d2cc9defc6af2ed12a0a3b463565285ab22142cdc9561fafc1d58fa6dc3e6ed2f12dcf8f194f9510dedac5f6c55b40fc7181d9f871472814e911470df867d2ae1b7f908b14220a7a4674348a71eaa4a1567f19e215448f2555f0b5d230527d9f8b6c8b4260839f1219447fe2088a98af26096215c7e21143945546821fc7327fc42c381a8db8db36cb73fc9404dc84a852f3cd2ec5d0a2483943d4194fad6aada25a905111c5c4ca7ff54ac97db080d7b6d2ab1c0c4dde10698276d38839e3516a7c926bb1c65bc35f1416f247bab5906320ad5324e009872659cf0abdf04ee0258f2853e5e7ac958c835ed523225c150f5c91b46460293ae0c8b0fe1ab3d5e0323befd13d62775326b5beb84c1394820a7777368fbf280c2ab0ee67828d566aa6448670745f4f80c331df2938259d27b2a8a064019b32d716549819dcfcbb4cb31eeb09a9c11a2ed34023d01a12b66c198aa8320c3c9242e21ef4dcff5eb177a10b88ed121c9ccebd7354499857824c49f18d971e08046c115033c8d38f58bd93ac1e6c227bcf5ad8e803efcb537403dafc963bb8364c4e98b6a5a20930e028df4cc6a4c48a9ae0328403adc12df5a20c517ea74e1cf195a07bec4435d1676797ac11af4d2e9a601c5d9db19f6d58ab79bbe83641da3bb7a8b1429e9146a8360bec12ac13155f5d0522c0176e6177a8792230dfd629856b55d9e99d0be87513c53676d137f7c4c8b7b5f6a2754a751192340c4bf9768d8dbd6d6a78726c964d21ad9922eca01507461e2373ab4682df3e4aca8849509621b98eecf8dc895fef89f72db54b66e91537835c0e910ffb87393d52fe022ffd52a3132d6e633ac051ee3fb5db8e2b9821ef85cd71af8286565eb634d3a653c1b379c52b5a95fab12ea5d360b8613c76f6d6883af12265f659f7614a1c9e24ebab17c270d097f05981cec6cff02d7aa4c9569e827c3dca8833972e35b61427fc95ced9ff1b9c355770c7b4d5c9b17eb2778a54c44e971c5fb8333e689aece274873986f8ab4cc9945893f3dd70b1fd3564b651b6fbeaee8b36d1b878b78e68efc071baff29ceb7536ee8555f8ceb08ec652551042a6ca3be5c286cad527b388a0b73c7f768eb70b667537703f78f4a038a8b71a5fa1dd7dcfbeaa824403ef19ad5a7229ca3749194c499d4dbfcc813f937c86f8c81c2b02f56e10e8ef3a92795ed4224a332b9a923fdfeb06b72a240f9dae893f6e94cb5ba097bb0f71aa6d98b61f78db68b0c7c4fe4f3991c1f424efb892ab98007252e4c96329807189bf262427fe30c3beac43fba8ee59f3a22ccb90dc1b627994519f6fc4926a5eb5b03cc4c1541e1a701d6d4883f8f11dcd88e2ccf47909895d48d23e7c94a3c2a798330b15834b91acd7f0ff3d4aab4b8a92e144c23c9fb8c9912d91652af08e2c465dc21dc1b0eedcf3ab1c0186f06b382efa88f74a207812a0d58c642d905b40c83936f41054d42585d8623c79bb4947e61ad51a959ab8a87ec72eba896380a83e2ea1d4d3569035ec5d56e230412544a5f075743c0f0ffad70ce9f137c09baf9d3a1a4bd151c251eecfa643132e0a66eb15e9f7cb6c4403fd914cbbf9dd0b661589b7ef3ed5d2978bc5de3e1c2aeb527b72f742d70395a1dfed9df83c0ea6b251003fdd5bab147ed96afa49ec1b347489a0d25d384e06f28509927cfd97131f1aa53ad4dc2f787dfdf4775a3d28bdb2a2508831b3cb73c76788deb29e492604f6a9cc7b652ee18e38d456231281d580169c66b4c6691c956f301de5948bad37de3f373a6f8fab89e236b0b505a9e023662cd8126145826dd6c6c11354bc356094362361eda652d613d99b58424384e8a3c19782841fa1f71796ae70fead3cef3a1c34d798a426d2d694a5369c18c566bb179d14bf32c4dcc9f611b0d7f6224939c6ef25aa52c39b9e24ad1674e094cfc3a92bea9749cfc7f2c491174f25233e1d937fae886d32f9c2b641898ca50e917c8fb272a18e06729e80b14f7f410faaed6a45e643d3fa898830bb04a005a9aed485d77a02dfad165ac09107a9b7c15fe42356fbb3662575137ddecc7b6c69a8ba1e95a0544c46f0e119059d03b55b8dbeecb9cb0f53b88f0b6e0039806fad2a6b92851e2fe15d8e214c7d98f695d2c7a8b39382b2999d87a6766129466039d096ee201ad133c4b8a1f943b0ddbbbaec858b32c38f8d97636bb978fcba95c091f2584405bd413cca7c83373c54d281aaaacffca912a7c96e68dbcc868637c626fd1874c4afec6ba667203357bf3a185a4abf420689480293f9b15b89dec0e1d39a0d3d2683a13afda7f0f76f42bedc6d809b00dba0c60e9fd33e768e7d79edca859d68f986f64d7939f27ad3092267fe677f87d44665fc9aa4d000f1e3501b9515a42d1b5b887dccf0ece0b57af79a418d57a8bbe1346fffcaf4f000af124a54757e2bba88bbc892566985c80ad9e978be56f1baa19eafd83e515eadcc2a6a4eadf6e0a8692a20e67f899e72dd4c90e3587353ed920eb5b068651485d367aac5204c6f9ebd343bc2ddca79ef3cb3b99f5018d0ca445d5fddc01a44b0f30a1eccfef8c748679fd56cbe98018b86a5f9c8aa644e834825df6ae6c68773742ec935bc0891f6e1148d5992734489dcc4dab5087ababa597369c807d2e7613e620a6e3780a91f2230342421310e4c2099bb243c76cc3c20fc61278b6257696ff3337413c9b117ac58216be0e81f6bb82b6ffe6b68b05747c6f8d9ea6edacbb2b5df2a7698cfdf3a26a7339cb7f8b2923a93201704cf5532bf448c3d6bc69de4089869ce78fc470be12fe7ad246041490fe4468bafb609796b47736e54d3490671bbcd85cef1ce999f7ddc93649ee64275fc28eab857012a2577fefac03ec1ffe4700d69eb048803cbb21508b8660df63b2ee909f7c0095fa600640d46e45aa4ecffd1d44c8817614262e171ab7466253e0602b688c5145f07770d87b91d9688e8c734d03626be9fd40f0df9a2a26d7c9b2c0041159e28e37cbb418fe88af34c66d4ac3688ae60caa2e988a1ef6a0b0cbdf7b37928867602c8cb9e45e3ce0a6bd5982b0a5f1876696ab3a2f60a675c52f8cdbf5dd04c6f6400e45ff1af1eaeee6c36ce6cfccc4fd04a73f1426ef10bbd6b7a6965bd7d09cc9a06098933204e83a3a9bd208102861b7e484d957720e497006d2c137bade537ef8446ebb4df07d6b6ae0c88eb0373e3fc3c6a6df3f025830e19e8501ccb17efaa6369fc7a2ffac16fbb99603e979d3a3a54f3b1665be8787a1cbdb5ccf61cdd069d47f8b56e7b04a1827081366ea57497f22cf0d5e248490b0cd54df7e0b27b6a5009dfb99c7610ce0e64795ff020dca59d972e7c061529022ab625e4f00bdb6df92cc670ae6e0aae16f86a75042d5172b0060867e9d4febf90d34948cc08758d546f0094acb0459e9c61251ed046308186db95d47da6c2130ef597759b56bae2f7178e0f6fd76d0691956148726170b0266988e4f1e5bbc1ccfd777f0666a1e13bf6b87b8b15847ae05a3cdf6795bf9a260b3312914914277bd8ed2d6f8ca6d8f0ceda3cb3a6f5fbfd65b37d7561ade67943a7a976c702561d404dd2d15d1c44c5d0b64e24d908d82b81afddd51f2033901dd59b90ba99b62f1e27aeaececea2ee57e51886c73d08cd715b94e05b7d5043a7df7c19375bc35ffe5c983525cf7ead9ea0144973a5dc14dd5cbcca60a4148d80de62fcdc48fa4ef52fa9f2f1caf6b6580fbe7d210c7872785e4a232d3bed961a3ffb4099a52ad23c7df8915870f9c2099a6b799ee9f807a813e70aeadaf915b49757a7671adb19f6bec3e4d1df09db811a8559c80894f14e97ebf526074c1ca4fb2cb720f930ff86cee14765908e6acf45265fafba0094a7569a7b3572bcf05acb4b31c0a1b69ad1e0a38b4cb635cafb003f7b93a28a8ab31abd33d4effd786c857413afeb160e5c2ba800e9bd763caf5f419e1bb85ddc9336dd96da982e4ab894478f7199cec9ee57dbe6632796fe49fcfc0b914da69fc387ebf04f779d6fdc0898fc86cf579a081a542ec67cb27d7e10b3a23245c63fb5bd139fb52fc61e0a0fdab8298bc3dc0345c8ee145ef674a16761d64fd4bd6a13fa81bc654e16babd36392d70a1170ff9f0f8e487f4cb0526544d8cca45a5617c7920576b1ef97209d6bc08f3c6c2f0e232c9082b6e82eecda00350ac3c747efc23da3f7ad50e27ab5b571d5b144c3635135568a10cd8007726fbd02550ccad53c5574b5d0ee9dc287d6a049023946101327d9f4cdb03b97b764118b7f1e747b675d5a07eac6289aeb8c883535d4c6e8d1b58cd8609280b894fcb3fbaba60741ce0c6c48b5a25b4bc0ed9382d63358ade5e9c89bde053a3e67b4931ef9a08b7e0727ae45635f9f9497b5d4c481a0ca271ea31b353cceed82443daa2b213f21681f66148d06d3dd629461345320ce1acdd5824d6680411e850f21694e7f38b94f3847f5aaa4439c9334ea1307ca4a3e85487544cb3d45241585e772c5a1a3b51bef19e48dc281bf36cee320039de087a7dc9e6041c21517513a7a819be4b562ee75dfac2bb3b7e754678b6cd6ae2a4acf204a8250f6c53693a86a94655a96b221f3e3384653204c8b4d091d67bddc889e47b360a24d890bed3da8bb0278b7c24f39885b1cbec0de3dd3ddbbed4bd13c92ebf2bf141c7be5f6ecf42ab7d82501732da8ee61c0e9b3b4dc62acff793ca252f85590ef5a8a1b83f5091446c75b685c83a6c9fdd532f94d43f16d6764c7241a5576b83700e1b56a40edeb1586c3dda3c5c4b11566f34a71a15f96554d087fa6da3de735b05d80e0413255efe05adadce1d2e0ffa61caed24a3d3d634c115b1ac8bdad8e08199cd7240c6e7933e1e28a05c984b54507908fe24eced44bb2b23df7198f2ded3b9ccb47336f4f0aff672e776ded1f11a7a99e6753024627fde17fbfaff1ef24bbab7b1317377c08281f2846e5d3a7dedf8b73140002c5d7013e57e4e0d7a2c79b11ed6d596f29ff4ed476a9c6598cfa58d9b625438c75b563515f163661c1e9f7312a0c8712f288cdca42569358195693a0809acecb062ffdb372a509545748e366cb7aaa72fd7b5c966219dd9e73060cf48d76aa10c70984112b02c953503752c154ffe802f491ce4c8b3672dbee43ab53dd04f579d1ae8b8f4e076aef3552719c03c8d3170f88fd146b3c86385f7d79ec6a2d2c3e3057c251ea2f50a1ea3af09941d03cf3b2399ddde7979e236ebed7f61c5aa6d2f7554b57c06e9f96620d290514a62777cb9d38106aec0383be1fae27ada465f4f9cf81be0f5c7ab7ca6cc8ad22c05c5e8f5d7698b6a771ac877c64275009bfcec7a958eabe2e5d0a9dcb2c80d90c17e1973c5b1cac1bed7e53739508bc2c0cccd69869dc0fc1d13f7d55d16991a334473e94ae7644fb4ae09c5c10313fe95177791cacf8b1d1b57a48df78b78fe0f041b22e9796eff9cf9e5a76da57ca414f7832aa9f7848faf1555367eb8550ed51d389597ec284e18f7732e2b502308dda5143e19fe982298423b96470032f208ae7dedeff3cbbb8970753b2d3d58303042927af27dda0e4c49cfcda165af08f95ded4a450f54bd19b9276d44a00ad3e7582639d56b1d3c579942f95f63d355e86430e42f289ad4de59c29c4ff5e2dcc9e54a33d186aa74ec8b40b922026432c6579d80719ab48a3424158c4805edf51178dd32a933d278487bce64b14372202eebf703667ad0b33e3ae4b55993d1c0894aa3fecbbe92f98ea04e45906ca73747c37b870e077df73f7d3d070e7d1b55b676b0d5664e016904a7a09d3d2e80a77dc61d5d7d7ae32d1824390cf380e981419c162505ac078f4ffa79bf260582033fe9d32026043958fc4e5411b14c191301d918738a5c1624230dbc09d4294c8e116a5271e58d3a114cae1048b395df8ddf7d6c62ff158a7af4ca348c0fc9883df4d280cc53672ebb4c29d664b300e9720760ea1585d679d1f173c5653b5fdc550d71cf7c5fee170dcc36c844f16afa12dc088125df8ac949dca7a8f07b636be4c5be3f019803c4f68fff85e94dd578d7e0af0def517ec9fe21e12077621a02831ae326c5bcaaba13f25cd10cbe0c0d260272ed53507598faab39b4289a2d2f0a09046c7e6f98b17b137d2fab66df332f7ccac254207365ad21d18f061b78171b78eb5a357bf267c391d896f34d7289f460436884dc674d4559d6f5a9b7b87612f3a9d6578ffed29c6c6edb6e2ca60a7f36ac1008ba275171ed828f604818ce7dbf216a6a746372650ef78ce080a5b7a1499ec52632256a382b65f38ed43432d9fcefd20ec11ae1fecfbd5a821992d76991930d0f128aa9285dbcfe5b36c5c8a09d8cc2f6cd36192d9fdebf4924ef429a81f9a9fb3906d42077b84d1caed216ee75e43ef68f1ddad26025af05083e60415c9b6aab1a66970248fbd1e826c12ea8e2ab5a9133a80beffec18ef926a35d1f2834c79327d69f5b9e7795f11a0f4d92e27edf0c46088c85d18af6932ea2a35711fe1238e3ace5f204c26b80abb7e37fb9aadf29ebb5a2d1484465b4afc71d8344a2a73670a0a254752382e11dc90c885a5eec5ff64eb78a0675ebde93ca0f2b286fb01405c52ba113bfee3f3947594a3cf01fb4616f9e52297ee6250b499ec7dadca83b54a11c218f2fe99e0f3a7b2bbf70ac6d06126f557764714dccef9f595b6f823413d9a12d17df75633e8111c33c40ccb16f87ac9ee0ffdf808dadac85c54b8e7afe8ad56d5d835dd542eb37f2c0d30a0a3cb8978c7c866f45933a74719935eaf74ad9de6d339b501b29f7ea26b8568aac7c6b4761b832a5388258c3dae6dd30b3679417ccf8ca68516696025dd8ec7bef3d0faeb19379f2624810e93d994febf8db910915b26fda03e3687d30c5791005d0b20704c7d18da691045d3956b28816abf916615a6369c295233944240a404dba32ce073945a8aac85bb8cfa88186db268f8f55a1f8184a4322f73aabaea071dc4e479b6b647db63e1a1feb6fddd327fc2388df509a416a22b19f380ab52f88940fbe15215cf91bb00efb503db181bfcbc2b896c64db12803e85701b3d1fefbcd792c6313b4470d1f6b6ee424a09bfaea2354cb825e54161e7156095f76c8a9b705cfe98471d718a9325fa4b954b3e71d10d218a735acabe8cb87205eae713cfa9edc788e5fe1bc5a70c3eb0176fc30a04fdaf6c8a61472c3618a8963136696bdc16af1388b5115683de5c8b32555cd903abff7e1c64720aa92cd579b5d515c9775ec5955266f9d0cbeeb4540bd22e60ec76b849a5f301d6a6a24a03fd0a7bba70b5f7fe7a02b26dd81cf80967d777020db1fb5b0b90902b36835f7a0839519aef7c3a9774404f0e97e1ade197faa593b2b07485bd52b83b3f4c68b6c708aa17894fc2176a9a7c7e6d1561b74fcd8ba8e240b7e711fd0d8b3f0335e2873249d89e27f0a6f032819b43e5dd4fb7607fb2c603c8090b8994838129cfdf926ef29442bede6e05cb7d2c42449206d552be1ad7d0e12a587f0bcaef57bbc505570da118ab63bdd119d25fe1bc4f1a755e48d1f5ca8a9a2917f64d0e2f1b1d4d99b624cc87efc6f28d83c6b8277d0626731b3aa8d77f07fa1160049cb17a3b08e5248f5faf37105b018d9edf91cc591de0118f516fd94040b7c8164eb49e653681934e856468658ef68074e4e40510cef5defe7f097c2c08b78ea144ef0fed3df1c0626ae408eeb0904695194e1a973c9fe2b0f515a155f8666bec9575f8c4465e315cfdacaed9865b073ce31f414b895aa118d4d2c724ad9cd5cdf1115c30624f89ac0f62fecac2beff4fc486b79f1acc70abe93215e9a458c0324ad0f19830c3208b3f686331fe00aee6b2000e9a3095897d3868cf45071dd095e2374e179266b1ebfa91bcca6a260a236174e2d97869afe4d0abbb5d324d398c11aaaa405e48d27cb3d1dfb1a9471cd736e89714e20d0ed2bd793f497e00f5c8ca0900411310e46b1fc55604558c7e3c690b9335e73f6f1e9a76f89035c5cb106921688d40f8f1347eaa0f018b10d32640a0da26ede779baecbf7f805f05b2225336664fecc6705f8935e8a6f26445258b8ebcc95ab697d186c9ba022bb0a9257d68cef2eb75bb8099f4c91a3834703924e84b5614dfcb22b665b0da4e83e15db0cac6f2cf01e1e84ecac85950536c794876ff88fe903e5811a83a498f9306d455e68e6cab59b885e61e3488cc776feb98a13fb61accf1e3df58f177ae0b6b74568fd020290b56a65c436d0662f36ee8b974dcae5af0f2a44d1a337aad6fc196a20a8de996eaca467249855b2635036f8228d0879b2ab20e28860d07cd984490407264e241b6f355a440264dfa46e506fd4cbd4ccf0e13a7f1ffccf11064f25ddb44d04a6ad7064aff236967d061140e0ffe14297da51c4f3855d36c4079522fe69c08459fc446956fe6715bf653a79b40efc895c90de6d5f633f3d002004efe16a69376649a928cc4666baf96bf32f08d863c8fde7d12b2fde0c991b5131b551adbb51bdc00d2ec23d1ac5eb0409cb703e2e0db2ed080021d9d151282acd7505a71fa90e6e00b622ba0b760bda7748bd8087d142fa5f4fa91ca70ffd8db20fe8336430a212a089393218ae564a316b95685d4e32e0df56969343a2c236c10f8319dc0da9ad072ce6bcca25181217137303905632222ce2c98faa7c768faedc372bf53439f2163701912590e79fa2692578a33245dfb3777cfb05bcb2d0a46bb797c040941b5ad59abb87092b3acdf2920560b520b9444c38691b3c0f4aac4c644507eddff5d09ddc50235372e8c27de6ab8c12124fe67d23ed2b1ba9048c534c7c0b26fed918ce4ba5b84082e2413a05ea0dc53bb74a43318be173e21c7918c34d388b014b2fc9ad3c5f7a1618838fe72912986ba1622588ea717366bd4a229951aa054989fd93739980c02d31e07ff989c0c949614d706ce5bd48e307e822f31b59340fb11d6d62b54c30350b2a894357f3eae1e782e3b07b0b3387a22047ab05bc6a981ed900f0fbb7739df9081838b27ee5b463352dd424e3cdfa542c4a57c894753dca45efa74bec6680c8e9742caf4f5ff2502e343af26da38d22f27ed0906b7b92e9a64cef536f9f55721fc2c5d5d72a9169a0f9f6fe9c7081f4c5c6de40e6c1ff9f44b0666b653c5ff80344b82ff4c308fd0c72a1c385db00bb3861728e03afa5b7efe5f9c6b94a80224b4bb9c7d95ea7c78680c33e7ad36a438b34cb145db4289b60c77e21599be4e3f1fec02e92a30f6219ac55657b6cfbe0120156ddc2daa665d5b66726eefc4393c2a586e39d572f5e3a206faec01972ebc891ce87e91fb7b64709a8b176f792fec6f2e0dfb02a7c7e5fd992d79d3d0048a17899138026e3107c9cadb9b0bfffa65d57e84d9528b1e20715cdad101c39aa2114ed8cdf642c36db9ac1c9fe63ac15eb1b22e668b1e6291eb605fc39b095d937286c5f7f9e85b370bdb2d8f465b62ea46f23e5b10dcbcd7852afe356d7515575d5c63b502718b48a31e382e81354e7e3871e793747a1af82c992c3803cd86e329214130fbd3ac1453fc7b0a463bebe9035ca0db302e241bd40ddfef8bf88dd39d4bd205559ae47e6fb58996a00a6ffe9ef0920a81971e17e74d89597c52c3b65ddf6b335f1331cbfdec8bedaa86bfff4104f3d6dcd257ab447157e82b2c4020446685231ab705ca59ad93cf7ee1e26d876d359dc8fc9b8fca1e40ed8e49c5a9e9dd9e8394c6ef834365c0690b6ccc55ed453320caa71d98679685fd83c267356287babbf4fd7c5f9fb78f2666c37d5d8da4b9eacd8ebd2fabe359f5f097c4a573df6da047f9bb97b4c56c16fe64b3b3241b4cc75a45005ff7cd5c7593e9851474cfa6a627c104fb733732444ce218c7fd401a3fff3cae33ca7d304fef418831d2b04b4667a8e48605d01724ca2919838922fa8c8f2f68ade8d91cbeabbc7a08fb2948813c0d0ec8302f170bc5bc362abe662b296bab0905b11f7ee7280ae85c9924ee8628f07aac536221639fe114c837f7d2ecde4d3400efca507cb8f9ee31c2789cf5d5c7f5f00116570a02fb456f7780801abb6f7034f0d3c12c4b8eeef54ada2489ff680d6b19f4f8c0d528d4ec6e156b3b84d5afc2f93a2e72ff0c26722f18c9124c31d380fd6e2c7cc1e14e05b03a945dd57be52c71b1f0258c28da4d2ea87094f5db958943c55817f16433e475dd8d76c80dcfdf33f55ff23de054527570ff960a78ea8c7282aa3db1ad5e16011100dd0726b6e5fd1a0d191441f071762f39fb8282c2a3eecf2e126415aaad3ac74a3a5b37b1a0ccfe3a6b77e253f09d6fcd450c369b43d57871a2b085cffd28feeb23448897ee9b8f00e864b60d1c15004ee34f65cd47d01080562302297b6165372e903f09955d52640ad25dd717f131e47d0273114220066eb79ac2ef65c8bf83e935ae105219aecdb41e001ecabaef5ba9158c8809821c428e872354d66c73b990ea438665d4ff9f9dd9268d64a65a61b39d0d0696a6c4bac86e408ac67929c7da69e1d466d5896c7decc933f4007f12146ab3e8b55433fc0f94a7a870b659b185aca57877628d10134add1deb5f702b2434d49809e78c8bf373915d3b2c93b59d03aaed002c201c464ebcd6eaa464d04920208741d850afe37bcbeba72512e02375919c885063752bf1513b4b2e623f95a8878253c5b0d49f20e838da863145da346b3aa07f881f6197947ff69c8ad5ca9fdc92a251fb0bbb52cac442d2b4d0920e91e3a939a001446bad2c3f6b4f2a5a2dcf56d50c74e5a725457029b087a73fd9ded76d6c8b6ec71bbf6b81983beecfc23472651ad9c673bac83c9f5270a562c150bf2b9a0eaf83d9d97c6747814b1ac444059616b573939885ce0001a651c82396dfae03f3a08365f47f6c77d657ffc9500dded8321aee61a6512a95ffdc981072b1071eaab27bdbf0e393b50d40938584894670335aab9da78288ee9f1140bed544ee1ba0c0fd5d63fd2b66f786385de8a0b8558bf2d36bfe5b2649af7caa4167091d12e68accbe8a4bbd884316bc846a18ab2d526618b26db4094fb7ed61569a002e3ee8bb84407a614fd1fa1b52d508e9289af86cb0bcc9493bd256aa7b9be9d8acfaec8029bce4ae9e3415243ed809b7f3218ea51199c2de3c517b7846309a833cb4c119e94b05ff2c916945dd11d1be24c665e01659d3e9be4a0f7b8e1383b37ee39f91c0deddc493bd76a007f77bd1fe801b1d10b1a456d73f5b4e6224b120036cb2e91bd823f4e75558d231fead61eb662186f40db3f4465b206ebb485e1dd155e99082fd6c3174db434f9be1eaf59a73cb091ffbfb07a5bd8b9ba148dbf84e3eb22e051ae3c1fb517806dfbc8549670ad43ef26cdd0f6f5b382493a72deb9c27690cad651b8577927e18992a5433ab5cf5ac306b3157b0150c56cc2a318269359dfa801efd9bca2c7417bcf4fe3e235ee4a5d7a89dc3e79520f092a795d35eb1c1fa8ccaa62be0fabafb13ceef045c70eb1c4fd5c5218d221a9e27bb89689d39e9a036fc40b94a9e2c3a53ab8e16d9074e89f1481c0ddeeaa4fb9d531d520ae8254b30e4544376bfaff6071753a39047d7099588c061847603d4595744fdd9de47f9ad79300852dab32c7500e8caa5568052307cdeb807ef28119473bd5c1f67c0f65d92cff464a4469c24cfefd1f3e7bb6f9ded41c97700ffa60ce774f78842513e2bd06bac16bf7392b9caf13e45bb20c138b47408bba9a7d14820190e21c6aac5cdfccac13b49c9732339ecb18e500c6ede4083842d763587e343d7e732aba522e9f38fdeb5e3ccac6051ea44022ebf48ed7aaa16ce2229507b6150c209b42cf06d111a47f1d452c8bd93814aeee5f94e9544895fd89e91c3c6ad26620e49abc955a9fde3f1380bf44008bb670fbb7890b5dfeb3e8dc1aa7cc1bc956fe325aaa31c07ed09894da7c4d66bbbdb2473a20ef23713777b48043527d3e6bfce9e7c10d4b80122f3970ca9dba01e576b1b0aeb469d49bf5740085706909102bb5e669822781f9577da4886f49191ee13907b8f30ef20b21566a222c68cca621e86f93c76e397624b0aa6e974fbe75aca52e9f03a7476aef316c48c25b64f415528d71069a9c836e60c60888f5ea54bd9ccf0a339bf56ef7d6bfc294e4cb862d5627b8a4150431d39beaddc30c3389c1423fe3a948ef1f6a3e7c98d454f42c8fb4785d3fb5ebc2f9bb2feca1f311cd254a18c37b4480e8f8ca9ea073ce214f889f3fe0fe312cd43eba72b873ddabfb728699e243d46d58de64b776194629aeea8c77036933a7e6ae622ed00696d75fe1527a76107476df19b7a2a11293015a193a48a2eaa09d394fc4fad2fc4b929010e0d76005632cf535809949870f1e1b77321b1bc3389e982dadd08f1925ec799685f51a660ee36a8b4016fe56c0bde3ac848e45989bda06194e927acab42faf0c6674fa0c5226cc4f9ed2210f3cc4ac0c6a029ffba2002a1a60224441b719e2f8c69ab4b020f19f87ca89336b14c02ad209496b1d31a223042c6ba0e94bbce9e4007e657c699acc76fb5a8e1cb2f1092917234f81f509842d976058a157529d0c267cf74ec8e560604a63cb743da355231605fbc4e976acba4e2e9f4d7e9509fbf558fdbfeec3e8b8f5c7e5dfa5565b32702fc446e99e2aa8b940bf04274bcc1fe16f6df87a16b22bdc2b2a5db72ec0f1305f46e0901a8469eabb365d880f5528761d5ad6bcca22c2de85cde9fd24b34eef300aa639a1268c6f62dfcb9a5e754a657de4fcf1fc7dcf4338433189cbf0a2314437be06651e8c6e29b533163f4e80c68795eab2cf70380ec5ec7219f1e155f96b4d8ab8ac0b2d49a6f47377feaa74e7123d8b977bfbe9a23adebab742fd9adaae4e3f12ffc6879ac92cffd6eb4808b1005a1df19b7c0697cf2f0bd9f4012bf16298c21451d9d29793d211616375054caf4a6f93198e16a54e69376e0051375abd29258e55e0759b1d2b09071d80d973cbd8a5d82275283426cc42b7626bbd0e8d8925b5e70297e638dc6f94045706ed65fe90bbfa98b701ca0454f355e9a92c2058666f377a25d27700a1124f7db6cc6a453c357d768fdcea563aa551dba5dadcbd47ba7426b5c4f1377e0037bc46d75d955b0246a297c75cb65bb7a14f59207a81d2e8874be8620e95b983ef7737d49ad0c90fb90b95ca736f6e3eff1a11cfefca0fe3782454a6f506361a565be45095af8e54dcb7ae84409ad86c5810d3d19a381350e51d5c84a230d291734ef47005338e77a813e9ef9dc7e29a9f92c1e1c135278f0647c6fa37c09b6af5fbdade41ce366f86a39165fc3646d43dfc7daef2f707fd5eada5cc9f061d857f10a4099e478220644e2a56629e3dc674743c038c7d97edf595affdf83cb94701134c562131bef63b3bb9734b671c003f09c8a1949640a51ce7bd678b8199d4208dd205dfb1618d74490049aaf82a98a275edcc203551347fa0214378ea52cf927e39dccc8b3d379440cd341ceb1fe1c17076384634745a5e7933ef3c1f1aa607e9800611f85e748b1d51c723982461dd6ca528d3e46d55f39f63dc8f03e273daa79c2053e412313e3df9b701821b806b2f80b9e08a9f069458628280745e082e9c05e93553433606ca0525b7fd88421293c68de33989df8a503544c967799abad00059ce75d4261277ab326bb1ee34990af51e62ceaf981833477b97f76f075f3c37ce6450d6671f90e7b2a10f6fa9754f10708f7ca19ed7d34353853c050defc8999d11552e71f7f8e6d57e9a1428e6f490473116121ec589ed1a0b7a21f6ac70892b9c2b113e43ee7abc61a5cff0c2146e5de32eb046df631b333dfb14ab50fe982f920b5d2105d8ccedb52ef3f51531832b7b6c7202ae746e1768bb1a6b52f146f68600a829542d6436ee90f1753f82e2daea2d3210e5966983df5d240932d40ec87c82f42da889e32de455cf4a1b97759a70e744f59fd4efec4fcdbb8cfd377163a93623f88e8f7cbbf5bbccdc00e2630db3b9481a3605a4d494a3d4244c7c8d96a71e3b21571e0e887785ec1908d0e9451a4b8368bffd908520209c8ca36b568a8e7e595ba95130420fe729786dcd5bd084b2524d710d1aa84baa6cde6f83cc2d5a053552df6fcaf28d9baae1c86c4716508dd772a55bee164edfb6808d7a54fb8820f1b4e093775c2852d673b59469c05b7c7974a620ed192233d360342585198ba0c013851336e1c0a33ee73feafd5ca430f85aca75f5467319616d53feb1761405c8f56c51e5a608b5570c2e906da5c96e940f53042393f1d986e5d50483c32739373cc33525d98b952664e399302b5643d1d36a7d5495c15def5a8a92b8595d0bceff92383e1ce214e960524e1189874da6292ac70d3b205438015b2c1ded43fd04e3f03163fe245f44279f50ca09ee6c89f6ac0d8a1886a0731065c86e3a384f3d83d3aaa56f611319fbafd1c2f38ee96e3769caba39d763c293816f172f7536d5cd887231cafe6c2a4c4e2acccd4e302a10158d31a98eeb02205c05cc37925da834cdca6e3da976931ea83fefe752e3eea733bdb10dce2381cdd911793324aec124a5ccca94e73c8cdfd2abbd09901f3caf26410bb3d243320673291d45465cfebb782bfa34c6299b42a2b81568fd6b9c8a9ae93aca6797c8867ca35f334238bf36c87ea7d871c4230d30f38127268817432977fcb3efbf44016ab9c248970e1308dda4fce29aa8835efc7fcb5ad02f06d8ee5dffec74f07e04f536371b370c4ff05a5a05fd6166509ef0744528bd8cd0c8cd934c52cb4212ffc397b24538ae38f14bdd89e199b77662c4c11a4b4497793966ba0d5b494528c07cee68b4ef9bfd647d32b3c2df8588b7ebffdfdd332479ac70d847ee14a9d6f686d1397a8a8bd330719be8cf8e11ce63b6077cff7af92c793838ad26da9a5bdee18f913bdb98534fa0de88e5072d5e94847cc5edf0f4f1fa9dd1bf33d86c8719a993152b415541993af171f4557882207e4c81fd7fb4dfebf757ea98b62db8ed3499ef4ca917d03fbba7fc1e46c57d31dcbcdd9ce90735bfdc49011ea09e6d847d5ea6e65c771fe9f7ca1501bb4992f17f3a6ed7298a13ded6bb4e4a5f2d5a32f0891ed5a9b8daab4503fb64f564ea81cb8a77749279528e83050d97451549bf228b05a93a5bbe041cc4f9834a7e900fced427db2819f7be9524ab8365f1093d8c65ae03ede47dd702a4cb95f349b301cfda825750c5c2a74fbfafac7f11a3df4d24a42ee6e99a062d442d34d69fc0d5cf3c81d7bc7dec94be3284dc559989815971e414d49c383e30437b85e51a4fe63e29c42938c178075b05f5cb467b46a318f6fc3afe8e69dbf69db3cc31edc35f077fdc236132e9ebe5aad94a17b3513a6bb0502b62a3f4dd59ab5913dfd393c07b352947aa9b8de571e76eafb630dcedd297550fe618ec1bd373544e8e89b325478232de5ca702605353beb57caae399f718615445c5cd351d86c0c1475c9a7142c854dae462148fccfae53b6bc627905777ff71cde643f12f5a2256e263e2da3bd858d45b01096cc22c9b4d5f4cd2003fcaf8b0d1594452e87c8fa431fc5b31c05cf9961c654794c6981d1f254a8ebab1ae8a9c96d679b664cc20d19183e14675ee2eccce83433c44bf689529676baa80568c99ea84ed4e61d974809252bc85eb2e55b7cc93b4fbbad17e595a1bd7e550a4275b3f351c72ee27c5849d391a456da678be71fd743db155566b364f2c405dacbae6521d16180f0c5df9a5f6cffaefbc846ec89887e2a08f46a1f4f6814c73eb3fe5e57175b16bd17013c508c59a96ea6e6649678fe09d25fb06c97de4740f8551c6b6b4835a007da25f30b12f99d432d6ebfa8ddc182410d2582fb2388a6660e755a34be88819eb4342f90f971ea11709973cf7cfd98856d7ec2a003366556c6eb182047ad4f2f1aa6eba06f3a6c676d08c0220caad1c7de952ee40814c7dec62ac1e7a44acfa6540ec538643ffc91842a3c12ff02fa1ae12a90af32a7d23dca1154b85e01e44810b6e1b97148c5413b74d7ad84fcac1446b680a5a387f3eee8973e15abfcfa1e1e6fb89dfe4ecb93f51a834a46257ef985c2af721c7b47fbd828654aa0f336e02e804f628097aea5a43eba67dd9bdc7c4fe20364718ece929310298d155d457a93e150c2177145423007e6f309ac132fecc776ba4992f28faebb49aee9a6376e01c7353508b14d4a5f9062bad15ac2986e9bd8a24c999e0b05fc368abb3c93af1276745e5b442767de4b474da5b4ab8d05304ba647d044514b0f3f07b1195dec27597332c9c866590f17b028c3e7c8932c7e0eb5f2d96241ccbb098103441963442dea374197834e42eabc2a684e6f4360e3ac08a25f334ddfb78c071c6dcba113e9b5ec7c5c6b81e0b689d337f3c209fa8687061a13ee5eda403596743d0c4c75f01bf37024296650e64bd3e45b7e555fb98be2ff9da7564bf7a21845c13941a7ee9a9587c7afe29d02d132cf627fe5479e494ce3e5a3f180249c6835d02f2e6123e482f7d0432d8aacc3f9f908327988ecf9d3eb84146cb2ec5dfc4b002ce18b2745188fa90da4b4fdd18fad70a78d8e13737e4b14377c6cc7dee7c812a06f5dc2bfeb8e4eebd32d2b2a9686fe88a89bdb97eb86d90ad001d802097abc66c9c46a0238b58f30a2bd5ef41631ab328e3c5f6d9d2f3e24d0cee2100646a8a7a6ad7bde72421dd025506c97a340b4dc1d476b0904198c6678a166c39ead8e6eaacac3506687c8f2a1a1bef315ea75aa1a3645546067735701a34204b6dc8a85f25e4708e4dc0ca8122559484a824c96353d69ac19ccd1acef0514de5feeab6c4181edad3d8f54bcbaa9b40a147b633589d5ac6dfc13601911a17f0c711b4b260eaff01b0a30287c2b069a7083913bb73c6ce3aedc3cadf0d972196f26d4bfa8e3e940be6dbea6d20c3c8d8428bcfc90039b6243641fbf6c508eded1613a717fb885749a9d9ed0404058014acfba5725d40be4a2d3e0239a66d8112b29763b0a345673174e0ec6d7a2d65c979500667579578803ae500f7350535b5b7e530d68afb2beac99937fe3667c1cd4722c54e90ee79e89e31522a0c2190434f7d72b31ea3acd3347f73c9a0a204e6399103930be57d644eaedc80dcd491b0bb3e2bb5860dcf39904ae4008a114e0b5dd67165214f9e5910313382329907fd95ccf9b77d9994cd31e88838af1f3ba25e4b5775e3c8b226ab5bb0ac68efa9aa39a7ab646d705abe2e5c02af2d9455740c361a8a5c0c739f8cebc544bf125d02c5c27c824b8ebf27cc97bc4fb31c841daa1a0c501b05373e45c5ecb5c6cb9a8da4878c4247a2632820c87aa0e4f85dc6274a2fe046c4a12dbdb867e59b0ae6ec0a6e1ab0a5ebf640f23ef073fcba098a1d0181d76b1d3c99d5053bc9535da073751fce4fabd75a9d7083d187e8e9dd1f6aa8daf10f356fb7ed43c048c73c83b49f85853ce1d92907fab7ce3cfbcf950916e1506203786129de8d26597e8d52fc19b1ab5d48785847119ef6b626ea93190f739f74d37ea42fd9390827097b9fef5ba99728861ab3ea2a85847facdb74f33c48a5139f9a2dcf6510f54aa8e2abdcada3b57c4844a8a2fbecbb0d12b0ea9e0cdceb2dc6114816d10569bf5306143ad7c1a4ec33e1e404509e8388e90c06044ce5be1543a4ffa4fa75e806b9abffaf3a8a06e8c715da2527c2443ecc769bb0bd8bb9852c1043657b3f5e97639013ce8d1d0f5cc302fd321366cc1e4527f16c65afbe24a9bf963d7137c73010e15f2e613df5aa439e61ad5107920bfdc29db1649657d94683b5bef1af1e8b07238ac4af30297a55b04d5ec65b8bb87919cc88d9e18e5b74567935df9c9293ae652769413021b391640723cc093b0f4161ea0bd34fac265fb10506774e611fd19a9ff7397b54abf26d0f9e502cb99f141015cffdde6571d6e1fdb7da01ca13be6c757c26fe9d88daf9b200b45b984ce9641d22729b687cf79a71495e8980eb734b9dc70f95ad82b88bc14c54187b33f8f6b3e978e6d992baab435ce31052b663f79c864647e35974867f6d4bf8e1a1f0789bdfe51c5915f578d6fc028b8466f047f1e4dfd31c2133065b347e8774f8314fec51fcdc8bce8863ea4cceef168fa00e514ffae0ea37b1add4fb131188e4ef7832711e5488d531c08a14ac52aaf1e7589aa667d4253351a8450878f9f50ff192d60f99ca2b17ef2d07459bdf0e5abe369b7118b4e14fce5217374ba44edeab16450210db33a9797516de2ba8cd3fcf3ad3b4d6f39920e67d03cd6606d6251e309e3b8e93ca150562d935e834347c90d8dfb7bf1ddfcfd754a3f332ba935e996f08b016af40077a0a5a4092882667ac6c654ed4a47b1a09efdef1b88d87f6b689b38dd907ef43a8eb1e929bc31b12c40555b52da435629d4599fd78a9321fb00e91f10ff4f4d41e49bad74ca7294884837693a8f92be70faeb3aa41eb30c8eaca167ff0b574de77f0fdc66a441bd39399461cd0bb8c2aa9c025ad4b065a23286dd1992057637ae6869f23145e7eafc8702c7198e7c1870463302c47f2c1b1fa91fafe0b8d6ff23275bed755c16616936c007be01689e7744a4db14e3ef43ff3af30be844705c6011b9a6a4b333a849a13e1336e5c1979f5293d5fd343e4d4b9cfe1833e0f38ccb8e384a71f4b9da35eb87ffbd4306a89fc5b05078be6d2a6fd0b3517f465dd3db0c21c4edb57d6e897233e2050f152cfb015f9d9ed2cd805e2f6eda8f0b72f56bb039ac40af708ea659d09147bb9b7a0c4fa189bb02eab6f450d8a1945da18a3f717baec9f58b6cbd3ee06af02962198ceec18b03390ce4269640f9ffce18e2920aa3e6b80af2e6357091f12b2793279bd2ca29c4e969735fff1a19b5409b23c25be9bc3784f7be5bef8bac5ce2bda7a16cb51886f11a2356fd45d365ebf22a194de71ffbb1795411ee07416a99bab3916c072a8caa9791bf03b3771b536d24b632d91424eee6be7f3db1caafa1212cae5b2f813cd56246ed6c9586749039e15bb769e55d53c14c44c08d8d4be5a049afbbca6a08ad631d257f5345047b4b4b401e979ebfca251305b5122e614b7e6edc75e2149b979a28b8fb4bbf639f4563f168d5b1c74ebdd3c0ee4b9d4c7d8131cdc98e5c08b7ff2381d96e239d833265f800e3f306e374c1ae9da9ba943b26edda93e21546219df1453b1516b40fe270c270f8c0e89bc3970862adc6796629268e89f1627c95155445abee4bb2c9047e9efaa537f48c07f8e8493d8b69059493cf48a41124db800e6959c5a98b6e9ccbf2c78ea9895ad1ccb25cf3f0e5fbd8140801caf8eebe26280caf08787df8a776ba7bf672d3423cc6cd608780da7789f43c44810c845d463f19b6d94aba831e03918531a4197bf070f63203300711884809b31f61cb6cdd7bffb4fe37ea5775b6f4e60d8bdc8528868cc2a463e1264d033b81d1225c65ccb5ed6d61e305766de8d657f4bc22f9ec276f59a47dd31fe7bb02f3270a5d68ab34d7361f54f6bfd3b09d8ce3cfacfd6f92e79ef3c8a02796d78c7014c3ca49eaffdced7046932c3df2f3a4470d93faaef5238de25df3c7a480e3821a4fea62e5fbd8a17adfcba1f4f28eea727975820323178b7461b38c396a1eb0bc5078f1f28367eca83a5ba5ffe251d031015d5d41cd383e06212a120938cb14cff1860e22ef07ae81ba661c14c2bc529404ed79dfe372399199c148334770a06428e2dd2edb298af4894276944f582a68137c19cefc0481165a29bfa182e2c8731bf41036d71e51ddec7045c271278ea8d6dba7a52dfff6196dd519eb30d24eedd7a3668c25918cb5957b19f9f32aa1c52ef8fd26412aa45ecb6351445741d85a3b68ba9165ccfea789baf470ac88cf10d5aa273c2004b027c645f15faa3aca14268e6e0fdbf8e278072b0e185286e4542726a0c8b4413f36a3a2f1394c099e74642f575453be1e9fd9f711aa18497a0c8c781c73b8cc69300b12bb28f88d13d7b907f1170f297b57c7de3ffed53f2c81200847eb9a36d565f370388321e741a509cd9d2fb2db97eec4fc008b09a871738d61d9eb12ebd3e8c95691eacdc29410c2077267b9eef07f28d8c285a143885bc5421581ac9f8e7dc40caeb6b483c3b38167dfdfa754a6184fee996b01524bc8e6728145c946c37f6402bb7c93121414f1c80f4df597721b1ebfcbe27c74e6c71f90d9d608f179973099e8135ab06d0c8d458fc150bedc790a53a910022576c151d2ab2eaa61ac04847b36c0085ff59fb256e24c66ce3b61cb2bd85e175ed73868e31eabd89ffbbd82be7c8d39a80bf2f80e44848c79da92f4e2f9651337048a664fe2f0b166e13e6662ee3c40d1000bac34aca922ccb7f111e6c794e4f1180eea8de92115ea06ba6d385883d82516af85704023cc3bfeb748a39f984fc19d2d1fd586a24ad8c440304e1a8d5cb184f4e7650c8d36c0a31bc91b3feb05438b5818184e1c1ee32c4afa40660c0e0e01e41ff55b26f22e014cddb7056e84cb8fb1e0c49e8308411be829c71c6c1fd97dec1f3adb72208aefbc4e17609d8141ac4576e17e6d6ffd12c4a9e690b7531160da770412946114ad69440d3f89cba9e1f837d1196801a15eb1efdfa76dabd476ce60c3e4f84625ab2d03138585b9d10c701ad87a5423b4c89f0216ce6afeb1aa210bd9dc01b8ab4c4c0a2c667613a71baecc52f451cd73fd488b03d5843cdc5ea38bd974585773b839ef228ad6f611e39aead63a94a021b0093a3f19e1ceea93fd4314b9ebc4863e01db555a0d81be993d3c7e4c24c5226ee4a4f844d33126d1d84fa0931fbc4146249b855e5ff570a880ef73446099623244e7c595d5a9012b8f685a68dd10be6569d80202648db4402fa3788926a6083c96b1964be324e466acd340075ff81a4246519adb4505fbda49e6234225ecae0d756f1f96ab0b8ad27a0a3a0a7eb967bbf459337f4a66b501c42d8b7c60e42dc892e1d4d9cd336f4e433379d89c048950403824fe6e5c290f18b8983eb36612dbef59320cc16ac51cedb753167880d47bb6a826e4decfdf9757707586aed3e9ce6d9a0b44cd8bd88dcbfb82d615f881d2ef949379996e2d9085b99d865b870adb7a64e240875b3f9fd4367629326731ffe1f2426682cdca2aa19b9bde47f5da041a96828bdc0019f821d656811c3f5daeed235817cffe9fd478a187c4888492e295385556c55174e7655f1b6a6d75c1c57835e3b37590c762bcdba1e604f1da41d6827d47352bf57fff7e13da493bcdd57574789d2422382bbde27bc6af814eaf59f3a6fc6bb124cbcd89d78e53969afb9f8b08321dbe94b06a275b0067e897b7e1fd30d94f7f52490e982ca63efcb510dfc542bb184ce98d6eb05fe27ea38dd6f9a493a23ba74fc434a946bcc20dd778202f97f270c3f41550e1e7a7f7eb5e4c7bd0db26e734e7a81372bef184322823430b5a45e1b9568a0241498538ced272adbd76f749a9494378e25ea42494e987c6f9cd4d981cd910e3887ae54d6de47be085e191bc37ed3fe3bed7793c83bbf9ebbb826eef42615559b786dd8d9a9735f28bb2707dc81b6a948f09ce3195847f5490bc20f728488d09b689771f577ef1b2eca67508683da08da7aa96c3d68e94d6d8138957720a86dec0fb151e76f6cb069fabb203dd626f0388642fa6dceb66c018735bf2f77860af5837163fe8d41cf6edc11adc7fe891ecfe15521a05e456f763fe2fe397eafbd6418f3fe5f8ff9f80dde117ad88b3cf5afc1a33f91397e4184fd1f2c73e0f75683bb4c0a09de499ae7ce909832959f5a077178c2215087fed909ab40c583348dba514eac59489f70356c0e2623cb9a800472912591265bd0715e27777b3584b06a8a01f88dd15d43049828ff811664fe236117bfd287da2e3be9182040755cd0b04a4aa83ee4b2bef6f8c2f4d82935a08604bf70f7844cca092a0d5a5c00e8d5ecebdc44797d9104298830f269823707d00f0248d7df2932ddb4eb994c61468e27c03f0798a1258ac822677333734c5437146ff6a3bc91b923b89f6be04f6042182cc8e1da3ce1e2319489a7a19f0a6302ec3799b7483d0963d327239b6b99d811d3d207b7c7918faaf8c67ab2d6331d9883a4352255c5871d1a72bfb6fee964c6d63aa9827716ca2c327dd23c79119e48e4abf147601a2323d49375b77559010302f15513094f681024f8090d6ef8a69e5a93a123a230b5d7f5843d66093b3a1effdda027ab88449c16f0c5271878f8b51aca2ddddd9cf30b563897041029bd96f01a78a87f7dd24b1ce120c1bf5e494359043b6cbae2fceb1672e5c23f2fbdef786818e3233344b7f7497ce66b65a7eefa30a2f7271edce4544987a4fbf65813d70bb8f0d492747ffbbd961ec895091ba9c4dd109afa7be6964504e80316e893dfa6482eb3a53227a6330521a78496a1a38a84189e03004a595719f2780876d4e5cb47dddf2803d6524f552c7df8fe1be537398134c425373bf665e45a7eb23e99f3e83869615e226770474ee7ac454166a909acae9645053a72a9da1d24de9e3e021d3f977e459aa87a5881eeaf26a96e3149af49cf7b4a16b601fcfaf1ed53a532640e109289bfbc24920c24191fd94897f3aa781b497c48dec40a484656e39c02531ee1d3558ca26c6b0458b044c643de831f16fdc65aeb4f1fdfce63f8a99b4837afd68b1e3fa94ebbe1e5e01c48159c118dfbc0962652095e0f61e2d298262469acbc189b60566ca00deb5d860d33ed356c2eb8f8752a8702f412ce3237ef1754f581cfeb1be33248f0c47161cd78c1a7fa2bc3ea3c1fcaa19e6968e5b2fd35dc40555e36d0e2cd616c44c6fd3bc27f4564c71122f9c57fffe571e3f2a165a2cfcb17911177b1596cbd63161e12232c651bd9c18a2615059a07c64e5e5e723062c04b891d8828c23bb5d836abdd1dcef4c019f0861b72e9d2f6c329d9b39ba1b89851a225842f29862bfbf061cc6b99b92efdacdca8e0541eac57464c100ca350d778252b8b895aae9bf3394934cab62a9aa0ad2f59f1e00c97969390df9499dfd8a8c0b0a2007bc3fbece857359c2b7452d0ac8f250872b6b1d84810f86f3b6064c71c32ea9ea938596c648213f6c19ff260c20cb1a57d2fbd171f0a539917fdd28d6c908aad12e27644bd00cdeeb2cd724cbbef33223c3d981647aac8b41b04b3b872c32510b7ac36a532494b7345b02bd0ccf288af8a872f256c44c7c4592d081297f42a1d00534845cc18872ab942347d8a5286e0596d975c7d64507873267e1825aad0aa7671be14b507aaacfb42ad21cca240710047b08784e4e151e690c25eaf578be59d50f1963f0071bd65dcb9b4794ab2fab8361c37ac8012c9a48f02cad75fe3342126550c0b662e392d420f0185e1287e84a650b3e4b020e29d1cb615af52956dcbaa92292d71d6c42f4c6426c58ed0ee1a4b447e2ac34d2b64d02c39d9f9cd9fc1e8484efdc0bc2a90c2f78536ed61bc187e7159d897a79818f12a58229d4871e9d6d3df75e1b96f09e57a8d77841709008d8a32140745c2a2df03c93da682b28ca72aab4c6f7de547c04abb9c503679bb706bbb09a013ceb4928288ce5f037058bcf516a3eea29005524db5f1802d7c090f43715058fb242e7b12c297eb6ec72b6e6660febf8a6517b3f33f7aede4fda6fc1823f7654b5f950a35b2ab194f3ea052b43b73ffc9f494f46b1d2414e065581f0f56f37b8b304f57c1ef2fd904e25df7fe48a2574e49e9fb526a6067b7ec9bef5e5806899615667161c446f849d5df64f955490db89d1303702fbfe6a26f8de085c8af4c51b9fb4c42a0b9f33558a0a74e66be585f2e3a4354a3816545ee967c61968e67cb58ad7351a2893b187c56a8c118b7aa8411313ff7320194b0382a757ba2ccd7cab897955de41dea3cbadcea6d9db6017d4a3e2bae4dfce2fb3259583916750edbf74c34ba7f8ecd795203b8f1b43a367f86c90c49ffd59aa5fd6f347b9bd0631d69810ed851800c1c3f7020cb5c55412478ef6961744646da5e1bbcc9fd0699b2b57db12e12b86ce84e4b7858d64fb76c97d67480fcd1429e93759b6bd38e97463c877d1783996f0949fe3b45b46327ec1c43fd467d49b3bd642c87f0793c4c77bf4e44016f6e01c96d56a32b230bced4e0d53f2beee3912074316b2ff75f86ae35aa3563d906cce2b0bee114895042441e546457e1a87db4c32d343755da20e995963d40e389358aba87bb77c4983397edbf2043a1b98f9730780587e4ac3d24f9b0f62befff635318bf8dc9b954794db7da0f100d89a0a35226efe03f74a98702316774f42b634a60543048bd8dedbaf7d40136da986ef0965d2321ecb4f49ef65267a695d7570e41e66c76f2786ba9aab23c73b00a56f9f61e6c910352c0797637ecef4595a6d909dfaa00ba0302405c72c0ca5e1445bd547a3512ad69c3efd70a6060ff494d611f58e71c42be93a02119d577992e1ec9de5d9b9ee44d67fbf31f66882adbd81b6bb508d31076a23551650c115aa91dbb0a5cfbecc1d991a94544905787f871beb007e1057e006c5ebeb866e0a79947ffbe91a49cf51d3a832b3af11775e066cb5d6354bd931a64016a571bd28052db7e6fdacad93e0a2edf48d03e68ad9283a7a1b900d70c76d7aed18f4b1406ebde2b254bec79dce88543077dcf333992421e047aac89f31752720fe132f224752f7d1c4c67d1f5e4b569cc9c6016afbe40ba061268e49c76feefa0925c171ff75b9e1d058f22d4813db5f7ff500ca81f7621597dda3ff5ff2d47c43bb07acb87351d5d90b3f845fef4bd3cbba0d7f04e891f6b45bc28a73ef6f4ba9ea742640c73bf00d66df608dfaa74d57ce519e7bb09b9b147dc43bcccbd6894bc4f63747caaf0ed7dfce25151e49994a636c17d4fe5f596706e901583a2987522885faba9ee8e70f85c9c167183543ff19c1e98f752a40e8efa339e331ded7c9f3e7c205be4ea38770d2efc7f4787f4e34241fd70eefb9c99c69830457f40e734fda5b73d4ca37940dee6390639241a6809588fbbf10f996d8fbf0f8615e99436d4d3323ee3d0e02c39fc51082b04219b3b5b02fe3c7607eb196babd48d63a4ff02d9d657cd4988d01097ee53b3774d5dce08644008c665977f274151f66f01ebe348ece94170d04487f42c7d1f8d24181738e2120287d6e835c8614b90d74c7ce2f32c93f297a6339f237e075ffce030ff7318f0d9f3af5eeb81939ed2c8c9fcd51d71e4ba8d67bc4c033262ec2f70eec3895dc5cf9e9b2f23cd3ad44ffcb7eeb50e02d5ecac3ab3d0ca5d2a2dc6691321d40c6008f80a78956e7291430cdede88e8f1d6ca670713d6e2d435de46f3e4434a9fb9f08262734b1c52c86229927d3cbc01a598b9ac18dc76e8f0cb5bce03d7a37d8db68b798dd76a41e8adee691d772b55365b08bacd3b62f36e6e59df73fc9ee09c6c3daa3d04881745c3a192b6d5abb2d5ae4c2a8683102d4ac314f8ea5da7561e63d706b8db3f23cf0551e164d8253b7747f7e4b6e4b6c65f86f4b65414db519b71880fdf27b7528201df37e4734d30d2b3c2f85d50f56f9a8d0d2b8fa2ccffa052d1a7852c27baa313bdea6ab6fae71b7a570db2afcad73440afab7060d40d79760686e542e11acfdbe2f5a462b3ee345e48234856825839ac12e099d983f3dc83bc59e2698fc1ef4913619aa534e5d29b15841939ae91030c831b833052d850348fd0ef1732721bcf4adde8a03c904341ce342b30f7b3d11cec0d6f89befd4901f9389bcaf88e065462ca66d95353ea738d256253cfcdf4529eb13cdb53412651ba24865d609df0f4956d16918d7e4e16e59d96589294c472d13eaee43bc1047c25768006b0860e4ee2cc94188f7263f9693111ea50c7e63da72b6c21c774526d138e7fa4437cc714aeb5deeed14841025fefffd81c36a335325f928d270e9a22b2491b1b1a4c6c54cd5324f103f697fc05005708e18f28dc7334c5b35346bd8c8b4e6297cf278401bbec2ef1c59b4dc4da715e4598f4bdf064b6c8ca14a88e70b9b4812b47762bf6620ff0a097d5087cfc1d5478e85a549bf57783cdcbf5e2596752ed723e4c7466fd76f2a1ae89366daaf75fc23fbd1c2857e0ff8e9ffffbfe1c3fdffa13db2d91e19c3fadc08de9e89d26a6705ce381590481a3873ac0289be37e779f7a7953a0731516b6241b790303048c070cb45ff3558dbbc88bcd457c9d5ed42360b83df8c6e17f5940abd8deaa556e8b73ef1ee51c5d01bb0670551b5e9c416551e4204aea48151a052126d7b797ede1e7c6e1c9f8ec3153e397903df5baaf3db7228b789e9788924aeac986f1abc9e6d3f6c043a25279961ad7791b79f9864997432c1d0bc1d5935ddccf6fc966a14656bb5b29b37175aea918625b8cfa8ef12fb170f9926dc9272247c47ad99bb61c12be61818afd60a48e5ff6d67cad7195711fd1bf5e4e229a39d55cd8a7dab82a04ac90bd44d518c4b6492cf2064244403fe5a8d8e50fc5a5abba041c284148b214021c787815698f3240e7c845f4334524cb11383d5578ee762a83e9bd522b7947719d352b51ec5656ee3cad2815a8d4cfb455f57b758670e29173373a6752c70155af4fb263ee3feb2ec8b308811d1c5bf8b44876484388fc8dd5c4175056d42dd58c7d0682de7a364fd42ffb4412d97b698f0a6bf20dff0904b5f072d08c665ffce2381deb83ebf364b1b94c7b7589de110ff8da59cb2cb2a667b0c4d865deff3e44427b8e5956e65196259cc5f7e5478e8cf753850852f7b6b7640b7e347d70f99114040986ce0821dc7bf5f6ef2da7d5af2e4aff2abeef028dc4664e154eac901b56e34ce0f5e6a6bcf611fa942c1a0ea9cd8213523bf4dd76a40aa617296e0581994a4b533ba2316c2663434524ea6ddfb7076041fcdc9562b864f5b7564af985f24d452bb80b376e5b9cd8fbb235ca4ab9e10bdf377217c89e0b99f87edf4c23e0633efabdfa43bd4df52db31d0ab6ce609e8abbf1f8967da168d0f3341d37286ed46156185acfe1d0399a52b2344cb1d4524003be916cb8c200d63dc5eb10456b6065f56f8fe309f6a65952c0f6f4d774755a1222d35b096aeac62f06fbf74df70537f509ade0abf062f9c095f4a8065c1bc2247506a09caf2088310cceb638e591fd119615925a3ebb34da37b00430d44f486481ecb13a3995812e07aa99f0887816da67a716ec1d52db7987ee63368b68caaa3c0097e0501f7a7fc4d21ef701495cb9ae3ff2113a4889c916ede7c06a6e7c14514dd2372507a6385548af5e11c23fffa2eb39f9a9dc5d1dd6ae7bd2929d0e4410f8eff9d5fb4abbdbc5d95bf69ee581eafd848441bd879af004a0371a038aab4d0d395a9fb428dc6355e71cca6f342116e5a06d48ef746a1dafc0e96930eb21db103503058fa3f6556fdbf5b184d7260de6ffc33d1a12d367666b47d87f31a3e5c37177c545aed29a609c2e294469d1daa1d66ccc46a27d5f404bca690c6b150803806b68e92e6bc0a02c430fa673d3f3ac3bbd58ce255714a2d83018244d07b88d7ed5a4800d883ab5f183ea83c1fd8ba43c67d714b6c4ce267dd4fa5a939f5307aa4988dde7643d22cd9e4f5407345eb8c66d90fcb5e3abc5c5fb69c1d55982dbfcb353e04740ce004eee11f52eb98b6523353e5866e2ebd9ec771210cd0f55a61a7a1e35d5760f86a1b62ea4a89d55a31497a1e12ae2aa13581d0febd3eefa9990b690a03348b794ba08063d854e9c04b49b381c5d72f2b670529dddc401fd77b6d6a0847b575aae2cdc61888ffc938c0493a23d6a1c6adb4b192e50c68978af3d2a54afc8591d0b76cc8fb55136562552f6d24cf3020b0fa6bb85989e04c310bd71d56494a2722beed92d18698468200719173419b4134a3d9423fda70514af83f1f437484ffd75b9d8967dfe9401e1c2eae5b65487678b190dd7091b0c1b0c8c2df2e0530296bbbd4c0d5d01d0654ee5c27d2b30e742af2ce3aed0e87010f00fe0d519fcea67b6f3f631dad9c195d51459b64059e23ab20d2b6ff8834dd06a9f10d16a28f628e858638ad205a3014b62b25ba4344d848882593894302b3f262c6c88fc2ff4f3c6140d0e47b42f428e64af89a594f96096f87d2d614d6276eba329718ebaa929b0c9b18c4dd4bc1fd71e501f615e54f19937ec050e6acacd6d5c7f2d69c6fea2888ba1751c742a56f60d3d17e82a9087bc8c6b71a9463cf6334140652e643d8c3baf232fffd4f18803487029de1dbe1b28aef4f9b55271187f62480f5b7985d66c2c00717b7ff1346e255ba61e5e1e710d6839b7618b9267aec2f14d28428aee854d16c083ed619856395463db69b1ba4f9536d998980f1b62bed132235800a16995df31304a0af41b93c347cba2ed732ad05323d94a649e3a0337a4f19d6bd0f92933ed00001657fffc6c9a5f9aaeca391536ac11ef7c271a263d35c53d58cdea3c112112c6fa85c0632a0d533d86c47993dea4e65ef7704f910904d142f046761ca0d2a3d3b37c3119b23ab99d7eab1aee1ed3a0c4da715dee25cdd7d5cb8e0eaa86bb5e1ff6783a7a618385cba90d2468336b3150ba695ce57075be5c3c219d40a7f7e1d12e2306a288256328ae65a6e09b5f4591fdcc0d6b7fcda51aef7172a999a812df7192df4d5b489888162f6d6fe8a8a6475f8a93624e538b4282aeff74d845fb4433a2ea295ca04eb77c0198ef215c46c206b87cd986953868bd7654a8568cba576119bb8fee60792e5b885a6c2d84bdfff9c5cc455258c0f79f0c9ef71e8ce1de25dedfcd0cd2554e3e614894a477e21a2121f7b324eeb0c4723e2348100dcb4d45e0d8cefba512fab995b058f1b0bb63e6c0127061b4d39814dbee878ca22ae86661c9b17a67284d8f7fc8253087db2f7d840ec29a3a3de42f1f3681fd199966be3d86560a2202ae2cc8015fe7ee3a83bba56b5efb0273b9e622002a08d92df22a89629a4cce51bfe51891bea3ae1a8feb61961aa956189636d10e406a6b292770370fc407b76e4c1454d739d028a0a9b1c0ddd3a323c498cd1330ed2c880a7dae83fb8933ce971c1dccc6a4314fb0f3bbd9776eb9dc263043cc9c86c663012df24752a4ea54ed9f342dc8a110d672af861e705752836945c5d4f5f778b09b1dee6e0fc9608e30ffa9d88f25d028b26e23376a5c1d569075f833270df515177882db28cc188ec610fc0195856545343f0e4190246e31dea55a19a6c76a8bf9be11a39a0e0da048fa4276faabdf5aea65d9ef8587059be5e0bb7c521ff2c554914ca4008e3f78e97bb7751c19fd76ad87927ff5b353780aa03fe4bb2cf1e69bc3d5b66b8f6e6a01aba2ea5f9e1bf3807923879127ec87ddcad27382aec8181d3bfaac2ff148ae9801e350f92a79ab47a144066fcfce60f921458b96046c7dd1d065c8041d5bbfa044fc2e58e4cae103bdd433c07f32058b3765d73174655b8f6ebb52c27f300933841164b08bbede5347350dc1b0c4fb00089ed2faa4ff5ad0d9a17ff448e5aea0c54da025f9c2dc4fe2d57b6f7c1cb8a6e4f7d6b3b5b32d0066395caec9f57b30adbe8a3c3e0610b4781e0df8e004a046ff35b4adb669f6f9e397f89219f6790c0b473d38d048b87d911bb196d2070ec436fa2f79429f534c1ad87cd5e77aadc78fe4b55649daef232bd6b4956c8eba26e4a90fe93e45e4752f0df1359bd301b3ca48723d6da16851874d14ea474a186cf56e8aebf8820bcecf4d5030c244b65756cc47ef31048d09a4fed6947751a0810b3a9425a739c24ff0cc2f7474059509fc65c61e36011c2d0cca7198249bd2a92ce7e2923b839086d28af755bd025338275d0275dda5fb11951ed8fef5d4066e50a9b47cc7cfc176607a1a28362e2c64d0517766be0d5fa760b2c8fbafdb1f9815203ad38eb9b757561c93ff2f8b1aa69bfc3a401e216e1e29f8910b79ab0f229d97cefa3490e41870f9fca783c9910b2c86b9ce09de627cbbd49c80b37dea7da9567f78dc62a25fbb7ae5c8203d1dae036a6d1b0c476d1a5a8160cec13c260c96d9099453dc4e62b68902588c3bf39e0d9d9efbd0d88d8b4c24934ae28fed20429a8419eda512b58f6c6626c13b62aa249e276655160eec07bc7da4be0117716d1ec1ea7144d7bcf9fe53dcfce667a71e52a97e93dae67e545b0edee994bb0884c6e837edf8ba24872f62bb55024fd89097f23a4f776dda31db5284fc8f922683d578fa1d038dd0ffe81914be5b499695200c8a8f3f98d9365799126f07863ef731cbb4973e91c0463bb6c35ad5d49546eb4ef57c1e086ea2e611e4f7ee99d62527fa1ba5403b617057131a1483281e9bfa54a238e4bdcc6733b3afc9b3f255c73337b9eeac480aaee0f7a270b350f50a0bd8e60e69a822989b009e637656e1efea63c4288a26fa52a42938fd598ef1460242256a1a6fe2ddbfe52b890ae3e119106c2d57dd30758a30fabfcb2023f0e2dbb54a40d2e517d4bafcc6d4697976eb8b16658592ffc15b09735ba3c2b73a117575fe14c50b8055b0e3c2cf5836cda6a7ef6e0b97762b6a8272b1fb8e23dc00ed7cf9a25a12abed706f6b79d7091afc74e0fd742c3aa349e93148310ab5bdd2e5fbac769e512bdf15775f972a54277d1fd785324ca2c3270508fcd5b50697dfc5127c115eae03684b3e972a204e12887c4117836179f8e9c976ef81f46e385cfda13e3ac74f96ccccb45a0b2763fe6835eeeba474ef778eac8da829f09b585726c1c3c15df07ad887f018dbdca2a0c599b5324c81ff1fe23e0f57d3379b0c4534caf755306e5ceea14b90cedb4314b58213554fc4f38c1707ba71e8663e0241ac49efaf6380d8c6f7fa932e2cac1d260cdaeae25a71fdb3dd42cd3cf2fb0604f441f538ed96f8967308dcead88036c7073545d5c81f73d9307f7ba911f1da6dc9878a13a0a592944c8c56c2c06d3629fa8a5b8a3b73774125c4e4ea2de09070ef5e9b06b1779b17e2d37960fdca98ddddcfc53f79b2e0f0110b63ec3d2b48da7293aa82a05636c622e975789af6fda724106fdb79dda67bb2466fe6dfe21536a2449b619bc923cb37c0bdca3eb9ed2dd613c043cb9259f98e4fea954af36b7d71e1cfd317d19804448d7817775c8e239d117c9a8ca81ae324da106062dd3df8ca8dc0d836e5bcae5d4aadd35d65160e9c428f38ffe962acaaebd3ee243131e2e60dcd1ec61b4b638fabc9cbf206fb8dc1ec591240405ad584add7e03e4e30401e51ff4e4201b42a8b196f255fc27a002e9b98e48fce2183a6d65c5940bb1605ac07ad5468b85010043b459bc9bfa67a4a886331923dd1ff51d5b6bfa3565ae01bd23c4dac2f1f78f679b539112cd8fe437aa4a442bb00ea7499cc1019eb22e845df77ea7b1f9b4e94fe2415d9c63dda810d2414b85c27089ec13db80404a07cd7eca0903b5e79c4b8a52d3873a42ed77ca9a42c0f4c6f663c6619004862bd403172c6c53b7123a509f14a00ed141ce1421ef2bd88ba11c4797a568a56a1b67dfcc0a32b8f808916b7a5b5b5b451437b8e7e87b945c6eaa2f7646f99cc80e6804555a376abdd2adaac0afc373455712bae5b19556872b708a5b95dbe6175041bae5fbed8fd19f24822b5c4a808d03f6ded7e2511c972a0c7904c2cc033b11f494be3e3606d47c3ed7db8010ad3df0c9cdc1da91da632dfdac29a839260e95d06bb3379b230aec97c463be163a815ad12c5fe721f722cac82d8233aa984758158c5aa4aea4d678ebc31ec8d817709171cb7fbb195fddca8bfae4a4c8289bb4b81bbf6207b15840b825ee9aeebdc23f833c6aaa2fce4cd6bd4919b372b5813f03ea7ebb8935af6f4905b11d572ffac71cea20de4ffca459b3f643258d82ea853c5bcf5c62426043a9a32d4c7f4a7cbad4089290db0db5a626b8b3e95e590bb1a41201bb16a4c2dff6e594d0a7a0aec1a4d4676feb2bdd4723657f1268542de84c9c9b10acea0cd90dc1befab4ddde487ad41f8aacd53f4dbe93911b4a20edf01a37b9d4073311a4995279e875ce152ab3683e4ce87f4d24901326739ed364bca529d09af54f3af728671064a8e4c69a28c1aab5bfa181776860f1ed7b32b8c0762fbd36596bf54850309d9bf328140c34506472fcde3171582eb2aa32c5eef2d5ecc692e1cb4165d8757d42ce1f8c447cb0a15306ebf11cc78b36dd2db0d3c282f0de7252a7c6b7fa9e783f06179de383ace2483ae87d32e855f8989c3d81ad52db1cbfb1bfb29851707c6508868635d40f57ecbf6e40c1d09c80a8aea81cab3ff72aad70e93aebf6b7a04d297fc8bc6271280e618fb187814ee2aeb3947bb0a6b382ee775334493e019caf95022b2903363bebb64212fc10a13f73af766ac103ea6d77bacac8f5a67a84f1726d67e22a8a7bd14e29a9883e0bc2b5190af3756093f72fdc8d3a4ceb5dd3017dc7c704efafba0365f09f206a263ebdd3b4b595189b44e239ffa234c4ae313e6a91501664f8a5b67807f6291c015691b3511e21281d762e024163c545ec14abb20ad9efbac937f28b65375c54f988b6f7ff0db7e8ed6e2c180c18dcbe6f244bc2af9fe0bc915f048b4b3ca7aa6eb0ef1a070f152fbeb9cce5d16330e51d6a418f956cd5178ee3ed6fe007fb180b7d2ee646de4f3786978e4d9ab3990b73daf34f5aed0badf407352dcd30f555028f3d32876a1a53188ac30e325a4ee8ced0aa2c01008fe0b7d7b65b1be6e15fdbe912774e1b00b1cf213973dff9b0ad7291a9926767111cc672987903ab270732158a8d349aa95546116ecb50654a0faba0214978122e1de399c2b21a8cc0d83b509dced87255fa740a954400743fd85e970a6920f9f54e89eea074576ae8d48484ded842c2b5e7d0c9c3d60700d9aac83fc55d9f616584707e49b885d8e7aad71187d2f0470fd7bf03360ac56a057d5ea9c2049976ba1f121636864258de3e7244906d48e26a00d16d75ba4d86d25453c7c0e9c0756015a9dcea2ce94723a1dd8df1644bbaee1b5c29db5aa902715077c05057cd3e1e9de1c8cecfed277ee120faf10a6c4287f7a06e6b4cd54c09e548f3a59275814a8d3a5e518b3ed11578018b57e07bb884709bff021938b56a7ef5c72c0fbe4ac32d255ff85a8e8a3774d902b808cf625b29092cd63b9f8100ed6f89db3ecfe82639351e0635a0f696d572310e7e02cfbc678f3c675caaa7b72086383183812d6acd1169a731bc733febf278a9a811c79af4418ac790a172a2f6759ffeedb7cd2b5d951e36bf767975d845c477419d94274508316a206d40e465eba676a5ab92d6c000df5c36bd6b24c7dcbebe1d1094b9009a019f36da6751d7e8de56bcdc899c935d9a28d33219f9f554589a54c7eb31655f9c788fe72e96cbb7c8884d1944b5d38a63c8f17f0ee6dc3f93906d8b740e3d12b8c68a0bf775823f7dd780967c3f855b8004c98a0a5b6271d5088f0d7bf05447a4609e4979f4a6c00a829956c6ea9d19f802541d0cb9d51854180663944bddf809780d800b03231160baf9ceb67c8354d6123f967f9f6aeb6c407a15c1e1f0e9523f2968db69edb121d33d4e7ad88e440f2c0ac274c22fe2f5b56392ed84efe43eca37a2082ea486ff90257e4c56c3c802b1854011a6aab5072e425c3b9f7209cf98ceb1869c97df85ce16ec27e36c2d649eb8b3e8dd5587cf08f80cacfd5c3eeb227d1556e072c180286aa6365bf6db228ed9609251334f50ee698c948e6f1bc0676419dd3909929d4172cad6165392a9e91947323aea4edc5a7bbe0510c7044d760b846dde51d974e5deb2b3bae82b50aac6024961ec7a474fc5db9075187c86f50048e47e35cf676b1a64a272fc35202caa37095b84bee465b3b573ed6bc6d92f3c0ac7c0d7530ec4e74eef4ade3adf69554ce3e6d0bca7fd5c7879659940d2502865b3ea8ef8202b052acee04f9a7b24b27a162e9827d33d41b62ed55dc3c4baf68c6a58820e5695ab9207797701f082f1cb4b9840ebf5b641fc8925e8b1b12dc857640f4ec90a193c360d871c90bfddb7d85309971144898b9f3229ffd0d45355dfabd22c0c0032a00ca7e49cb8af79c8b8311224611856a4a2439113e6be08408e14c4285054798cc3bb2243f24e3835e82385ec0d52d57f01d9d63d9faf53102f28354431deaf80b8802fca18f267211d7ba5fd9c7d6a50b85e029a45885e87a8d983f0498e400f8835d3e43e0c4b78b54becc4cf80ccde0d7ef602075c97f32446a1ea89a6684e5eb24eccabe3af78c667cd73bcb6cf10ec24a5a093457a3225d7f187eb475dbe6212bd865d114d456ccf44e92e8639d9b51d968f1d6948de9d8389b7bcbc19a72d0e36c16e9efb868cf58d4c4b6e35e8f7c3132bbee08ace73af8d4240f6cc19ef4076a10bfb1ff005776baa0204fc5648d81f728ef868246d4ed3c28a75a4a174244c8fc82e6a0ba680ff2b7bbd368ee29b4252f0e9a706bf8a941940ed50dd6102d3dc56fdf941c068bcf71fbfad3db50b2db0011578a2de92ce84308b4b8d396995244fa0f120769add10e777d9c12f460b3b176eb587ac0eae939e7411f1a3d74c275a197c5574ad27afc7a62b27669e5e9b94e2c73bdfded2d4336621be113792bda0613df1d1d407baf18e4819ccfa189f416bfa71a44b429755ee2b61b7c24d90f74d402fce4de76f4e806bd90ad6a274989847ddeb86b5f978818bb3122987d1b238dfaccb2615a4da1b21d72a357a758d01f9e074fac608719d52ac73117f178208cc2ba9e1206c59430782b945e40e9174aff80644cbc52b66f09cb3f04dce2c36b52484cb96b162f3a172adcc5fbc2f6715558d20b8a6bf6da22de2bc3defcd96f2ea9fb2cd2260e917e44798451c0cc32282f0a4eff7fb4fb5fd0174a301a97e686b0a84c859e6081a13b1a43954ea0b6155ba6ccd56ef34ec623292541b46d34b1c860fb035f101637aef1bf0da67f8d69a8aa17ec7fbbb348ccc33d5d312966ecaff9dff5e46d1a8d70a96ef7c198fe74afa4f0a8f29d9f3542fc2245ff83dbdd7151dc6932b81ef403ac492250d3f9267fd7a7297a3ae626c154629d5fa2c5b3fe3387200b50d9801b8a489615eec684540f94a1dd67646f7f4fd93da3f61ae3bcf3d647eebba483949fb81753946efb64331337b0f922414f5c681f4e55e3ad7d03a53f22d9445821f3f05a90316fc6ce7386d8e77a309af35d5cc3dc526d828c8c8d2fee4873e95972c1f5d9fdcfab6122d4bb86d8b36395ff1b74402a61f1065426802557e5a52691ec3c0f095914f0ebe45c92770ace6614eab1538afa17ce2b8bc09034d0dd1f24f9da481204cf527c979258b8b6fe73c2dfd97c82a9032e5cedc6589859bd8dd4fb2debab3f47334c830cf90e844086b1434b17bbec2628c08d49f79e2c620709f844c7896ee47dbaab80fe912129bdba2cabe76a39a4f7000ff7134ea8705dbf7444207a11cea88ce52d84ee7f000239eec99f15bbbaeb9d962c78bbc231897c4ea41f002429f09a900b192a0abb49471d2970ef6b7b509977df387090f74d7cc13daaa02d015dc2a46fbc56e184a2bf61aa1f678506385ca76fd6fe351e1cded3bb86167b38a81f33611376aa41ed57dca1d150605722498bac7582b2b5eeb0275be9ff8d95cfa8a31bfbf449e5c6c654dc93ea69714e98822c69269f2fbedfe2cf8692d9f45a6252e5f4e95459026e14a11d2f0d66771c0e3772e4343beb7892eb607b3682df4e204509779c6b40122ebee68ecbac410289d79d423b253fce0a466db873aedfdcff00199932b6663b35c5933acaa8b10c6bd70cf674e1effff6659a9ace90da7f72bb2ba088a4b1d7d48f5c91fc5184412fdaffbc6913dd12c840b1ceff974868faeab9f6e96739f1a0533889a4d9b23a6107c409b7359a4103ac229ceae528c61fa8b8004772728c7852f0261f6a7eaa32889e2e4d38f4faac1e7c6a6aad65d42a8ef9ff6107192eccee740d0b0be1cd52c8f98aed623d9d16d854e0a2098ba961d3956ce2b3e6664ec02ef11de5e400eb360dd117fbbc5ff97149d1125193a7e35fd625cc703bd27a785eea859f500b3a8e26faf515a54cd21b395d2d1b4a9d4f38538d6141bf2c1c82ada5c331c01ba6e444a66f9526c847f4c9e57e6690fe87fe1431aedc60e4c1c75cb1dc72f05dea45cd5ace0574d563e5764cdb5ca72e3b7fdd0205a7dd3f4f1e74ec9e203b6071d985325fd8b204e4ddafa381156cf9093cd4d80c3e4098b7f49be7fb44974f24a06637328d8a8eb7cbf8eb8f79b69f27197999b53f9b5b521a47b65bd6711839e3d55ee3bc1a6f71796ca1bf0ca8970155583d5323c527837fc564d66e0a1a315b46afbdf69aed30e287ae6520d4bd6d40b0e346fb1b11d132c4d118fdd42a5ca2cc9437f76484cd15372a0ea6a53b0e93731a18b813d8c05e25fc7d2d5e674583a4fd4ebb655c44d5a1f34152b231c11d3d2f16cf948b2c17245ee321622b34be054cacbce119afb4e768694cf1ab16f4126dfaba9dfc4199bca9bbffdcb2225cb850a663cf77571a83d3a2a94d6f5d37f628b5cfba9fc12f7983f0c10fee4a3b4b35f5deced1e3ef4d39f0510b2e06c70803d8d0d5e62984d889a4dfcec1ea77135b6788ac7637444691cf41373d0495df977f65cef4f5f3cc87b603fb36c4dece4971e2621c640e147bdb5cc44e36ecac5343400ab51a4b8f22736d301a34c298c4195549b8548b1a30aeb6e3195004caf49b565b8a1f4483f58d27485e66df5d80f625270a6799858d761db271eca5cf7e74ff25a78b34cb16d95833a238c8d12c46bb9f5b6a1e64794db40fc4bb7075a623d931aef441005fbe5bc23a1f58256c035747f3c98aa149d235bfc4f9c6945f23475852517001ce92b8c5b300b215a2fb1c060d756e3efe7e6d901f9376ba689b4da6cf1d65d6f36adbd63b763c881fdf1959691cb2029a70e700afa5de8e55c4475533279e98bbf6a8e8b45521280092a217f818e7ef3cd1208e7ac2107f263cb2736225191a25d867e93b6b5d6a48e44cd67de8c691cab9ed15d01fa3b6ce93b1bdf0aead8f7eb3e66eb1b772cb8fce4e3d1219a91b896b3d5c96b556eef81f7656a85f5fa38252354d46599c3f5a6128a50ef42da11c9624d17a7c073ee4d983a80ac894b257a447b760497f1352fa621e17fa7c708f035610a061166c77d27f831cb12bbcba3aa4c5bedbff50d75fbdcadc49c42d68bbe307d24bf5d1ecf03dd841477cbcd268fb9fe174bee252bb3777940f4b20a6f225d4f7a96fac907dd9e47f467e60a60515db212fa3730c81043742c898520a3260d00c9b3347bcbba03af57310d9058479961a7f44aec26722d4b1093d0cad3a4b7f9032cc1e8fac4b8e37e78c6b57c83d082c4fcea9de6aac26a0f5d697e74459c03ae62233bc54c907a6539542eba7757960baca9209a578c784ae75a847cfc3c73b350ed988222c0d106688a326cfb8e058b278544ff01bf6ffaf4f407013192bfeebe3c5e53c6a00e8532c9732669a943974c155a9011f59930e62abbe9021961f3e9323a6ccbb29af419e5d81c3a43675e72c964c8ec6c5e503e8ac30e6f46857a3e3543350584ddf5b56e7aa3dda994eb948f5d29215013f7a1f2db395e4e91cf44d7b889da3433fa5666fc9033ac39acd1ddf5b047b2544b517acd41e58511bea5e5adc64f5ae6c6a8cf99e00ac15b01ee67474dec9cae7baaf8b3c83f42e0d626c3f15fd555c46bac03a4c658fde0d98c9b5c4c33e885efdd8e954b6b57c12f68bc8af334086674f4192d55a9941b32f0ace67aa98410a5c0eacf27f40f6299a50eb1db645f083db20834beaa60abb4b07945b883eb52c67b5aadcc241481a89074f527bcecdbfe937de7543d930568eb4179ad9e4a07acf20396e67f41615cc0aa41f39134ca68af1c7d0673f59ef8b5b94d9d27a08d713ae6f8d7e14efb2a4c497b36aa7a16168f2f843d8727c80b384eb848bf5baf1abb94871400775272cc7c5a70e6cba2dca4a14b5ff9658005724d1aadb0275472989a03e88484920f10772bf5c89d367912f0ab7983b8fdd417cf72a8a8d5e2d5bc6dec5d440fafbea6ea226dad1d6ad5a423d0b02022abc13491dc239fa793749b83026f93dc34ed30fdeab67df23d4bf7db57f25310d031982ea84bcc7c96bdcd37af716a904179304c3ae4a16987c29de170ba4096cc8da9c1671b284dff40f343bccd3637b29130106cff9cd5af937cb07b6240493479831e590e41dd5684a9b3f1e62249751b4fcb1a22d8186499525b945eb54464c4adc28b891b1b6349080582ae63eff6f9bfba1fb5418734b61a4af9be00beae6858417785ef05f74da2e3940f1f7710672369f4ef36a4ff4a5244aa8828da6aeb419818efcd7041a89f68203234040b036adc5d9226bd5cdd19a2ab2e9a344c7ea538d03acde49828340477a85fe883180139099d8b4fb9061f13244bdac53a61047a6bc34b26eee4bb26fa1aa52aca04ce88b0ac13d6156adc5cd98a82692e08d43d1a06ff639225acc9de481622ac3f0686f0de4121aa4b2d0e69ffc50698efb6e8b65d662d1b0f6fd45aacb9a726453320a679621329dba2aa76e7e0915a3da22e9d094693698a27ce10f8ee6baf5593f26d66bd9184cefabf02dcbf7f64314dba7f9d8878b4e50e47c65575877dbfdb42c26a43bdabe98519d89684da118bd25742e40355b5c815c1a11e620a46d1b96f2aa6f2b0fe8362e2900580077f5834e1ee8e5ec103a53a93420c51d910cc114b0edeceb4defd1a565e4a7fb12b8a22e2fe012f96541889f9c13391297ff71c72d62292397ace61b7d0b1a98893fadf8aa84fca6566ecf1f838014fd66f864bb47b8e0fe6ca3642baf0d7b0ccf28b4f99486860180ecbd6cc2a7f5ea598c3fce7d0e758d51f83c6436a32e98877aacf7e4e826672f94ac77c4bcaf6c2b680d72ff8e2ffe208bd1b25839a304ee9324c7187ed174d6fc25a9fee3afb97879c70787084c55f974cd3438c063bfdc5386f8b2ea054e26ffc4d9c7bb5bff4195e9cc1c6511b923babc04e0a4797878b693dbbc942722afd15a56d507a72634a4269b69d0c80620429259481caf88970be54fef816fb5c405b24fcf101b86ecc60ab3754d3fe0259f77156d8d0c73d43d872edf94c998d21c6677a2d877cda445e6ea26b072348c91de5d84d645322d682c249620d0bdb1f3eaaac5f5d705f7b62db191cd849e8c243c4ad7963545d62a8c6bdb9e0bac2a25e0e915759b285d1a46a0157dbda4910aa73d03174049477068788ce935d2d28ac1a33a0c3d7a2157b7abc1d41ccd96ef85df06d3ec7861c870616df8023519cd52da8e0816dbcf77b7d6295da05335722e59eb845487c68d04c6de7103a57029ccaa1c0a56305c5a3e715447a191c0dfb7231804b8088b8dd474956932359b1e9cb7326c85c58ad1f98b16b03da7a709b188681e977ff47d4b69610feab2b5d15bbc7013983f80dfd16bc82069a271eaf79ba1674a6e3776ce2f61ad5fc1d48917ff1890b1d5ab7bb6d32ed2fb8175380281e9d71778c51b52fd99b45270b8e59d915ce2a893059ea3b1b59d97e5f0a8249bb30199ea8fabf98984bf6e835d6f14c443fb76bf2a014f5d96fae88688757833e48a5df6ed1b8d922cab993173080dd83c0b94c7533f93a503514fe6e8c7494e8c1633992160d5ac3db0f1aaef8ef62850b8d94a68525e6f7b197c71c26758bf8f988db19a2fc9236ef71e25780b4dde06b13a6b0be3590843b2cc4a074160c45476eae6295f4ebb026b83984d0a7208277ad769012ad357d7dd9afe2c5c2edb920986ccc0715b4b94dcf774b4fb8045dfe3b6868a458a653f6243def4972d83cce7e3c3803eee9bf80c582cb3da472107f9d834b3d05d0546211ad04ca4d5f316b9d4872464607adbea171e7f30ed595de7708c51b507c4508babe853305b19c6429457f70a64ebb7fd2f05059a60180d62572ac45c20111fd7411aad0f885f558fcb2cfb666bb0af5200b4d312e04b8a98039a3fcd958a925875a7655740329510ba07a9f26ff497ffe4386cade8c196c83cf4066b3eee178cca40d2b165d1785a3af2e7a911054b242576c7d0d8c2694dd24467aac4a6fde7a82aef07dd5f2e0a4d7b0af813cba0b4a23617492787cc73426032364f64d0517f3fe8e7b8d381a364c65448251b8ebbb8f03093a9108cc3bdd301ff9f771d49b52b300c36e83123e52347a15c821baa7aecae3bd3c697d9c4f84f8589f722265a77c466722d7dfadd16704e8a511c599d1d7412e49ed744ec8bb631265ce022956fa03b3b594b9d4a39ce35d28501589cd4a38cce41ebf9fc96aeb2d8c8902c05a6b5bd9d13cbfa4814d81bf0859692f343a6ab1253fbad5485395c1ee1649879d4edfbb5dfcf78110e5bcc077bef30680463691cc03119d4f6b195825ee03f391358c1aef076ec0780e5a2e16577f5aa83ceb731f2b11860fd7cbdfacfa3d3443cb02f5999bb69329a1f1e0b6b9f1305bf9185c080c501ef2bc7f3a85b017648f90030eb2a8a22216f977353b424bdc3836c480f9eae20117dfbabf1a260def46fb64d2c230412f4f564d2d71a6f398b405780a4546272c5d3f238cf814b32769e6b0745762cae8b746d412520f985711ab31ae0d8a1e461c27507f1471d323f896d4989ff3333ffcf43281869020fcb0bbbec13a694da2bd3a0cb47c73706000a1a59f41236241bd726e32d39b057b31048facb008d1c469c488a35a22362bd5fc11a67736c0c0810f709ee6e030666ecd3b06922924527891aa8ce72e4ec6cf437c88b0766d9b6e7183316863c70da36d81d65773cd515281098564c9a3f246b111e8a6a87446040fe46329f6980f18e668fde5f5a00a81ea7d16d146877630b4fa5b51306d3c0517504b072daa83917e7e49c3a052a2520fde7378d782ba0a9e647b5b829d8ce3ddba293505ae8c8be5285848cec266a1ffa1d37e22f84a9d2590f83d345006b87a7a288888a1b9e8d9403b6e9d98dc0182b7bb4c16d7bd7a7d48d746d84593749aa1f5b3730505db5cb11e78d637c6140eb8fa742f190e11ec47fe1e49d4fc531bd09c1ae3bb3b465d2a26de45531e0c442fe392b3826ba7fd1d952d6d17ff74304e3811b4fb415efe4e81f8e4b0e146ee9322a0bde28ea7bc0e733f715acb7b3b2f5ebd74ea18a50eb8055c421c2b1f38b8fa26f1dfef3a213143b552c5279839b50f696ebb833e853e2c65ec48735bfbad7ca5d6903c6d631964fc90e8febe83b6e3f29ed642d8d42c3f32af7ec6a003cc3f95e96d1239caac8b851233c04d9957aed88f6f1fcb0e7689c1279f761366eeac4740998acd563c0ba9288905fff7ab5c7ee38d1adfdd2b9b750fb0c74faff3af8880dbb92af845664309fafe723857404b013607138ffaa0d5a1e6a14ab66fbf2e4bec81eac97a74340c0f68eab0e00a239d46ae5ea8712d108c5fbfb0b82d9f4f4d8be93dc903bcdbb1547f0233f766ef0b52770c4c16cdb8719ebd5aa0fe33e4740f127c1e8d78ff7602b16feafa928649a903c00412f46eaa5c9c7a95605a19a0d65469f30f8c4c242d4c5d59fdac59bdcb666f592767dddd355ce943f1ac52cf979219b00364aa605b893e755735c14a18f0979f5828e540927481f52d97dd670cd929c08e93ff1475110f3ffb1344516a6c5de8847b903d46876067afa649acb9eb85927d3635442f904a10ada3907934f1253504ac8f7b461bfb295577b7de62c0a168d794664807deeb090d2002c95b2b3af2e89a7d0c9164dbdc5614394a96e961a23be5e3d74bbd7d6da70dd49416604c2ec36d286d6bea413e376081c69a9008a3ea23bf8c53007c3f23f3f64ca72181fdf09359db1d629fa5e759f3600b0c024c04b7ccee1f531aee021dbb8a3f071936437599efcbcbb6ea838f65c5ceb3031d7bf658f773e64108987e6f161e1f2e135a87397aa45cf818d12f00ee5ab86439657f6682b9be30cdce1c010cc34ba1a65c56e686921c43c25b7eac53511b4213ff3b6ca5e745b8db5159fab8881ecfc53f2ce6b48cd8c1bb072ef370106cf16f4c0f78a331902f1e499ef180519900244154090ec37a39ca9b04123d1a9457ceeb299d8d4b8252d934d479944bbf2afab60f449f2408c3f4802d0d1f16cadd4d912bb3da92e67396f9835128dc0ccd195e4c440389fbe0afd6a276c9037199f96966203042da5dd57aedb28a2151616a0612645fe35d3cdab0039e144f228e17b87b16db500bf7d2f24819d1bd448146ba01a0d7a288903b410d2d4e30457e73a09a4fd8863fad5188c5be74c1e1e54acafcca6461b548aa83b4bf8156b35e31dc24c6149154f04ae8c7ba6a89caf7c056896b81d41c08d15334254f86468e4c5bca1105460d352d1301ef87d60b630d45b9ab2b851bcd579466d8e9fff54fba7275213281b1acb9bb0b15dae96d885765148a36f7bcae6d94d964ca1e4dabfd9aa045cbec3465c763e5f2d4c349537db9fd48a84464866d565200b5d68308aa971b69059ad4fa40fd1a4c8ced27e8cc6941efc26f98836c86156fc6dae57ee339b48f49f1ff684244810b734f1e0a70e5c7cd898a7292f1d50dfb5e316ecea179f879fdb68be036c006d48a8163591f9b69f5d6e4907dbe73f7aac9d4e75b3f93efa6e4c6d8ab76ccc47eb53b600c356ad978e7ef302f91a6a87e13e424c159f3a4bebe3f2fc0f8a8d4b5f1e00db1d3c5732902e83fbcd51d5e756641bd1a016f6d7861ccfbc5a293e992c3de0f29ec38671b84d0b9d01553a7dd95e146dfbda54d6002eeeb490c12eb8da3ad54f86fc2d94b97258ed8937faa4bf8e0b6371ac0a18040422eeec58a21147665d6642364238d87a015832592e46d8167875da43cfa5b298e79f194579016b8bb4aa81441a5677e03020146c3be126a7d76e3a43638a595be53f23958e995192ccab729237077956f15ce81df73ea137646b9f16e5ca44c0c46dfc0f85c0c0cdf01e18ebf0b6f984122bb7dbdeed4c23fc710c5d3aaddc7a05c35d2434429e932b0896a4fff6ede85ba1af4f7c379e165f34a00c882befa4de3ae266694a26219dc6774ed1da84b5595fa13a196f7c95c0f2c11c9a9a2b79399b4cb2730a556c597bfc1e29302343f782e4558d919b31ce0dd12f172ba1b6627755e489ceca1ff97654d06417e1dda3826c5d7a274b11df6eef3cb2d8eae0dcca69f4a945013cd8aee0fb64285c238e0befae3cd7c4b8b2149858dabf19cb8b77a53940bad8855e3de0e61788f2eb3c3e73f204e75732919eee2ccf489b0b9d9e7c4fc550a0779f935e038fadccde254ceea755c43abea2fc8d2b35fdae757d3bbf0608d8dbff13f3d7266afadec4f00f2e4677a2929cd5ec25c096d1582eed51be65581c6971b5a0f733d7378d78b6d1450fd3503a2d9c7abc44ab5e946a0a1cbfdc1bfeea787845fb1a43746496b84dbe874bb6174b2236ec7af95cdadebabc701564f0a30935c8938afe0f6783cc7af7489601454d76224411538c2fd89e4bb2a3f356743e5732ee8ed46aaae420c31f251d8708847a108d877a8939398c6777d19f3fb0e0a296559385736ce53084b62bfc4dbbf33b50d119ec6df27456c1fd7bf23c3b64a98825640acb3c03065469ff76727e354653cf6840f1ac76df8f91dc10eaa32993326ae77173836774474bf7487d7d1ce688a2161ba70b0e651e4d287af1e1c277a7407df91e5e22bb361d1e4093e65169abc0e79272a9d05e36d2b63c1a5f3671bcf3e2b3669171211d1cb1105513d2acff893f9391b8650683699591df01d8f1e1f853372b7b9afe584dc20f21d4cc61a2a0af2ea521c4a9259d6979a8acf2282ab4588ac92ff4a88e7710e7bfa4902d355be5f532d557ca027ba72a9056da75fd2dc5fce000275f110c53927fa77255e8387c4d8985827ad0feb8cf4d2d17b7e10defaf308bfc9eced190d7d9a7a721c3d26189b124216a1751b16d7e7efa78e804e04a1eac0ac8415b3e302a137957ebbc30827c2ff1c789a947e4943c494a8d77dbc5deca6ef7ce4ae61547256719a569f17bbfe5d37aebe4289ac6ad2ddeb6061e9be2339937414b4dd42cb3f0d2c045008537621b4ef0713ddafe418b2477922fe044b7c766c4957ab36ab09e1dba06be966db76aebbfa2de485244c79d99949b197e832ca3d7afd9243333c3f87f3060de0a8d319aebfff4064a74b4908258f1819e207bbf98e8ddcfc030b3c8136979bbf45e33637a931cf5838e8c1cea59f79ae81c8e6fcb27757d5670169f64e5151809c8e373bfffc3d488f480d2644ed3aaed482633bdb4650900bd0fc449e8fba393b9847da200c5d1ee333e64a39fabf2db5517c6d7b7114121626e954e70a7f49c3d8442d06e929685991cd9ec95c3b0dbc4133d07adb85b07d86a486ea7ad0ba20c42ed066030c2bafc68e03169ff804988640c8a1f5315baa9271809a768d8e07a8657ae61bf0733bfec157ad1598bdc499dd14ae4cbf48679a7bb2ca6244b9177a0832a3ec2415bfe9f91953b6ada1301dea37d2f04084428fe998541e52455aa72e4557a26c90d2891492ce2049558c829320314bc603e3b33543880f0a6b4d1d35d8f46440fb90caba03d592eb37eb64fe1c1a600e8cab37acfd005dbda25fcf9fe6374061f585ad3c028d8560d40f014daeb1b953556415cdaa63068fa88928fd4fbddb2fd0480ca36361f455975a0a4c7fd2805f1d43684aa67f30c38150915b7fbfa005f9478ef1a251afb167d8dba12aa0ac1dfdfe5592b6da31790d0354868925652efcd4e79fc7d6a433448369fc621e87f05e3affc29486262c537a5d4f8ba5c6578e5646d778959bf15ae8db637de7c93665e2c75d7e4df0e910c059061963ee0162c572102613cf09884d44088d3a450dbd34fa5047081dce06d39f5265e9cb1f97cab19c46f00c4293764b628e12ce31706c0de7c6c5b7b6fd813b85110056321c4247efce68aa5df8efd820b4a78471ff2f54b126b9cee6ae26a6e73bad49681c74516205fdcad676465326f2512e45f85e9027679a42a050839bead6cc379400a62c7237b0281631651a4efa5ef98dfd3c85244ca635244d7193b710beef9c9504664a00027c88dcd82c9bada5d2f042fa2cfd2151abc15598daa1352490160d549118654f6098b709bc865842befea07c867becd3f892d269e79c28a53266d3985112431c8538519df058b84dd98dd16aed1088b714bada8cd1a88aa8e0718fde73a2a64e13d97e41945060246d2e47d8da39577154784be377a017a99ec4d31f5be077da301f3c69c55b03eb571f82fd25e37ed426c62742b050ee4cf56cfeb128df5d06207806abe55caee4867cac6c70dc99e44db1253434e432fe7d9b4f0815fa472be7b5bdfc7c2a24b5b13326f6516dc9a481a5382a2811247c2b9c1377bef67db0ee16f9a30ba88096dbd64ff8f54de2960f45d4a1dd119445c49fcf1f23ddc95ea98553e4678810bdab9b0a0b723220c36d1b28da138ac6894a998bcf02607093a81ba1cd6c40513cc426bec32e1fe3ee53d20b6f9b3728d548b4b115e18b328c0209b370821d38111fe05835047337e5ee67fec8b10473ea3f9fb3f0e0774d04efd0e0d36bc9444960a60853dd843d55e09cf827f5b80b117db3f31aa125ab8daaf398e22f045bd6a952b8ead15e886065c806d427408026b57837b4dedb282af613e20d86fa5ebc3baa8aa250c53d9e9ecce3cb55f2172540d359537a687b573769d41ec4ae3e0fa4280daaff70fd8884e51b06ed1bce6c804fe641c5b0fb9ac72fbaead9a723e8b6a43d3ae07e4be2e585821a2d07a7d8f9618c96bc3175ab0ac1e2729a30cbbc7479590501427a06f0112c36b553602fcfbf53d426ad12bea489eefd0ff8948c55e116de4e91e13f46cbf4326088c10b287ebdae1fab27d6a322bb2604f6795f12ad9e2d1cde464db7af8cfed893497e9f199c040eef21e4c8c57bcb6ca4e1e45ecd3318a9af6335d51b73fc9f09f17a1a1f57930085b28af18f6c2e0a85e8d84b4d4cde85d7dace82463604257c1c5dc3f59d12e36c14b3792019ba1e4e4c230000678219fc4708fadd3c8632b8d4abdd585e555b92f5e20846c01809255b81eb6f805a50f6da1dd3b4066b1ea497cffb09ee7e7efcfec1694dba04bedf476c6e09a26c4faea09e7a790082ff28249e4c843bd4d78813a47c62976acc80aab98f7ecb020eeb58cbd009bbd1b7b33a8d215b000c4a1cadf8bd6c1d90679b37827a7f42831391108e76518bfe7695eff6a781e99f876188fd65a30a65366447432e9c67ed09a332374e8f5d4c393a87bfc34a1fff870e06724bebbb5f149c9381b4f2a244151b9a8e278e290191e1356f78bb3c4153ee2154afcb8a346baf7f5163ead61d79754974ab740bb8b4c99a4e242a12ecd19934c444e891aec159ca748d70d3e4a975a294a7ebab0ed0d9b2878c4a96f09593b16e279a1f73e399f42fcb60678f1b22f5e25c5bbd611b24c946cce61efa52a806b1d312729c141b36d72775a4c95390b0b59edfaea20300c7897b19ce36f13afcfbdf79cfedeb5e83ad1c22414b6651d00c99c44daac8ed86357e46c7b832d53b33faa78e44e4572c8cf08f592a24d9821d0b7ca320a33ed3defbc73bfebe70d1c9588d47e5e8919c11e74b8541b9b5ec82ffc888cf1018112914e00bb29b114171332c1f4d0487a22068ae579749974b1134fa8fd5484ddd1f4d3ce7c55277d02ce1c99c6250176c7b9bca28c45ce0da0ec4a6c87f31a903097add5d13851acfc799c44b2381d17ee019f11fb7ddaacb1d6d07f5eb91bced0c0d0ae2eb74336779b6bed8ae7bb94ed81344524d986db83bc0c79895ff02d1d86787cd5335129f2efbb61bdaa3f79cc51b8140d47c2d336e7ce32137d8a92141f0644535accf520066330be422a3ff3f1e51aebe5148c8ce48cfa39c2fdae45b6553501510c7211841f2fb6740961f299f7c97ac9a5c035696728d51a3081b19db953dae969282082d49e6ac70314043ca977e9d911caed258bcf613047481e94cdf5b99c035dd4eb0080fd012f7581af19e303dabbcf437f47db512abb371637d07c60391c09d3bdbacabbdc5ab415fa269d41a268e46af0577e4af6ab854cad6ffa8a2cbfd0f8c2f5ac2e2dc1307125c70a676314625251da8f47f9fe4a9f5ef8ca9e84fe394b7746d30a66ab4d376544aab7751f33184ff3074768b489b8732240b6713ea97b02ec24d2352f71258b8b801d21d368b5150faf389a617b76afd5564a0d97f027335bb510ae40a4282c0fc44d1f6af39c4284c7f6d9707cdc06462e6ed3e9c6d0095b4aff8bf05d618903abe95efd3e7836005c843d4d2438181207b8f9ea4ddbccb9da199d663c369c9704737ebf7e71b09892970597bd590dc9a8e67cd1cafc9b80c82692eb2669a57a1c13ef9602c962dbe8f4462746fb77ad7d47d49b8ed24ab243c3a136e31189212f512d52a1436904560fa47bde8c6d3cb113134736773e2269c11b7a946712bb677041042252e41ce4e2ff417ebc160014b0240eda519ae2f1045c6cc9cca3bb0fa3d332095b2bdabfaad1aa81e2f62fc3b5bc9853ea3b77407c250195bb38fcde445eedeabd62b05ac1e06effbd345a4aa6c68ce0bbd77b733ab5513e6310408d76b1cd8da0b1c984fd330694001cc782310fdab16e4e70100eff5bcf4145fc543ea61c79fbe8ebc84a2daf2b67e9d711cfb0f012e9b5a7c10cee7b2e233e8a57994bc2e97dcfcac27266b13cd84c58f0347bfa71f7821066858f0d1b22c65e75b56140a6c55533170473fbfaf4dd05b3ae875c60b9d3593a990bd755e8b6971eda5e9d8a655d73191400e1621e530739e0b1eea78dd8c0edb81e12b48347b44e856e4c23c74711183f912e657cb73b1854098051cd935f4e453921ad5ef99d6a92502d28edb16e304813497c3bd868418c9f7cdc9ddf39a8a9b726cc32f1a2d918f7550fc199934d053a035653f8f292d56e5224f6b8a76ec0f14873ebb2e9f8bdc0e7e6fef0454ced94ce9042ff7cc3950436b83290bb6fc62d9a56aec5376b9f770c91f8e04949294c621fb65d334bfe397b3a3ef564dfd92907b7421ac3183a65720485cd52eb47db30ee56b2917f154fbac1a907f38d6edec2a670cdedc3508d4c3fd5e549b1a68ed89879971e34088307078d1a205f8b4a9a9471e2c0236e94f4c3bdf1ee5dcbd5ecbcd7d257d1b78a7bded9775d5d27227dcdfb1831ffc551cedd5125135b6ac6bc6ade5fae3f413a29c220e5a57d245894224ef79cdc6284b7e1b7260c0dbac1d938587ecb799052e72574bc2238919678f340f973381685cc7acbb81c78cb5902ebeeff6d79cb321f809956dfee0236aa888a961f188037b0f32ca2a196bed072747d4ba27959a180cff0f33bda502545ef60942769258bf3a11f5a7a129e7f0f720b156f3c7d050fd2936a2bf8e75da0ceec1e86d898b0a2a3b77eb68875f3c23e42b65b4335daa4562eab26ccc9226cae8b1262ae2d41bf2e9a92592cd2af3a1fad85f93334f679dc150ab936dd45fed8a912ad6559e7f45f815f4bf6fc73d90c6caa18ffd88c57777d389968d0a6d74a1715254cabb48d4fe7fded098b1652d66724a58c5e32ffe5961569f088ba60addd0f3e481d852969aaae479c3a7f3c91bcb5c08fafddad47213ee8190ec2fc0bea287a9fc74ba412968159a6c05993b91a6050592a86ec92fb04117f69e3c3b21ee3e6277702255208671a2bf83233057a85544334ffa49c6e9c27ea5a14ede0c5dd4a94f54dce2f3280261bc4f915a8152aaf710e413fc5e1a578af090466ef98f0fd4c65734dbac5e45c072fbd019f3a7447d87dcff48e9c6eead5ba4c5ee66f385ff69bd7df3aea147c700f57bcaaa68d822423c2243fbd116e360f2b8bf148d2f98c248e742591161c876ecd31734bc6fa1477672cd5092c5a594e3ced4e4b1ff5d74c0106ae4003807d4f4502d7ada98978d0cd578595aef85a493ac7e86fba5289cd1080fa33228181052ebd3f6ac134a37fbdb866c1c2e4909355f93c7203c0c54b0e5571d77697885d99428dcca14cf304b875bef91a666e900385311afa29b056021581b4caf46e0005fe6b0e1ab1a9405ccf3bbec0a8813e6a22cb3f8b3909956993c9795bf065dac5d31b2f5ecfd82f1ab8b5f2b1d56af4c261bcc07ab104927cacdf470401ad7c294a67257811369d0210d23ff933b7e9370a29da4cb0640c0bb4322d84e70ff609dfc24f27e55bda4e8bef95a5eb6b13ac19bc0522779994028abccbbb73fec0e16d54a38befe826dc65bc73e01f0ea4b9d283950aac9873b45f4f2d3a60363ac6082ec3f64625b7033e226d346a574f90bab3fe12a5e78a23513bb5cef4b69825c1489565b9b4da877042f662f07f1d754d773aa37d8583df43b4175bbc32d47a792c870ce6365908208b906eb943b82afe791781dda41cd5d4330eb7498fe895956bd7495a324aa363006486f4419d542234034ea334a07508ff36930fbe857455733c21a9c82c67e3dba00f33d79a2308edb2cfae5849b0391c1182da48865ac2d439b6e695e97bf7d8708b2346877a1e654b601fdd09bc2893cc1fcf6c50705ab2cbe182d7ee7016e130451e79313e5f6667bbdbd373929da15652b9b036b0aa800ddd7d40e0d79c87c12fa51cc9e09d243cf1887a2f1b2be1878516a4451a9ca8757f8471ae0d8ac0bc968e0ae02a32ab7123cd05982e04139511da77bcae43dd9607b3cb0136286a5d4cf36c18d86a1dd5da0bc831aaf8e776222dc8d41e382a9eec853fef3305223e73c0eaa1c0080ea01551c6291a3327860e884fc33a9eb12f338317b30159b9da9572d6f0d8b7ab40bc20acc32de89964dc7c1f0e9fb8d85d9ca2816a42808470f1da556ab90323d7e8f72984912a5f96ff154212fb799df29986bc355ba8cb118c59cd242254103b63d9810fd520744194292f5c8794b5871718bdea88359018b258960e176040d90ea6cba2c6b803e23b2dfc8d35beeb93db08bb76f55b0a7980c52fcf58fcf132aa605eb820beecf3c2c770dd9b8b7bf20fca13ab9f0f16e7a414295ec3ea44e2446bab7ca58d3d4f9bb83e37db3e83f33554aff67c4d48488814b1f27b193ade59b22c86284eec42dc3e2ca5be6e129d100a0c1403d601fefe0172ca847fbc71e72aee87a812a92ce46ff2f0d38398d27dfe7f8387ecf58db2f9bff34b41755912a090ef73a79ab4074bb24f008a05add42f2111fdf5d55a57e2603ac14652cf13beac8258f4a2793599ec8f3a3c64e2bdaa114c563944556bf7532ccc794ca1d2a5c63995a0db44b805afbe22bd213e3853318f0b955265557c1ff260681e449f0aa9f97f4395c97dc8bb8d574e8ca1efdf6492bc4fe03520d045b6c228fa14520bfd0acaa15b3edca12bb74b5d49e75346534d73ab6f9eae6d98e8de1481521a020a61b7d7758ad84f0dd6c874eef45615d342215bc207237579e0f80f665717880a183fc46780f07a667fc6ab9a6919aa3ac5e885d86bba874c7ca34461f11015104da5f3045bfe9e816b2d771f046d3798a43bd0bc98848e3f98707800d34e697ff7feb3bf02ad2630364a66a8df32c28f07c98626967722eec7a746865be27b6511ffe1656eb7550c599c379fbb7dd975b1f4ca5d9d1db5b5a5d4dfb27095906b11e6507ec6693b4f84c32f136cca5a320143190657cc6e80c6af1a97afa78e3ad1eaa6f16fa259be6b9dbbb506612a4b85d2ca3158fcd48791ec5ad4ec76bc503d09f6e6b503f9881064c7f01b1a0ae89af4d8f127543563d69b87e970cbf6576d5c1e168ff7f3d7b844eb734441d2f06595ad0962a7253dff23c9b9253d89a6c025391db388d4bcf01bfe93e2b56e7075a95a92d7ed535bff5adff120de81fb4864b306d1eed9151eb11047a0c1ee29a4c4ba5da8bd904bf5734b6f3a012310c298c55db9c6f9f6ef407cb4bc8f8a865c5198de359ef2b638cf2afe248649f496f454d4d9b41931cf2237d5217518643daa7d158ff58fea66d9c197f9f0275ad1d3116739f37b2642002389d331ef23c0456c46a417054fff89b7ac12595984a1f504abd3e4c3341f5c2cc515d98403853b87d1eee6bbaad79ddd69f8b720d6b6dd27e974b508d1c7c50710115236e35e230ba88f83641f5d38253b3714c2df8212c58f81f935661d7fed53b154903871af518357ee3242c22293c9d2a54b6426705d1226e7b8cc577d803c11071cc09dd57f8c27a919ff82c76d9918e5a856398e28a656ca87048f04d9186af5ad51fe6a99faf464b03282adbf1ed8b2ee485a4b31a23f1a4fff71d328a0142aa3ea98c4980569f2d5125eaf9ceef766bdd94d36123e8e01b234c963cefbb0d72915b0132a8295a46fffa4981d51f3d7776b739ada079c7b2999b74fff19ee6c660ff58fb7113da480f35c68cde182b2a4313e9ccbfbe60927ab6e14f958c693e4c7da2363c3ec290779fe12d96161956037e4cc2d8e0a25e1cf2093e5959da14a0ffea333a01f4e71c26bcc47759f806afed7d92f14a4e1e8fb2f81af779fd10b3e2be1aabcc23d85df6ecf78d42e6eaf6b39e83dcaa51361e37a539f1047af1513aec8eaa74eae849a9e261ed106e06274e60d3c7eccf2e2304ec47f1a62bc6e3672a7dbc56d9497d84f313b7716c6dc9dc2d8ee6d778522f780d530813b87ec103fd4f2af2aa916b7a1a7c0aad34bd848d1715bfda43a6a4bfee8165a2ec1c223bb5b559dd3ec9714ff154e808d91a27c268a89fb36fbaa5d2d3f4bebbcc753b7be14820b631868162da594d9df1ef45c348e2639dde0493578cc556d743926f7c40bb1b4544543566e6861fdde70752279f8df6528e350ce7d0d95244552313ae374771713adec41a74ce730f0128d54d24b1d589e526fbec4f5bab92eed055b46d42c242f1cfefd28f1ce002182991f2c7342ff085521509194148d4872704d23f806bf60262589606df20f1eed2e657226e2b0b8751273c153fac6b0e4602f4008e6fa188ef276471e02e31c699bd9f1e98d358c1d2da9e5644ca26fbd517395702bbf80d1b929f5a3c4c01192a77564e07673359ed0e9468274ad6f91e365380dfde9b5d90d18863373e5a4c11d4705cb35fdae61257442878425fe7d1a087df51de7d923a80ec60ba11ef4d8ba7c7c199ab473b2e741901e89788aae86346ec6df03161754be45ff55fa0a724a6f4db54894055bd20207fc8d7facd018863f07962e122c001b3c61e41eaae6a6457530b7fb516179adb7b87c9280117dbd7a81226311b4257a282efb1612454fd78a470c49b34c3262df79d3e9203c2abfe3b1b3a7d48fdeb3575c547e90e5d6c4812b5a3515cc36a6ccec3c8d6dea1c5c322421ebb82abb2de96e259beda1bdabe34cd8ed1ed383fcc8ab40459532a76f922b81811112300cc0632eb78f91b68b71f08d579583b14fd00950b4052878a464f6175754672e9b4adbcba9f15aa1bb0eac9b67a504a326dfa2e7c357e4b54d3bacfac289a2223cc177059a34325be46260ae3da7a5ac962590b410f2365f09317a45eb66e948422ae1ad46d2324fbb85afba80f4618f62d8c497689bf1eb1c4e3b0987d372682c7e1d356281f2d86286173e45aaac2ae028460286dc7e88519455da7e030ec683cc19d63de6c623ede4b3bb2f45a6a493c882a768c62345b681ba5ab631e73b4da251f02a9b5f37220ab00e22b663f83a327cad4f679ccff63bcd4671a02feeb37825e9ab0618392ae522e8c1c0319a8e20f0db9e2ba0c435423fc41cddbf8afe822b12d054e4166a6d54bb63aef2e6d20e6825bc16f460f5765c5b60f99de23a9b070d7fb16aef88bf171a20748883c50a1842def84abc4d6c681739edf4422799b7053de6aede1f6c2ba6a5672924fdb319b3ed1fe36850fec757e7101d15377605cbdb8c0d38baa7fd997ac116efa2f33e48c818046359a4032892e648b70517245b1645c7a02655279658a6e1066b22dc01ffaa2d4f303a5918e6b0270a30fc9e20db8835d1068bfbe8534ce1b4f6dad558f943ee5aa3947dd2a634c963acbb5ca6ed3b4026ae57857e8ba5d812d893411362c299df828a91da837ab5167e16247735fdcb74f1d387609d66e7a21f7fa62fdc62b058d212300b4be3a15fd1e36b9d5c5c0d57a29b79fb8e14caddaa8dffb4e4196e2ce5ab87c4caf2f77e0f1755aa0a9f6acdf585774e2adce423074dc9073d50b6e61e190db1cece793fc59399b246d9f6ddf90ddc3c261f8343b5dfb29b1b8dd5376ebae2f799fd10cc882be2919bfae86ff76fa1ccdd8cef0c0c1c68eb074c2b83cf2d28ded82d7e21bcbcd1cc4e2852ddc36adcec38809411150b4b8f60ab17b178e0bc7f96b21e0b9bdd2471e824885f6b86cb6f6ae7e1b8ecbe2ea2cd5e3768a695cd87bc1aad8b328f04941658d6e59d42acf807bbe1d9d98b46b280ae32aaa6d54420ff58a1a8cbbdc83d2692454b058717d47144d3b63080ec0304337b07e587d5d6e0fceab81486a90c93fded5938bf498d9066deeb3957d0e4b05945d004a07589e0ddfd676b4c2f883dc65c58c08eb3c0a1ef54eb4251c65823132a5263e2af03d92347ccd9137d81ee722104294af1a213537c1357096bbb82637f4cd853ab84190fa2bfb2cae3ad09ac6a1f8e97eccc602e14f7e5509ba81eecb4228d6701d4a33ce0743642728ed6a0aa6cfa57cf060a18296ab08b5121a271b2de13e65bba53562db0be7528fa69752dc264bcd0f5dbaa65638e5881312f1bfd2eef5774c6fdb28ba424be5ce9fa5d7123f4d7c906cb4cd5191eec2bf6b3e66a848c5f9fbe2be1295ec172f1063c86a71a51666411155ccb3e7882b4dfb126f4cd25dd24de58944c7429d2c823cf29c9a7b29acbdc1d2af554ff0d06faea4263704a8c386839aa7b0bf6edce5b217555f22a2a753c64d9ca6a835029a60893db25168b041d6516906e63a3746963d22a8924f5b862e9f3270e0c9379f3b2b5889cdc80dbb73025e3d6ce621ab5f823f7d94a2d535e42c69b6da4768d95e3b636610ba4cf854aa42a9a4179ae26bc15e54bcae10a5647c807180c6cec9ddfc3797037c1e215392362a2f440633f39b0b86cfde1ad50d8e18da679b137985b8ad1107527debd50d4f62f2bc837fc72dc78361962bd4f0a10c79928f24bcb7d8022645b4fb9ed797c387e750433d88774d68c812e253a23c6a094c3ad01e398321d8f615c3662e49acbbb2120a75f49fa36c6dd823b378b01a8824923795c2d089bb6af46773af0a5f4caf426c8d19e582f411dc220598dfdbc6de9df214367ce7b3df51344b7d302c1dca66ca3ddb45d744c45a9730d5398f213c7b32ae34d37dcbd65e80b4139510bb90368dc3f92254a9dee265bfd88eb7cacd31e0b30b08af424871729540df74ad30f4bef7579c5be61f0a992ba7370c917ee53d415fc361f1d18611186946f8e3e937692a460c89583458e37649442749315bb1834da7023085274dfa24d92ce030d8a61cc7aca3d17e81b1e537d2e789a4dd935bdce7dadc4e613531028535805ae3d51cc8542cc82c6d87aa2131bc48608e980b0ab5781f22f2a687251e5e62aed2d718df7ad585526e72ec7db47ff27c28c41c967788a0532f45b9e2196f68640516493d7ac4f6ec755941c11c074ac73617909efd3881e37b0772d3db0ad5d941b3cf4c825328feee71fe2ff337dc380b0bc73436382206ea1ff41635960ab94411bbe621039e29b0c27b2a1ace606a8f63a8d539f9dea54806aa9a3994bc7a2d3e8cf808564cf18e332aab047c9503c28b691445ed63bf7990c9ac7562a8138bbb1ad56c1ee199e42ba60e3697a8f6ba20134b47752acde8ec3e03b521d75ca61d8208ba5454516f85a744ae38209525d06323585d90a0be016d278309c7c4d42500009fb3f13f76ea3a5660ea9dd8df0164225cb5b6a9db94ec89e264740328ca0d389b70c9cb45dedbe9ca29380bca6b8d6ae11b1e062b4f6a5831f4f4c54f29f2a22695348f5d457be02be8a30ae0b932b3b78ae6249434d474ea3fa2624de33cbd555dddbca4107d77e5ee2985ccd67d58549a1a9eef750614eed5c57dbbf983fe9e6bb847de26fc9f981cf484a2129994ffecd57d3c34213fff0d7c96025c7b247907fa46c86395180751f1014dbcd12dad89a093dce5e54faf9b783dc9107a4440e1379ee94fd28bd29cd1aaff09d9facbe9932596c99d9fff768bd2d81df717b7966c98ff5818b03efbcdcc100af20fad5a7a5516583446dfffb97d4e64fe536e14c39363e930fdff9c609f58380ae557cde1193870fba6a80a8f2396709ae528483f0914a6e7ccb3a341f22a9288529a613722798764b42476b2836be10c6fb43622f8108117aaaff2c6a5d7350fcc49496df4d581a5c9e476b640e58844757da2f6cde77fbeaa9c61f9c182f94ed6375f503a7c6d882532f27b2d56173e0f8b053da1d38e73e6632e1724fc1db955a20c2eec13861a3af6174806d01b29034eac148fb2a2401fbe6e92648d338fa8e9852fde195fa53120d086d699f820505e6cd90e54b1fc1b58db3a2d8ad2fdf035f5a5f001afe9f7910e9e8c834d8effab46b204b0fd043616ea795eeb5ecea0941bac2c5ed38779e03388b11d6b9e8f1ac1c2d2669103cc3c5e8c5b80d97a8be486d7c2d1093add77ca1ba1c58079c7f7301aae572c56ad59e1c51915592dea3c40f4cccaf0580aefccca8426fddce3a991bba9d539f3de4a7330405c343c66b697f39d12c2c0098c472f83cc7991702838b31a804fdb29b67e66764b21dc8e1a3af2490c4d39c042c6fad18ba10e38c36db7455fa46054cbee62d31a02bab909836ac930336da61f7bb280de466c4c15bb31fe05248acbd70819d7ed92520fef264852073b235865369b668d9a3e71e5fa98fe0b04cd47278912c9ad4b086daa95b6e786a86028ff901ec6250969b513ae8df30eda1ef60e69573e40532099f2ac192d86384fbd1d5db49c139286f22c9a8aa331b1ecf8069b12d1feef17d455b1e15c030dcc409dff96082d2c65029d314c505c401b3fa7b38275fb191ff9a56c848389b70b769c5144a80f5c2c8e82787118aa16f14fddd6066a45704a089ae2eaeb3aad7fb76c8783312c9cc04bc162f320f8c723ae250e134bd01832aae4273e9760bbf5ed753c226cf28cf365d757a0b6bb9d337a8778a669016e100e56ce452f0c09000968774a11026dd8aa5e8cd368ae2f65f06772fae41c49b1a8e152199373c8dc050fc832419e598e7f4f85969d4ddb99c9af16ff08e5accc29ebfc826d6d2897c7f7a8ec590cc496334031c30fee04d8baf6b592fc22adfbd222018f724d7eefea49696b6d724f49ffd547dca44bfdc43da8f8ffc82ca3607d4884977a8b6e18c00e465aeec66c68b6cb6f29e45f0cf4e54f158e67b752be417836161f4defdf486da7c9a9e2a47e0975bb99a52493ec7cdaa4dd307e2d64f76a22558345fdab7e85be2288bff3f7be954b10012add5aaab9489bf612cf540e1839a3fc27e71c1204bf7a3f31c061dccba504f55346ff187ce8902951a3a19fe0266024afeb0b369a7fb77095763a20a0b19044b75311d1b51baf1414461431304e819d3b45313d1f25939331194accc2c3ae3ad2cf3d0cde29dea464b13bd6e74284bd31d8431d4f6c2aa3dde979aa0a887db7d23f568cd02ba53547fcfbe1c37b43d62e7567769c31783ee0daa9b3bd7612daf77d6dadce657f8d08738353d7cf91ffb12ba7e5f21da49a65d80c4a5e5fc0f34c9ea098df26a97f3726cd8f25d040896004ac9b56d0895589640370c5382b423ba3e015537470e65d0374d3df5fdd93da88cd5667c4cc33aa83b6e3579bc9a84b908cbf7a22c4373fac6ded5a3667770acba7c9f1a0b1f835bbb3c098502851cfe9df9bce441b5e3f15814a4353a5a1a0df723b391e2c1788b6bd7cd0d59f50d788642dc253b218729d2f3c0861938a60bee5769bcae93d6be4f2ba2da8681ff4405f8488745534e0a3f037fbed49786cb3ddc41da2355605a3ca462995999b19d97b024490b48d8970f9a4af6f924a25174974581cd54b121681ed05ab5e08318a47f59bd2fe7178bb73414c9d643b0edac741222c3f326a7e9dad15afb2399420c576554aefaea4d30d27151b86b6a1923cc43f6e6a0f6bcfa2ae1f3b0a0fd1af2bca27d0f83435fef227b59f0b342c68a648b78b917dc0b55a7fc08b83968dfc1e4b07408269ece15c91feec712356663cb2b578bee75e1f50b80d557d4c15850ace4efb2085b73a3174d9ea17b86771b1a4004f13cd8799577a16765c6c4d7a65f374a8560438e1be4c6a57ba3c9a759480983be09980c9ee3481d586237d7f18f864312389309c9c6a85c8fab2c4aae16497803c767cf06307431bfed3a78cf2122117212b8515cd79f662dafba2939887e793bfe1f1c8c78e5594dfe3f790830cfecb2a9e3de95990722f96b9fc22bd31013b042d5029f5e1b984fb9aa353284051be9b49386c58483cc794fe1c4e8ec9f2722ae57c14ef192107fe1faab80f9878a21998d3da1c5df4d771be71e717bf0a0988e710cf99e74128547e4fe0306bf87b17a89d4862e9707681303c38b138bcd892344b11c45a1002e5a45c5276578e434c801e720bfbd7d7b693cc524639dc0663dc5fa28257cfa1c2071b4127eb7410d2137904130004a9480a50c043d747788c26b29dc222d054d21430c1aff73781ce210a99748f601a84ef44f64213efb2e41cee1f28b83837a0960ed6d171df1e1225d6d87ba92923a98397255d62be63183c936808747bdea48e223fe30105dfd2b59518db55f045510d6c6b091498d2f9b2eee145fbd2758bce49ab1414232a0cca8208b6bbdce26cacaef2bb31fac656e3f68c982e71ef5b8f0a8869f789e1fd9d59f0ce461ee68dfb33abfbcb8335e27288372886c8622420155122d542fcc32a91d640aa69f1fcf5a1c89c5244cca91cf68973d92898bfab632204b1ac24df8fa315d9dac3e33087043178b6c200ef0be317a8f862f81580bc97261cbb41ae72860977687c929fabd06993739a6a5c083a7ff0a18ae6e63998bbab59e8fd0e5ea2be3dd0f3a8e3ce03f5a0806e91903f82b4421b6d1ab7e07e659b71b369b6e17b939ba5b77206e2060e8f31ec15c484d9a170e5a2c62f1fa279fb196951bf9b31a01c7edebafaf2d012c2ff179a63ec81ce792379a6393e90fc94c645db096a711c5504322651425f3e88295711f7b2d0f8b8a234c4c83d6f6fb3ad7e562bfc595cc6a8f5ee5f336f15bb9c7b2c8b1f330b29aca2ce8e7f96b41d3d192adf157379fd87ea732b770c0a7c9a4728a3baeaa63064cc057c5281e8cc9aaac48b63ed106b8cc6ea6973ddb68e500b2bbb23b50356234fc609d3c75a9a9d17e0cfbaaf1653f8e724250b24a2280b51d77be095cec33ac6c3d1480f6cc242fcf28e75bdd610ceddf738544abbdfc6f559c61d65faa195aa5e2a67ee208517bf0fa7588db20b1ea136b9612d6eda4556f01df18957df15a77e41b56a47d70d2ebe62af1182a32bda9f7e800fb9ff8005bcee9328a9197c69df55be8da2713b8e3bde8d80173bca1fb4a864e55687e618912af70103b1bc58a9b53e79d61d1360d3974f2cecb015c0c02ff38b4c382b2574e788424fcf7aa1a9c1b9e5376fec04f250be6860625ab4a6f70b2bbc62a5ec61532df2eef5008e051d0fcedb8ea5754df0463871216616492669d6157082ea77bdd38d73e4188b913854e17977b01a51c7c2817e52fc7a2b7981d75469dce0f3f7d7c87143964d8280d89e1bee329c59a46755ac05e3f654565e83aac486fcb16b44f3a2caaf45ef960fcb49faf98a0b4f7610171306efd96cdebb2200988ae782b0ebcbf21521ec9f12f4461405fda5ee6ddf64d00a47f5031f193b2e76893acf749d4e7828085e93ede4540f284efa4f81a62edc5fbdc2ec870b2316ed99836e7f192605b32de5b9420ac45fb713f1022fb7b7c3c37b649072331d18dc474c4cb4a103710a5443d9e510fce37aa97329188df25ce8cc8e3fecdc185225ebd016b516758c6cdb6ff50eeee9f1f117a16983c79d66ac1cba8e154196dd1f6eaff50bdeea105ae9cd3b2456648d2e0abfc53c1660e89fd2547ab2b6326c9201050df626a7250a0f9b8079350d5d503b67d5eac8a4e7b0245c4c5e577c43f2e85db066118e9e8fb5b964efbde45e0de550df4d4b3fff1329aaea1def3270f38c51cd627de24dbe038f4e5ba2f7f22c4b60edfa68388feabe51e3b8e5caddcabb4654bfada5e2563c37df1df2866f5a6c0c1fd6b43bea59b16cad5b5540a16347ab0edc2e42df39420790ffd28ae4d0979c0fb2cd30a1490ccd3bbf6666d0656ea5d917bf45aadbeb92c8854a3ed0ab338d1593ed41cac9a7d2eea8be60c5b8fa8490e498e0e393bf914609937e65ec89a793d2994c518655569873fdb17337bbdbf4b02a35ef3144b74e733c36d4ff143386b258f48ffddc4f6a05f17f2c10a10e0ddc68789af077e105defbd8649db4009837bcc96dc57fb4e2ae98a1fb494c1f14258d16777f79cbc9a27447b55c8f4f9620da24dd0d54ff739acc4640a87cf47122cde37673a498d44cb734ca8b3fcae1db15597bc476f71ab6882f9059a602ca9e118b3d281649ef9fd97eca32b08a8ba950c01f84daacc1bf2c98192659f799f215a5de20ec06707f08cf578a7c28dcd052bd900ed80a5bea8b2310d2885c7837ce9563bfd3db954e660096bd6f28250fd95175eeb29c58b0c908360c793bec4b29005a89de49192bce0c47c7f8535bdf1cd9bb1ccc086f127a5500acfc290b2da907ac6675839c6c42059ace8ee1ed9d0c8a7b63337f88e5f53a3925fc4aaedcb9c399abac14ecf1ccca67082339c965d159ae61775b2e9b41d34af02fa1d2c5f6576cdabc662ed5c0b578e5f25aaebc3c4cc422e622f0434d2e2f3ac2073e51d6dcf31c77870941336ca9bc2cd8d4a03104e38383423fd49bc471251ac732a8c13aeae45d55b9f9d39efe2797c2dba8f4180d83b12682c0b97d46c9b946426a1030cf65a413cd08134f480e0facda7bdeb1d22ae4cf7fd25736fceb01b516e7fd6e10bc68d32c0f1e83c968fa0d0be3d8f4e4696e5a5a10e69f523c11e37a7a560b01ffc7eafa92229e7a16cc7c2973ffb1b8b4287c77c33d77d7aa9e704c3b16053bef42d28ae6849bb6cbbed5a35b98957dfac5d2b06a4f5ffca79cb3fab584ab6cabb62d87f7950855d567d14922c42713afac03cd4897db7cb7eb808835c93d441cf38228d1a106ddb1a054810279ef18462c0b6c1344c1045e4e282a117274c28ada3fc0be0cb8045538795dce40148bf9874b4e6f8d0d51f6d347d739278f42ecf666d9de3d41fe4dd4a843be87af36ccbbeed27dcb693a732c2fd93038208cf59ca11fb23400d84dd8521aca029d456d2c8193e7ef53de42adae25f5c1b34435e0ae6b2014a0577d0a40afc7ee3a92a7dbac34f6a414f97cc0cb193a0344449c1d3c86d85d5b3aeae2904913a47b028634b19378f96bf5a0ddbc18cba2b465c43de3c8b04309a7b4c7eddf67fd5ca09bc9916b6ae8bb17a0ba423443eefdd54f0ef126a7368b685e13ca7711937a10f70d3e56597a1baad43b0431aeaf90eededcbe4f42c93239e7ae2fa015964735393f370bae38c403a2097dc755c72494828eae4e557bc7b662db921702cd5e05854cebacbabf1035dc57d73b71299d91b9861d74bbaab431371043b03f8f734569ed3cb03df0c9be14eaf3e6023d17dcdf913b9ab4978d395c03487c2f97d516e79a704340687db81eb2aac00a4021abcd5deb57b894075c6fe7bc39c8a85a1f4632070a920e999e88186f48d010ab62041d33a8c1d7c9c06600b3964b7343341baaa5a790ed13c8816ac53fe98e088c6b53eef033fe3b0d7bc2eda7150c7584a8ba13c32a7d7052692a927ab19b6c68abb044215d42e9ce142cbe9a638a140fa010032be23155eecb5424cfef10e27f5259d5066a0ba3f4c0eb44447de80a50f5544df8d8a73b637f6d7c5691bf0b756c3032771c92f7be061581058237242d1ee1d9447ca601f55d80ed3b4dfe263fa333146ce4d5f9398a84f6b0d870ffe0cc9c544c76eb3c4580f287c44de54b5b23e2817e97d7b73ab22ceecd5070e21b4e206619c4d3860dd900a26ce898b254d9fedb197c2ec24ff61371275cb6d007984ea3d6655f9b966da2b6f4754c69cbc0725178634be9578f2d807c145c7bb97b36f2555a9a50879ffdb5be1a7d2a5bdfcc95bfa2a52ba54257629acfacf02cb61d1f05d262723f34c1b63c566b439c630b2e5bac75f647f3268bff061cacce061f2744947e184b8dca4c883d215c4d4845fc6f4e6b3b9e0cfacd04411a4dd8578c0b30831d437b3cd4962bbcb349ce76b9163507e566c2093159835c2ba0074f71a624b00b9c22ba00905e35ca3be85da614db677902d731387ecee7055db46030170a5c56aa6990edf133a7f11a93bb2654673cc1af0354e29f810424c859b8525747bc9c51153c8f8322fa42fd1c5eb0af1ed8942687999271bf90ba61608fb924a536aff1249dbf2b760581d7958980dc15dafb23f70a30552b3247340e6cc859a5ecae18466ccb45e3421a37a7f1c05bb2ac9b073be9dda6fc41f0c9a43aeeb9758d6ee14e5355679157484e855fe1cefb03453e5f872cfcc7b351eaff0654215ce7ec2650bbd8451d8b49f60f3b9734c43332b1eab31fdfe6a4c82f5c18e85d63c9d38b3b2fda2238bf796ba4e2bc1baa03ea0c352937a38a8804022d57e37b536d7efb10c48b08f7144379af76289fcc449a4032ce484163eb61d01fdfb2d8912527b94b7dcad861d202eea97919755dc7ef24b18d3d20a801f6dcc3048d6b0d0ee2d1305058d6d0e5940ef17fb31e7e9dbd978edca9888d67d10ba2de47e4ec9c61ca1759bfba7a7c9abae3d6f5bd68eccd96705cbd73d2b84d5145f5991f60d619276b7de33e66d4a26f8c79c5b1f65aff6b5d576f5d9f4ceac7594eeac1d8fb8209c61e65a05fd6ead7e3072c4e68543a67a67d60fe2681edf3a8aca8ba742e73e4779233931c3f122ec75a1517934f5fc112e369b7b4e0fd5f5ac447bcce81db4d2522f71bcf318078f47eb1e044892f2cfdd38f9fe45f331ead1c9d92c155397631c2195ab8942364aabb12ad7353e4a894a097451d3292f2cd30a632c159303edc2bd0ca2725fb85805e8c21d260cbb7d1e7bc73a4b56286f7eb2054104e536825d7b1a12804c1853d002f0bacd454b7766f022f74747c8f55cb39bdcf3dc8d0af7000d21b7ed73892db20477f483f1681890b6d243f16adc5faca73b8d22b83640491828c170b91ec4ba942c24bba237a66f30141124773b98be33aec03987c424615ea4b795acee7602448b39af29b0e99d9bef6a5fdd63fb455e02525678cc4191cb1a7d3bfb4428b44a00198318d81e3344f4249b85a6fc9d2fced4044b2747e515a92475fac385a13d3eba73d27c124accd654be0bf9bd989e782858e158c9a612c86b92cc11ea02c750c777e2dcb791b0a67375987f4e4dedcee7ea63390e98aac02827fb8daef56be2ab8f57902d2b6963daac051550c698cb6d055583780fca522b1e113789beea34ad28c79dcb523a712833529e9f9a3340757683a3b8b5f6d4bae8de2eb6ab02642ddd5371ba969f987419579ba53bfb39b8cf2a96c1655e9d305419246804ac9dbbd9be5bdd4468c21093a6984afcc0539aa288d9fc1d16f6e0f8650e8d6a1664fec7bd64cf1eb349604dc76016a74350f31f0c3794614018dace0a5b5d6c16364f93064822a2a9272d8fb49a7eb5628eff88b421bbd103c5fbca599a856b5bd702c8d5c50599140a16980784eb8e6223f2e52e12bb23626a8666b9be5fb0544a0a060ca1436a122058c1ad357e5f9d0bb24a41204bb84c323285a3b5cdce40dd80cac27e8e9c2a1d3795fdbbb715f087b5164fd308e5acc42121350a0a35bc5dce5b5a5155b4341a32010e98e37e578a3f4b2871e78f0b1754153b7f41ba986cb02347048748cce778d141fa0732784580d0d831ae6ac7e5424ef03817799949df6b46b2edb6053b4da5a280f968e04e8928a7b846877eacf3ad4f6674db9ed29b40e9f47ea665a7dd2382c7059a736b10f5e3ddd8f3c6336e42b82cbc35b4a276fd33d109ce7a49749f4efd00500af19122b00bda11ce7b5694f837b184e8bf81d2479ba784c1ffd7118f14e86ee9d67988868c5ac0c691d1474dc624fefa8e7a946cce7525e81e2cb9bfc8d9c84cc127e0358736e3e0d75d56382a47746f25be3e43dc627b42f17845e947f9b2336cf4ca2dd0b7ef142faeac3ff82a63748e5363d5322024b99e704b799bb3dd1261d01e18822045cd2422df0577a7e2dfc5ab7f8e3f869f4befdb430bd322320cd34a47e59d5f6cb8be2f74bf68fda4b14768ba6ab408e68f4a32810829892ec82271bc9223d718b5fee2047bf730d6e511781265afe02e9e9d631516586ca004c86e99b555885d073fc1b56941e3c5a43c4ecb6f13add3909f41d34e4e73ba924e16e29291f55d10d39df8c138f452ecc63d399eeded9d60186b7ff3871cfee447efaac13b9892042d69f3da68d88c38268ea79d652e77fe948532f5b674d6416154ff7b448bb5c77d20854e29b2fd2170ba5d7c6cbf54de8a25d45225f64466e36ec97768e1f28e0d9f3224fb88f6ee8760c213dab3dd12da81776d6fc192485e3cfdc82dcec2f817624f62d33c16b0d0372276b4c9524a5fb077694783dd0f570039842238a5d6dda9631d97dc3ee43c79c952a9129245ded22ef28fee0348291142268d86743677e27a50fbb214bd6debc5acd1ce4058ae867d0deb9ebacd8aec1320b38c79712fa07374c182957b65e31e4012efc746c2e17fd9d568f9ffef8c67395d97f0bda3b862c08998842a58bb4d696a0c0a6c2da0b7ed0ff028e7</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-table-store" scheme="http://yoursite.com/categories/Flink/Flink-table-store/"/>
    
    
  </entry>
  
  <entry>
    <title>Test: Docker HiveE2eTest in FTS</title>
    <link href="http://yoursite.com/2022/07/20/Test-Docker-HiveE2eTest-in-FTS/"/>
    <id>http://yoursite.com/2022/07/20/Test-Docker-HiveE2eTest-in-FTS/</id>
    <published>2022-07-20T07:39:32.000Z</published>
    <updated>2023-03-02T08:45:40.037Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7065a48ce1cd057290f0a5bacc524920805f27f46ade3b4de1f607f818ad9ef8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Test" scheme="http://yoursite.com/categories/Tools/Test/"/>
    
    
  </entry>
  
  <entry>
    <title>Test-分布式软件 benchmark 设计方法</title>
    <link href="http://yoursite.com/2022/05/10/Test-%E5%88%86%E5%B8%83%E5%BC%8F%E8%BD%AF%E4%BB%B6-benchmark-%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2022/05/10/Test-分布式软件-benchmark-设计方法/</id>
    <published>2022-05-10T04:46:18.000Z</published>
    <updated>2023-03-02T08:46:09.214Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4dacd2f51985e3b48007575e521ed54e49c8002eb1148a7bcbf8c943e97de448"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Test" scheme="http://yoursite.com/categories/Tools/Test/"/>
    
    
  </entry>
  
  <entry>
    <title>Test-微基准测试工具 JMH</title>
    <link href="http://yoursite.com/2022/05/08/Test-%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-JMH/"/>
    <id>http://yoursite.com/2022/05/08/Test-微基准测试工具-JMH/</id>
    <published>2022-05-08T04:46:18.000Z</published>
    <updated>2023-03-02T08:46:12.327Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fee480083bea45b4d5483845707e88cc6420114426cdf724cc147c52574a1fc1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Test" scheme="http://yoursite.com/categories/Tools/Test/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://yoursite.com/2022/04/28/Docker/"/>
    <id>http://yoursite.com/2022/04/28/Docker/</id>
    <published>2022-04-28T09:41:19.000Z</published>
    <updated>2023-03-06T11:33:59.804Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8dce7c677d2d32f05a458c17891e8ff50ea774945010f6a3c4d3aa08904a25ff"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
      <category term="云计算" scheme="http://yoursite.com/categories/BigData/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>TPCH 使用</title>
    <link href="http://yoursite.com/2022/04/20/TPCH-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/04/20/TPCH-使用/</id>
    <published>2022-04-20T08:51:19.000Z</published>
    <updated>2023-03-02T08:46:15.300Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="934c316c4b6715168ad78369b7217c84f769d231af90f3cf66cd78443642ade4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Test" scheme="http://yoursite.com/categories/Tools/Test/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink DML SQL with Calcite</title>
    <link href="http://yoursite.com/2022/04/16/Flink-DML-SQL-with-Calcite/"/>
    <id>http://yoursite.com/2022/04/16/Flink-DML-SQL-with-Calcite/</id>
    <published>2022-04-16T05:31:40.000Z</published>
    <updated>2022-05-01T15:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Flink-DDL-SQL-With-Calcite</code>  一文中介绍了 flink-sql-parser 的工程实现，以及 SQL 解析、SQL 校验的相关细节，<br>本文主要介绍在 DML SQL 中，Calcite 是如何做 SQL 查询优化的。</p><a id="more"></a><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p><code>org.apache.flink.table.planner.plan.stream.sql.TableScanTest#testEventTimeTemporalJoinOnUpsertSource</code> 测试用例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  amount <span class="built_in">BIGINT</span>,</span><br><span class="line">  currency <span class="keyword">STRING</span>,</span><br><span class="line">  rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">  WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"> <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line"> <span class="string">'changelog-mode'</span> = <span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> rates_history (</span><br><span class="line">  currency <span class="keyword">STRING</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span>,</span><br><span class="line">  rate <span class="built_in">BIGINT</span>,</span><br><span class="line">  rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">  WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">  <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">  <span class="string">'changelog-mode'</span> = <span class="string">'UA,D'</span>,</span><br><span class="line">  <span class="string">'disable-lookup'</span> = <span class="string">'true'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> o.currency, o.amount, r.rate, o.amount * r.rate</span><br><span class="line"><span class="keyword">FROM</span> orders <span class="keyword">AS</span> o </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> rates_history <span class="keyword">FOR</span> SYSTEM_TIME <span class="keyword">AS</span> <span class="keyword">OF</span> o.rowtime <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> o.currency = r.currency;</span><br></pre></td></tr></table></figure><h3 id="SqlNode-gt-RelNode-语句执行流程"><a href="#SqlNode-gt-RelNode-语句执行流程" class="headerlink" title="SqlNode -&gt; RelNode 语句执行流程"></a>SqlNode -&gt; RelNode 语句执行流程</h3><p>查询 SQL 语句的解析、转换、执行流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeSql</span><br><span class="line"></span><br><span class="line">    // 解析 SQL</span><br><span class="line">    org.apache.flink.table.planner.delegation.ParserImpl#parse</span><br><span class="line">        org.apache.flink.table.planner.parse.CalciteParser#parseSqlList</span><br><span class="line">          ...</span><br><span class="line">          org.apache.flink.table.planner.operations.SqlToOperationConverter#toQueryOperation</span><br><span class="line">            org.apache.flink.table.planner.calcite.FlinkPlannerImpl#rel</span><br><span class="line">                org.apache.calcite.sql2rel.SqlToRelConverter#convertQuery    转交 Calcite 处理</span><br><span class="line">                    org.apache.calcite.sql2rel.SqlToRelConverter#convertQueryRecursive 递归解析</span><br><span class="line">                        org.apache.calcite.sql2rel.SqlToRelConverter#convertFrom   </span><br><span class="line">                            org.apache.calcite.sql2rel.SqlToRelConverter#convertIdentifier   源表表名</span><br><span class="line">                                org.apache.calcite.sql.validate.SqlValidatorUtil#getRelOptTable </span><br><span class="line">                                    *org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#getTable</span><br><span class="line">                                        org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#toPreparingTable   返回的CatalogSourceTable为RelOptTable子类</span><br><span class="line">                                            org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#convertCatalogTable  生成CatalogSourceTable</span><br><span class="line">                                org.apache.calcite.sql2rel.SqlToRelConverter#toRel</span><br><span class="line">                                    org.apache.flink.table.planner.plan.schema.CatalogSourceTable#toRel  </span><br><span class="line">                                        org.apache.flink.table.planner.connectors.DynamicSourceUtils#convertSourceToRel</span><br></pre></td></tr></table></figure><p>初始生成的 RelNode ，如图所示：</p><p><img src="%E5%88%9D%E5%A7%8B%E7%94%9F%E6%88%90%E7%9A%84query_RelNode.png" alt></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>Flink Program 构建及相关优化规则，如图：<br><img src="SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96.png" alt></p><p><img src="FlinkChainedProgram.png" alt></p><p>优化过程打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">origin：</span><br><span class="line">LogicalProject(currency=[$1], amount=[$0], rate=[$4], EXPR$3=[*($0, $4)])</span><br><span class="line">+- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[&#123;1, 2&#125;])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalFilter(condition=[=($cor0.currency, $0)])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize subquery_rewrite cost 36 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[&#123;1, 2&#125;])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalFilter(condition=[=($cor0.currency, $0)])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize temporal_join_rewrite cost 31 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize decorrelate cost 12 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize default_rewrite cost 98 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize predicate_pushdown cost 41 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize project_rewrite cost 4 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize logical cost 840 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize logical_rewrite cost 126 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalJoin(condition=[AND(=($1, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize time_indicator cost 17 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalCalc(select=[amount, currency, rowtime, currency0, rate, CAST(rowtime0 AS TIMESTAMP(3)) AS rowtime0])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($1, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">      :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">      :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical cost 516 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Calc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- TemporalJoin(joinType=[LeftOuterJoin], where=[AND(=(currency, currency0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0), __TEMPORAL_JOIN_LEFT_KEY(currency), __TEMPORAL_JOIN_RIGHT_KEY(currency0)))], select=[amount, currency, rowtime, currency0, rate, rowtime0])</span><br><span class="line">   :- Exchange(distribution=[hash[currency]])</span><br><span class="line">   :  +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">   :     +- TableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- Exchange(distribution=[hash[currency]])</span><br><span class="line">      +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">         +- ChangelogNormalize(key=[currency])</span><br><span class="line">            +- Exchange(distribution=[hash[currency]])</span><br><span class="line">               +- TableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical_rewrite cost 48 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Calc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- TemporalJoin(joinType=[LeftOuterJoin], where=[AND(=(currency, currency0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0), __TEMPORAL_JOIN_LEFT_KEY(currency), __TEMPORAL_JOIN_RIGHT_KEY(currency0)))], select=[amount, currency, rowtime, currency0, rate, rowtime0])</span><br><span class="line">   :- Exchange(distribution=[hash[currency]])</span><br><span class="line">   :  +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">   :     +- TableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- Exchange(distribution=[hash[currency]])</span><br><span class="line">      +- ChangelogNormalize(key=[currency])</span><br><span class="line">         +- Exchange(distribution=[hash[currency]])</span><br><span class="line">            +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">               +- TableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br></pre></td></tr></table></figure><p>subquery_rewrite 前后对比：<br><img src="query_subquery_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>logical 前后对比：<br><img src="query_logical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>logical_rewrite 前后对比：<br><img src="query_logical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>time_indicator 前后对比：<br><img src="query_time_indicator%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>physical 前后对比：<br><img src="query_physical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>physical_rewrite 前后对比：<br><img src="query_physical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>最初的 RelNode 经过逻辑优化、物理优化后，最终生成 Flink 物理执行计划 FlinkPhysicalRel 。<br>其中，FlinkLogicalCalc 包含了 Project 和 Filter 操作，StreamExecExchange 继承了 Calcite 的 Exchange ，标识一次 hash distribute 。</p><p><img src="Flink_SQL%E6%89%A7%E8%A1%8C%E6%A0%91%E6%9E%84%E5%BB%BA.png" alt></p><h3 id="生成-Transformation"><a href="#生成-Transformation" class="headerlink" title="生成 Transformation"></a>生成 Transformation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 转换生成 transformations ，并提交执行</span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeInternal(org.apache.flink.table.operations.Operation)</span><br><span class="line">    org.apache.flink.table.api.internal.TableEnvironmentImpl#executeQueryOperation</span><br><span class="line">        org.apache.flink.table.api.internal.TableEnvironmentImpl#translate</span><br><span class="line">        org.apache.flink.table.delegation.Executor#createPipeline</span><br><span class="line">        org.apache.flink.table.delegation.Executor#executeAsync</span><br></pre></td></tr></table></figure><h2 id="RichInsert"><a href="#RichInsert" class="headerlink" title="RichInsert"></a>RichInsert</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_source(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">    channel <span class="built_in">varchar</span>,</span><br><span class="line">    pv <span class="built_in">int</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span> = <span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_side(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span>,</span><br><span class="line">    info <span class="built_in">varchar</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span> = <span class="string">'UA,D'</span>,</span><br><span class="line">    <span class="string">'disable-lookup'</span> = <span class="string">'true'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_sink(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">    channel <span class="built_in">varchar</span>,</span><br><span class="line">    pv <span class="built_in">int</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    info <span class="built_in">varchar</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> =<span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span>=<span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_sink</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        a.name,</span><br><span class="line">        a.channel,</span><br><span class="line">        a.pv,</span><br><span class="line">        a.rowtime,</span><br><span class="line">        b.info</span><br><span class="line">    <span class="keyword">FROM</span> table_source a</span><br><span class="line">    <span class="keyword">JOIN</span> table_side <span class="keyword">FOR</span> SYSTEM_TIME <span class="keyword">AS</span> <span class="keyword">OF</span> a.rowtime <span class="keyword">AS</span> b <span class="keyword">ON</span> a.name = b.name</span><br><span class="line">    <span class="keyword">WHERE</span> a.channel=<span class="string">'channel1'</span> <span class="keyword">AND</span> a.pv&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="SqlNode-gt-RelNode-语句执行流程-1"><a href="#SqlNode-gt-RelNode-语句执行流程-1" class="headerlink" title="SqlNode -&gt; RelNode 语句执行流程"></a>SqlNode -&gt; RelNode 语句执行流程</h3><p>Insert SQL 语句的解析、转换、执行流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeSql</span><br><span class="line">    org.apache.flink.table.planner.delegation.ParserImpl#parse： RichSqlInsert</span><br><span class="line">        *org.apache.flink.table.planner.operations.SqlToOperationConverter#convertSqlInsert： 最终返回CatalogSinkModifyOperation</span><br><span class="line">            org.apache.flink.table.planner.operations.SqlToOperationConverter#toQueryOperation： 处理Select语句,返回PlannerQueryOperation(relational.project())</span><br><span class="line">        org.apache.flink.table.api.internal.TableEnvironmentImpl#executeOperation</span><br><span class="line">            org.apache.flink.table.api.internal.TableEnvironmentImpl#executeInternal(java.util.List&lt;org.apache.flink.table.operations.ModifyOperation&gt;)</span><br><span class="line">                org.apache.flink.table.api.internal.TableEnvironmentImpl#translate</span><br><span class="line">                    org.apache.flink.table.planner.delegation.PlannerBase#translate</span><br><span class="line">                        org.apache.flink.table.planner.delegation.PlannerBase#translateToRel   对select字段进行校验，将ModifyOperation转换为Calcite的relational expression.也就是LogicalLegacySink。</span><br><span class="line">                        *org.apache.flink.table.planner.delegation.PlannerBase#optimize         对生成的relational  expression进行优化，默认使用StreamCommonSubGraphBasedOptimizer。</span><br><span class="line">                        org.apache.flink.table.planner.delegation.PlannerBase#translateToExecNodePlan    优化后的RelNode被转换FlinkPhysicalRel</span><br><span class="line">                        org.apache.flink.table.planner.delegation.StreamPlanner#translateToPlan</span><br><span class="line">                            org.apache.flink.table.planner.plan.nodes.exec.ExecNode#translateToPlan   将每一个ExecNode转换为对应transformation</span><br><span class="line">                                org.apache.flink.table.planner.plan.nodes.common.CommonPhysicalTableSourceScan#createSourceTransformation</span><br><span class="line">                                    org.apache.flink.table.planner.plan.nodes.physical.stream.StreamExecTableSourceScan#createInputFormatTransformation</span><br><span class="line">                                    org.apache.flink.table.planner.plan.nodes.common.CommonPhysicalSink#createSinkTransformation</span><br></pre></td></tr></table></figure><p>初始生成的 RelNode ，如图所示：</p><p><img src="%E5%88%9D%E5%A7%8B%E7%94%9F%E6%88%90%E7%9A%84insert_RelNode.png" alt></p><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>优化过程打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">astPlan -&gt;</span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(name=[$0], channel=[$1], pv=[$2], rowtime=[$3], info=[$5])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[&#123;0, 3&#125;])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalFilter(condition=[=($cor0.name, $0)])</span><br><span class="line">            +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">               +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">                  +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimize subquery_rewrite cost 75 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[&#123;0, 3&#125;])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalFilter(condition=[=($cor0.name, $0)])</span><br><span class="line">            +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">               +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">                  +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize temporal_join_rewrite cost 36 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize decorrelate cost 46 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize default_rewrite cost 327 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $2, $3, $5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize predicate_pushdown cost 89 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $2, $3, $5]])</span><br><span class="line">   +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">      :- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      :  +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize project_rewrite cost 50 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $1, $2, $4]])</span><br><span class="line">   +- LogicalJoin(condition=[AND(=($0, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- LogicalProject(inputs=[0], exprs=[[$2, $3]])</span><br><span class="line">      :  +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      :     +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :        +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize logical cost 1356 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($0, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize logical_rewrite cost 178 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($0, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize time_indicator cost 33 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalCalc(select=[name, pv, rowtime, name0, info, CAST(rowtime0 AS TIMESTAMP(3)) AS rowtime0])</span><br><span class="line">      +- FlinkLogicalJoin(condition=[AND(=($0, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">         :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">         :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">         +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical cost 899 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Sink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- Calc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- TemporalJoin(joinType=[InnerJoin], where=[AND(=(name, name0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(name0), __TEMPORAL_JOIN_LEFT_KEY(name), __TEMPORAL_JOIN_RIGHT_KEY(name0)))], select=[name, pv, rowtime, name0, info, rowtime0])</span><br><span class="line">      :- Exchange(distribution=[hash[name]])</span><br><span class="line">      :  +- Calc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">      :        +- TableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- Exchange(distribution=[hash[name]])</span><br><span class="line">         +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">            +- ChangelogNormalize(key=[name])</span><br><span class="line">               +- Exchange(distribution=[hash[name]])</span><br><span class="line">                  +- TableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical_rewrite cost 87 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Sink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- Calc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- TemporalJoin(joinType=[InnerJoin], where=[AND(=(name, name0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(name0), __TEMPORAL_JOIN_LEFT_KEY(name), __TEMPORAL_JOIN_RIGHT_KEY(name0)))], select=[name, pv, rowtime, name0, info, rowtime0])</span><br><span class="line">      :- Exchange(distribution=[hash[name]])</span><br><span class="line">      :  +- Calc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">      :        +- TableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- Exchange(distribution=[hash[name]])</span><br><span class="line">         +- ChangelogNormalize(key=[name])</span><br><span class="line">            +- Exchange(distribution=[hash[name]])</span><br><span class="line">               +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">                  +- TableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br></pre></td></tr></table></figure><h4 id="subquery-rewrite"><a href="#subquery-rewrite" class="headerlink" title="subquery_rewrite"></a>subquery_rewrite</h4><p>subquery_rewrite 前后对比：<br><img src="insert_subquery_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="temporal-join-rewrite"><a href="#temporal-join-rewrite" class="headerlink" title="temporal_join_rewrite"></a>temporal_join_rewrite</h4><p>temporal_join_rewrite 前后对比：<br><img src="insert_temporal_join_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_temporal_join_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="decorrelate"><a href="#decorrelate" class="headerlink" title="decorrelate"></a>decorrelate</h4><p>decorrelate 前后对比：<br><img src="insert_decorrelate%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="default-rewrite"><a href="#default-rewrite" class="headerlink" title="default_rewrite"></a>default_rewrite</h4><p>default_rewrite 前后对比：<br><img src="insert_default_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="predicate-pushdown"><a href="#predicate-pushdown" class="headerlink" title="predicate_pushdown"></a>predicate_pushdown</h4><p>predicate_pushdown 前后对比：<br><img src="insert_predicate_pushdown%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_predicate_pushdown%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="project-rewrite"><a href="#project-rewrite" class="headerlink" title="project_rewrite"></a>project_rewrite</h4><p>project_rewrite 前后对比：<br><img src="insert_project_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_project_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="logical"><a href="#logical" class="headerlink" title="logical"></a>logical</h4><p>logical 前后对比：<br><img src="insert_logical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_logical%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="logical-rewrite"><a href="#logical-rewrite" class="headerlink" title="logical_rewrite"></a>logical_rewrite</h4><p>logical_rewrite 前后对比：<br><img src="insert_logical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="time-indicator"><a href="#time-indicator" class="headerlink" title="time_indicator"></a>time_indicator</h4><p>time_indicator 前后对比：<br><img src="insert_time_indicator%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_time_indicator%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="physical"><a href="#physical" class="headerlink" title="physical"></a>physical</h4><p>physical 前后对比：<br><img src="insert_physical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_physical%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="physical-rewrite"><a href="#physical-rewrite" class="headerlink" title="physical_rewrite"></a>physical_rewrite</h4><p>physical_rewrite 前后对比：<br><img src="insert_physical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_physical_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.jrwang.me/2019/flink-source-code-sql-overview/" target="_blank" rel="noopener">Flink 源码阅读笔记 - Flink SQL 整体执行框架</a><br><a href="https://www.cnblogs.com/ljygz/p/15421973.html" target="_blank" rel="noopener">Flink Sql 之 Calcite Volcano 优化器（源码解析）</a><br><a href="https://io-meter.com/2018/11/01/sql-query-optimization-volcano/" target="_blank" rel="noopener">SQL 查询优化原理之 Volcano Optimizer 介绍</a><br><a href="https://www.liaojiayi.com/calcite/" target="_blank" rel="noopener">SQL 解析框架 - Calcite</a><br><a href="https://www.jianshu.com/p/f7afa734a545" target="_blank" rel="noopener">FlinkSQL 生成 StreamGraph</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;Flink-DDL-SQL-With-Calcite&lt;/code&gt;  一文中介绍了 flink-sql-parser 的工程实现，以及 SQL 解析、SQL 校验的相关细节，&lt;br&gt;本文主要介绍在 DML SQL 中，Calcite 是如何做 SQL 查询优化的。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Calcite" scheme="http://yoursite.com/categories/Flink/Calcite/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-table-store: MergeTreeWriter</title>
    <link href="http://yoursite.com/2022/03/30/Flink-table-store-MergeTreeWriter/"/>
    <id>http://yoursite.com/2022/03/30/Flink-table-store-MergeTreeWriter/</id>
    <published>2022-03-30T08:47:51.000Z</published>
    <updated>2022-05-01T17:18:50.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/apache/flink-table-store/commits/master" target="_blank" rel="noopener">flink-table-store git</a></p><p>本文了解下 MergeTreeWriter 的源码实现。</p><a id="more"></a><h2 id="leveldb"><a href="#leveldb" class="headerlink" title="leveldb"></a>leveldb</h2><p><img src="LSM-Tree%E7%BB%93%E6%9E%84.png" alt></p><h2 id="MergeTreeWriter"><a href="#MergeTreeWriter" class="headerlink" title="MergeTreeWriter"></a>MergeTreeWriter</h2><p><img src="MergeTreeWriter%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="SstFileTest"><a href="#SstFileTest" class="headerlink" title="SstFileTest"></a>SstFileTest</h3><figure class="highlight java"><figcaption><span>SstFileTest#testWriteAndReadSstFileWithStatsCollectingRollingFile</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/sst/SstFileTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> SstFileReader&#125; and &#123;<span class="doctag">@link</span> SstFileWriter&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SstFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产 kv 数据工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstTestDataGenerator gen =</span><br><span class="line">            SstTestDataGenerator.builder().memTableCapacity(<span class="number">20</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadSstFileWithStatsCollectingRollingFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testWriteAndReadSstFileImpl(<span class="string">"avro"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ① TestKeyValueGenerator 生成一批数据</span></span><br><span class="line"><span class="comment">     * ② 当某一个 partition/bucket 首先达到 memTable 内存阈值20，停止生成数据</span></span><br><span class="line"><span class="comment">     * ③ 按 key,sequenceNumber 排序</span></span><br><span class="line"><span class="comment">     * ④ 按 key 聚合去重</span></span><br><span class="line"><span class="comment">     * ⑤ 为去重后的 kv list 构建一个内存 sst file，并组装统计信息 SstFileMeta </span></span><br><span class="line"><span class="comment">     * ⑥ 内存 kv list 及 SstFileMeta 以 Data 返回</span></span><br><span class="line"><span class="comment">     * ⑦ 创建 SstFileWriter ，一个 partition/bucket 对应一个 SstFileWriter ，并将 kv list 数据封装成 CloseableIterator</span></span><br><span class="line"><span class="comment">     * ⑧ 执行 SstFileWriter.write() --&gt; SstRollingFile.write() --&gt; RollingFile.write() --&gt; AvroBulkWriter.write()</span></span><br><span class="line"><span class="comment">     * ⑨ 写入完成后，SstRollingFile.collectFile(Path) 组装统计信息返回 SstFileMeta</span></span><br><span class="line"><span class="comment">     * ⑩ 比较 Data 的 SstFileMeta 与 SstFileWriter.write() 返回的 SstFileMeta</span></span><br><span class="line"><span class="comment">     * ⑪ 创建 SstFileReader -&gt; sstFileReader.read -&gt; SstFileRecordReader -&gt; 生成 FileSourceSplit -&gt; 使用 BulkFormat.Reader 进行真正读取</span></span><br><span class="line"><span class="comment">     * ⑫ RecordReaderIterator 包装 SstFileRecordReader 遍历读取数据，与当前 Data 中的 kv list 做比对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testWriteAndReadSstFileImpl</span><span class="params">(String format)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 造一波数据，有一个 partition/bucket 达到 memTable 阈值 20 则返回</span></span><br><span class="line">        SstTestDataGenerator.Data data = gen.next();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个 SstFileWriter</span></span><br><span class="line">        SstFileWriter writer = createSstFileWriter(tempDir.toString(), format);</span><br><span class="line"></span><br><span class="line">        SstFileMetaSerializer serializer =</span><br><span class="line">                <span class="keyword">new</span> SstFileMetaSerializer(</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE, TestKeyValueGenerator.ROW_TYPE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行写入，循环遍历数据写入</span></span><br><span class="line">        <span class="comment">// SstFileWriter.write() --&gt; SstRollingFile.write() --&gt; RollingFile.write() --&gt; AvroBulkWriter.write()</span></span><br><span class="line">        <span class="comment">// 写入完成后，SstRollingFile.collectFile(Path) 组装统计信息返回 SstFileMeta</span></span><br><span class="line">        List&lt;SstFileMeta&gt; actualMetas =</span><br><span class="line">                writer.write(CloseableIterator.fromList(data.content, kv -&gt; &#123;&#125;), <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将造数据内存 sst file 记录的 meta 与真正写入磁盘产生的 sst file meta 做对比</span></span><br><span class="line">        checkRollingFiles(data.meta, actualMetas, writer.suggestedFileSize());</span><br><span class="line"></span><br><span class="line">        SstFileReader reader = createSstFileReader(tempDir.toString(), format, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        assertData(</span><br><span class="line">                data,</span><br><span class="line">                actualMetas,</span><br><span class="line">                TestKeyValueGenerator.KEY_SERIALIZER,</span><br><span class="line">                TestKeyValueGenerator.ROW_SERIALIZER,</span><br><span class="line">                serializer,</span><br><span class="line">                reader,</span><br><span class="line">                kv -&gt; kv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SstFileWriter <span class="title">createSstFileWriter</span><span class="params">(String path, String format)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory = <span class="keyword">new</span> FileStorePathFactory(<span class="keyword">new</span> Path(path));</span><br><span class="line">        <span class="keyword">int</span> suggestedFileSize = ThreadLocalRandom.current().nextInt(<span class="number">8192</span>) + <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SstFileWriter.Factory(</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.ROW_TYPE,</span><br><span class="line">                        <span class="comment">// 每一行新加的元素，都会执行 flush</span></span><br><span class="line">                        <span class="keyword">new</span> FlushingFileFormat(format),</span><br><span class="line">                        pathFactory,</span><br><span class="line">                        suggestedFileSize)</span><br><span class="line">                .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SstTestDataGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/sst/SstTestDataGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> SstFileMeta&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SstTestDataGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 生成一行 kv 数据</span></span><br><span class="line">            KeyValue kv = gen.next();</span><br><span class="line">            <span class="comment">// 获取 key</span></span><br><span class="line">            BinaryRowData key = (BinaryRowData) kv.key();</span><br><span class="line">            <span class="comment">// 获取 partition</span></span><br><span class="line">            BinaryRowData partition = gen.getPartition(kv);</span><br><span class="line">            <span class="comment">// 获取 bucket , numBuckets = 3</span></span><br><span class="line">            <span class="keyword">int</span> bucket = (key.hashCode() % numBuckets + numBuckets) % numBuckets;</span><br><span class="line">            <span class="comment">// List&lt;Map&lt;BinaryRowData, List&lt;KeyValue&gt;&gt;&gt;，每一个元素代表一个分桶，分桶中 &lt;partition,List&lt;KeyValue&gt;&gt;</span></span><br><span class="line">            List&lt;KeyValue&gt; memTable =</span><br><span class="line">                    memTables.get(bucket).computeIfAbsent(partition, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            memTable.add(kv);</span><br><span class="line"></span><br><span class="line">            System.out.println(String.format(<span class="string">"sequenceNumber -&gt; %s，key-&gt; %s, partition -&gt; %s，bucket -&gt; %s，op -&gt; %s, value -&gt; %s"</span>,</span><br><span class="line">                    kv.sequenceNumber(),</span><br><span class="line">                    <span class="string">"("</span> + kv.key().getInt(<span class="number">0</span>) + <span class="string">","</span> + kv.key().getLong(<span class="number">1</span>) + <span class="string">")"</span>,</span><br><span class="line">                    kv.value().getString(<span class="number">0</span>) + <span class="string">""</span> + kv.value().getInt(<span class="number">1</span>),</span><br><span class="line">                    bucket,</span><br><span class="line">                    kv.valueKind().toString(),</span><br><span class="line">                    kv.value().getLong(<span class="number">4</span>)</span><br><span class="line">                    ));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// memTableCapacity = 20，假设分区：20211111，分桶：0，达到阈值则创建 sst file</span></span><br><span class="line">            <span class="keyword">if</span> (memTable.size() &gt;= memTableCapacity) &#123;</span><br><span class="line">                </span><br><span class="line">                List&lt;Data&gt; result = createSstFiles(memTable, <span class="number">0</span>, partition, bucket);</span><br><span class="line">                memTable.clear();</span><br><span class="line">                <span class="keyword">assert</span> result.size() == <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Data&gt; <span class="title">createSstFiles</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;KeyValue&gt; kvs, <span class="keyword">int</span> level, BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将数据根据 key,sequenceNumber 排序</span></span><br><span class="line">        gen.sort(kvs);</span><br><span class="line"></span><br><span class="line">        List&lt;KeyValue&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; kvs.size(); i++) &#123;</span><br><span class="line">            KeyValue now = kvs.get(i);</span><br><span class="line">            KeyValue next = kvs.get(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!now.key().equals(next.key())) &#123;</span><br><span class="line">                <span class="comment">// 取每个 key 的最新 sequenceNumber ，覆盖前一个</span></span><br><span class="line">                combined.add(now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        combined.add(kvs.get(kvs.size() - <span class="number">1</span>)); <span class="comment">// 补齐最后一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// level=0</span></span><br><span class="line">        <span class="keyword">int</span> capacity = memTableCapacity;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            <span class="comment">// 根据 level 来扩容</span></span><br><span class="line">            capacity *= memTableCapacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Data&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; combined.size(); i += capacity) &#123;</span><br><span class="line">            result.add(</span><br><span class="line">                    <span class="comment">// memTable 每满 capacity 大小，为聚合去重后的 list 创建一个 sst file</span></span><br><span class="line">                    createSstFile(</span><br><span class="line">                            combined.subList(i, Math.min(i + capacity, combined.size())),</span><br><span class="line">                            level,</span><br><span class="line">                            partition,</span><br><span class="line">                            bucket));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Data <span class="title">createSstFile</span><span class="params">(List&lt;KeyValue&gt; kvs, <span class="keyword">int</span> level, BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用来更新 key 的统计信息工具类</span></span><br><span class="line">        FieldStatsCollector keyStatsCollector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.KEY_TYPE);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用来更新 value 的统计信息工具类</span></span><br><span class="line">        FieldStatsCollector valueStatsCollector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.ROW_TYPE);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">        BinaryRowData minKey = <span class="keyword">null</span>;</span><br><span class="line">        BinaryRowData maxKey = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">long</span> minSequenceNumber = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">long</span> maxSequenceNumber = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (KeyValue kv : kvs) &#123;</span><br><span class="line">            BinaryRowData key = (BinaryRowData) kv.key();</span><br><span class="line">            BinaryRowData value = (BinaryRowData) kv.value();</span><br><span class="line">            totalSize += key.getSizeInBytes() + value.getSizeInBytes();</span><br><span class="line">            keyStatsCollector.collect(key);</span><br><span class="line">            valueStatsCollector.collect(value);</span><br><span class="line">            <span class="keyword">if</span> (minKey == <span class="keyword">null</span> || TestKeyValueGenerator.KEY_COMPARATOR.compare(key, minKey) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                minKey = key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxKey == <span class="keyword">null</span> || TestKeyValueGenerator.KEY_COMPARATOR.compare(key, maxKey) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxKey = key;</span><br><span class="line">            &#125;</span><br><span class="line">            minSequenceNumber = Math.min(minSequenceNumber, kv.sequenceNumber());</span><br><span class="line">            maxSequenceNumber = Math.max(maxSequenceNumber, kv.sequenceNumber());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Data(</span><br><span class="line">                partition,</span><br><span class="line">                bucket,</span><br><span class="line">                <span class="comment">// 生成 sst file 的 metadata 文件 ，真正写入时的收集过程也类似</span></span><br><span class="line">                <span class="keyword">new</span> SstFileMeta(</span><br><span class="line">                        <span class="string">"sst-"</span> + UUID.randomUUID(),</span><br><span class="line">                        totalSize,</span><br><span class="line">                        kvs.size(),</span><br><span class="line">                        minKey,</span><br><span class="line">                        maxKey,</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * 统计 key 中各个字段的最大最小值，null值个数 ：</span></span><br><span class="line"><span class="comment">                         *  0 - shopId(1,9,0) ，表示 shopId 的最小值为1，最大值为9，nullCount 为0</span></span><br><span class="line"><span class="comment">                         *  1 - orderId(-7709647343742251496, 6202316951969867995) ，表示 orderId 的 最小值为 -7709647343742251496，最大值为 6202316951969867995，null Count 为0</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        keyStatsCollector.extract(),</span><br><span class="line">                        valueStatsCollector.extract(),</span><br><span class="line">                        minSequenceNumber,</span><br><span class="line">                        maxSequenceNumber,</span><br><span class="line">                        level),</span><br><span class="line">                kvs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * An in-memory SST file.</span></span><br><span class="line"><span class="comment">     * 为了方便测试比对，使用内存对象来模拟 sst file </span></span><br><span class="line"><span class="comment">     * 与 SstFileWriter 写入返回的 SstFileMeta 做比对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分区</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> BinaryRowData partition;</span><br><span class="line">        <span class="comment">// 分桶</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> bucket;</span><br><span class="line">        <span class="comment">// sst file 的 metadata</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SstFileMeta meta;</span><br><span class="line">        <span class="comment">// 数据内容</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> List&lt;KeyValue&gt; content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Data</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                BinaryRowData partition, <span class="keyword">int</span> bucket, SstFileMeta meta, List&lt;KeyValue&gt; content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.partition = partition;</span><br><span class="line">            <span class="keyword">this</span>.bucket = bucket;</span><br><span class="line">            <span class="keyword">this</span>.meta = meta;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>TestKeyValueGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/TestKeyValueGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> KeyValue&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyValueGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyValue <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> op = random.nextInt(<span class="number">5</span>);</span><br><span class="line">        Order order = <span class="keyword">null</span>;</span><br><span class="line">        ValueKind kind = ValueKind.ADD;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span> &amp;&amp; addedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// delete order</span></span><br><span class="line">            order = pick(addedOrders);</span><br><span class="line">            deletedOrders.add(order);</span><br><span class="line">            kind = ValueKind.DELETE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// update order</span></span><br><span class="line">            <span class="keyword">if</span> (random.nextBoolean() &amp;&amp; deletedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                order = pick(deletedOrders);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (addedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                order = pick(addedOrders);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (order != <span class="keyword">null</span>) &#123;</span><br><span class="line">                order.update();</span><br><span class="line">                addedOrders.add(order);</span><br><span class="line">                kind = ValueKind.ADD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (order == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// new order</span></span><br><span class="line">            order = <span class="keyword">new</span> Order();</span><br><span class="line">            addedOrders.add(order);</span><br><span class="line">            kind = ValueKind.ADD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyValue()</span><br><span class="line">                .replace(</span><br><span class="line">                        <span class="comment">// key 为 (shopId,orderId) ，kv.key().getInt(0) + kv.key().getLong(1)</span></span><br><span class="line">                        KEY_SERIALIZER</span><br><span class="line">                                .toBinaryRow(GenericRowData.of(order.shopId, order.orderId))</span><br><span class="line">                                .copy(),</span><br><span class="line">                        sequenceNumber++,</span><br><span class="line">                        kind,</span><br><span class="line">                        ROW_SERIALIZER</span><br><span class="line">                                .toBinaryRow(</span><br><span class="line">                                        GenericRowData.of(</span><br><span class="line">                                                <span class="comment">// partition 为 dt ，kv.value().getString(0)</span></span><br><span class="line">                                                StringData.fromString(order.dt),</span><br><span class="line">                                                order.hr,</span><br><span class="line">                                                order.shopId,</span><br><span class="line">                                                order.orderId,</span><br><span class="line">                                                order.itemId,</span><br><span class="line">                                                order.priceAmount == <span class="keyword">null</span></span><br><span class="line">                                                        ? <span class="keyword">null</span></span><br><span class="line">                                                        : <span class="keyword">new</span> GenericArrayData(order.priceAmount),</span><br><span class="line">                                                StringData.fromString(order.comment)))</span><br><span class="line">                                .copy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 kv list 按照 key,sequenceNumber 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;KeyValue&gt; kvs)</span> </span>&#123;</span><br><span class="line">        kvs.sort(</span><br><span class="line">                (a, b) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">int</span> keyCompareResult = KEY_COMPARATOR.compare(a.key(), b.key());</span><br><span class="line">                    <span class="keyword">return</span> keyCompareResult != <span class="number">0</span></span><br><span class="line">                            ? keyCompareResult</span><br><span class="line">                            : Long.compare(a.sequenceNumber(), b.sequenceNumber());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gen 一直产生数据，key 为 (shopId, orderId)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 0，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2780980699221738542</span><br><span class="line">sequenceNumber -&gt; 1，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 2780980699221738542</span><br><span class="line">sequenceNumber -&gt; 2，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4843258062816469307</span><br><span class="line">sequenceNumber -&gt; 3，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; 7629700512330682069</span><br><span class="line">sequenceNumber -&gt; 4，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 5，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 7，key-&gt; (6,4757281131655774586), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1390660808551069179</span><br><span class="line">sequenceNumber -&gt; 8，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3041082948826019863</span><br><span class="line">sequenceNumber -&gt; 9，key-&gt; (2,6656455485638391580), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1539430626988409641</span><br><span class="line">sequenceNumber -&gt; 10，key-&gt; (6,-7180799390720755610), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -471344025710360044</span><br><span class="line">sequenceNumber -&gt; 11，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; -6168492336680241066</span><br><span class="line">sequenceNumber -&gt; 12，key-&gt; (3,3437933508159239703), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2771616260199190183</span><br><span class="line">sequenceNumber -&gt; 13，key-&gt; (3,1406959166072420180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 14，key-&gt; (9,1548022128799387646), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 15，key-&gt; (3,7529185916302791697), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 7061550199722317899</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 17，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -4843258062816469307</span><br><span class="line">sequenceNumber -&gt; 18，key-&gt; (8,9071325512152982886), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5977331971180020420</span><br><span class="line">sequenceNumber -&gt; 19，key-&gt; (9,6189042875316582636), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3021498374064348785</span><br><span class="line">sequenceNumber -&gt; 20，key-&gt; (9,6343418366398619495), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6714242845052107042</span><br><span class="line">sequenceNumber -&gt; 21，key-&gt; (3,-6539095021197140424), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 8378366812547696285</span><br><span class="line">sequenceNumber -&gt; 22，key-&gt; (6,-8753039155605858734), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 5512574968172962020</span><br><span class="line">sequenceNumber -&gt; 23，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -7925549160503055693</span><br><span class="line">sequenceNumber -&gt; 24，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -6168492336680241066</span><br><span class="line">sequenceNumber -&gt; 25，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -1780575509543362575</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 27，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 9095332047559518137</span><br><span class="line">sequenceNumber -&gt; 28，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 7629700512330682069</span><br><span class="line">sequenceNumber -&gt; 29，key-&gt; (7,-4422302527273897180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 30，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 9095332047559518137</span><br><span class="line">sequenceNumber -&gt; 31，key-&gt; (5,8365091192911527232), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -171710651702984100</span><br><span class="line">sequenceNumber -&gt; 32，key-&gt; (1,6624769519813278620), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -1156217459149519162</span><br><span class="line">sequenceNumber -&gt; 33，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -1780575509543362575</span><br><span class="line">sequenceNumber -&gt; 34，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3846349663287424781</span><br><span class="line">sequenceNumber -&gt; 35，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -6332539298434244959</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 37，key-&gt; (4,300655443661245521), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 5387082838317835172</span><br><span class="line">sequenceNumber -&gt; 38，key-&gt; (9,7861014525117262749), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -9122542604915127637</span><br><span class="line">sequenceNumber -&gt; 39，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -227302505361441636</span><br><span class="line">sequenceNumber -&gt; 40，key-&gt; (4,300655443661245521), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7922649361152425018</span><br><span class="line">sequenceNumber -&gt; 41，key-&gt; (5,358240165604482159), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7317582423751248438</span><br><span class="line">sequenceNumber -&gt; 42，key-&gt; (0,-3660045172252280972), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -328975871197147907</span><br><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 44，key-&gt; (7,-1094427646050551581), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 4801112210107529658</span><br><span class="line">sequenceNumber -&gt; 45，key-&gt; (8,8881224827715078628), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6356315545715006682</span><br><span class="line">sequenceNumber -&gt; 46，key-&gt; (2,6656455485638391580), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -7107196345880948914</span><br><span class="line">sequenceNumber -&gt; 47，key-&gt; (6,160286918159499774), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -8739427651217120826</span><br><span class="line">sequenceNumber -&gt; 48，key-&gt; (1,6624769519813278620), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -1156217459149519162</span><br><span class="line">sequenceNumber -&gt; 49，key-&gt; (3,-4529073475644960156), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -6329541255341810188</span><br><span class="line">sequenceNumber -&gt; 50，key-&gt; (5,-8147739948029934462), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -1573247422349659478</span><br><span class="line">sequenceNumber -&gt; 51，key-&gt; (1,-5452898194577942329), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3089621422791274897</span><br><span class="line">sequenceNumber -&gt; 52，key-&gt; (2,2615073161895980616), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3380892025983806981</span><br><span class="line">sequenceNumber -&gt; 53，key-&gt; (2,-6849632269263576984), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 55，key-&gt; (0,2337641240443581856), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -8588877348912160578</span><br><span class="line">sequenceNumber -&gt; 56，key-&gt; (8,-4178514139166246973), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7917094582753434374</span><br><span class="line">sequenceNumber -&gt; 57，key-&gt; (0,8052082081818425113), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4394687097038065501</span><br><span class="line">sequenceNumber -&gt; 58，key-&gt; (1,7579925405939227085), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; -810978710328400623</span><br><span class="line">sequenceNumber -&gt; 59，key-&gt; (0,8105308727850398433), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5251140189951144076</span><br><span class="line">sequenceNumber -&gt; 60，key-&gt; (4,-5185295859586056999), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1799448936150420608</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 63，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4318264364606337424</span><br><span class="line">sequenceNumber -&gt; 64，key-&gt; (1,1500104998893080687), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5928705892222458487</span><br><span class="line">sequenceNumber -&gt; 65，key-&gt; (5,-1018793110018941802), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 4978555998504311137</span><br><span class="line">sequenceNumber -&gt; 66，key-&gt; (9,-2708037046618742102), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 4185830207643971286</span><br><span class="line">sequenceNumber -&gt; 67，key-&gt; (8,8356260898591690767), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8056709699793297362</span><br><span class="line">sequenceNumber -&gt; 68，key-&gt; (1,-5452898194577942329), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -1004674958420378720</span><br><span class="line">sequenceNumber -&gt; 69，key-&gt; (0,-7278244430086253408), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 8124302997183225112</span><br><span class="line">sequenceNumber -&gt; 70，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 5347576024187315055</span><br><span class="line">sequenceNumber -&gt; 71，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 6541352840070592737</span><br><span class="line">sequenceNumber -&gt; 72，key-&gt; (3,1406959166072420180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3656191246660617952</span><br><span class="line">sequenceNumber -&gt; 73，key-&gt; (0,-3728475157919153383), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5138071113563883920</span><br><span class="line">sequenceNumber -&gt; 74，key-&gt; (4,9049862483926656699), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 335682238008025261</span><br><span class="line">sequenceNumber -&gt; 75，key-&gt; (0,-7278244430086253408), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 147913672200092986</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 77，key-&gt; (5,-7361894621669707690), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; 2151354001189111669</span><br><span class="line">sequenceNumber -&gt; 78，key-&gt; (8,-2203809412923262991), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3936942235225713244</span><br><span class="line">sequenceNumber -&gt; 79，key-&gt; (5,-6505213751965926244), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 81，key-&gt; (2,4167920832653664558), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1608623588433602165</span><br><span class="line">sequenceNumber -&gt; 82，key-&gt; (2,1841816909855723911), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 83，key-&gt; (4,-972330344039028842), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3509805453120084345</span><br><span class="line">sequenceNumber -&gt; 84，key-&gt; (8,2824656755364722708), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -5257788714540757740</span><br><span class="line">sequenceNumber -&gt; 85，key-&gt; (3,4825546765402666544), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2391968129098960716</span><br><span class="line">sequenceNumber -&gt; 86，key-&gt; (3,7529185916302791697), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -3918158072347315804</span><br><span class="line">sequenceNumber -&gt; 87，key-&gt; (2,-3348977801879129568), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 1881148083149836831</span><br><span class="line">sequenceNumber -&gt; 88，key-&gt; (2,4013523848884005729), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 89，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 90，key-&gt; (0,8052082081818425113), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 92，key-&gt; (2,2615073161895980616), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -9184374245320825550</span><br><span class="line">sequenceNumber -&gt; 93，key-&gt; (6,-4929214422972869044), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 94，key-&gt; (0,-1119753832294541381), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4659351591347526663</span><br><span class="line">sequenceNumber -&gt; 95，key-&gt; (8,8881224827715078628), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -6356315545715006682</span><br><span class="line">sequenceNumber -&gt; 96，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -7925549160503055693</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 98，key-&gt; (5,-2843916878703362404), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; -7274338587888136170</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 100，key-&gt; (9,-2058923199536498074), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3025392192359206114</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 102，key-&gt; (6,1396773201962230824), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -395580717194806860</span><br><span class="line">sequenceNumber -&gt; 103，key-&gt; (5,2836340277676703640), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6889713077159086526</span><br><span class="line">sequenceNumber -&gt; 104，key-&gt; (5,-5531587458323916081), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -7936623144280934674</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 106，key-&gt; (7,3761238010779910460), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1741046247964567542</span><br><span class="line">sequenceNumber -&gt; 107，key-&gt; (9,-2058923199536498074), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; DELETE, value -&gt; 3025392192359206114</span><br><span class="line">sequenceNumber -&gt; 108，key-&gt; (5,-3150172398625062392), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; 2414372112695353287</span><br><span class="line">sequenceNumber -&gt; 109，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 110，key-&gt; (2,-2517148717059342296), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4871096411802221114</span><br><span class="line">sequenceNumber -&gt; 111，key-&gt; (4,-7429391660457277238), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1403520732423394697</span><br><span class="line">sequenceNumber -&gt; 112，key-&gt; (3,-8204171576376413410), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7128770787287732271</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 114，key-&gt; (0,-2652914563471254026), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 1480495876038550410</span><br><span class="line">sequenceNumber -&gt; 115，key-&gt; (9,2449548613592556649), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -8344888900456274592</span><br><span class="line">sequenceNumber -&gt; 116，key-&gt; (8,-4287211979177213572), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 4860703232778193421</span><br><span class="line">sequenceNumber -&gt; 117，key-&gt; (5,-2279252544212225951), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 2246469721969240119</span><br><span class="line">sequenceNumber -&gt; 118，key-&gt; (4,-680031043215432041), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2631300262004576551</span><br><span class="line">sequenceNumber -&gt; 119，key-&gt; (1,6131719117356614326), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3625174553481934943</span><br><span class="line">sequenceNumber -&gt; 120，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 3846349663287424781</span><br><span class="line">sequenceNumber -&gt; 121，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7807137138863559106</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 123，key-&gt; (4,-2809234249706038955), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2773621620197680128</span><br><span class="line">sequenceNumber -&gt; 124，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -7807137138863559106</span><br><span class="line">sequenceNumber -&gt; 125，key-&gt; (3,2621136369545533468), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3438152369562492786</span><br><span class="line">sequenceNumber -&gt; 126，key-&gt; (0,-7493190883694484629), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -691195151125151453</span><br><span class="line">sequenceNumber -&gt; 127，key-&gt; (8,-1490509224765896290), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1869246074664134885</span><br><span class="line">sequenceNumber -&gt; 128，key-&gt; (9,5511132099839824070), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -6181385120508855967</span><br><span class="line">sequenceNumber -&gt; 129，key-&gt; (9,3381161680610456082), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5229930391996865858</span><br><span class="line">sequenceNumber -&gt; 130，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -227302505361441636</span><br><span class="line">sequenceNumber -&gt; 131，key-&gt; (1,-1992061607722333830), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 740900030264769173</span><br><span class="line">sequenceNumber -&gt; 132，key-&gt; (0,2752227170646411346), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -3727436349553309033</span><br><span class="line">sequenceNumber -&gt; 133，key-&gt; (0,-7493190883694484629), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -691195151125151453</span><br><span class="line">sequenceNumber -&gt; 134，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7278425883508791793</span><br><span class="line">sequenceNumber -&gt; 135，key-&gt; (1,-995426609618169301), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7775193237863598706</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 137，key-&gt; (2,911633586820358694), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7827113035897188605</span><br><span class="line">sequenceNumber -&gt; 138，key-&gt; (2,9211428132443295825), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3254598811000233626</span><br><span class="line">sequenceNumber -&gt; 139，key-&gt; (2,4167920832653664558), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -1608623588433602165</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 141，key-&gt; (3,-8204171576376413410), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1994264609579986073</span><br><span class="line">sequenceNumber -&gt; 142，key-&gt; (3,-6539095021197140424), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; DELETE, value -&gt; 8378366812547696285</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>partition=’2021111109’, bucket=0 的 memTableCapacity 首批达到阈值 20，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br></pre></td></tr></table></figure><p>将 memTable 中的数据按 key,sequenceNumber 排序，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br></pre></td></tr></table></figure><p>再按 key 聚合去重，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br></pre></td></tr></table></figure><h3 id="ManifestFileTest"><a href="#ManifestFileTest" class="headerlink" title="ManifestFileTest"></a>ManifestFileTest</h3><figure class="highlight java"><figcaption><span>ManifestFileTest#testWriteAndReadManifestFile</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestFileTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> ManifestFile&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestFileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ManifestTestDataGenerator gen = ManifestTestDataGenerator.builder().build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadManifestFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一批数据，并拼装返回 List&lt;ManifestEntry&gt;</span></span><br><span class="line">        List&lt;ManifestEntry&gt; entries = generateData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 ManifestFileMeta 对象，用于与真实写入 manifest file 返回的 ManifestFileMeta 做比较</span></span><br><span class="line">        ManifestFileMeta meta = gen.createManifestFileMeta(entries);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ManifestFile ，用于读写 manifest file</span></span><br><span class="line">        ManifestFile manifestFile = createManifestFile(tempDir.toString());</span><br><span class="line">        <span class="comment">// ManifestFile.write() -&gt; ManifestRollingFile.write() -&gt; RollingFile.write() -&gt;</span></span><br><span class="line">        <span class="comment">// ManifestRollingFile.collectFile(Path)， 返回 ManifestFileMeta</span></span><br><span class="line">        List&lt;ManifestFileMeta&gt; actualMetas = manifestFile.write(entries);</span><br><span class="line">        checkRollingFiles(meta, actualMetas, manifestFile.suggestedFileSize());</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestEntry&gt; actualEntries =</span><br><span class="line">                actualMetas.stream()</span><br><span class="line">                        <span class="comment">// ManifestFile.read() -&gt; FileUtils.readListFromFile() 构建 SourceSplit -&gt; BulkFormat.Reader</span></span><br><span class="line">                        .flatMap(m -&gt; manifestFile.read(m.fileName()).stream())</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">        assertThat(actualEntries).isEqualTo(entries);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ManifestEntry&gt; <span class="title">generateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestEntry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            ManifestEntry manifestEntry = gen.next();</span><br><span class="line"></span><br><span class="line">            System.out.println(String.format(<span class="string">"manifestEntry: valueKind -&gt; %s，partition -&gt; %s，bucket -&gt; %s，level -&gt; %s，"</span> +</span><br><span class="line">                            <span class="string">"sst file name -&gt; %s"</span>,</span><br><span class="line">                    manifestEntry.kind().toString(),</span><br><span class="line">                    manifestEntry.partition().getString(<span class="number">0</span>) + <span class="string">""</span> + manifestEntry.partition().getInt(<span class="number">1</span>),</span><br><span class="line">                    manifestEntry.bucket(),</span><br><span class="line">                    manifestEntry.bucket(),</span><br><span class="line">                    manifestEntry.file().fileName()));</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            entries.add(manifestEntry);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entries;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ManifestTestDataGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestTestDataGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> ManifestEntry&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestTestDataGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL_CAPACITY = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;&gt; levels;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstTestDataGenerator gen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;ManifestEntry&gt; bufferedResults;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ManifestEntry <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bufferedResults.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bufferedResults.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成内存对象 sst file Data</span></span><br><span class="line">        SstTestDataGenerator.Data file = gen.next();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">"sst file: partition -&gt; %s，bucket -&gt; %s，level -&gt; %s，"</span> +</span><br><span class="line">                        <span class="string">"sst file name -&gt; %s"</span>,</span><br><span class="line">                file.partition.getString(<span class="number">0</span>) + <span class="string">""</span> + file.partition.getInt(<span class="number">1</span>),</span><br><span class="line">                file.bucket, file.bucket, file.meta.fileName()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// levels List&lt;Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;&gt;，每个元素代表一个 level</span></span><br><span class="line">        <span class="comment">// Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt; ，&lt;partition，List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;</span></span><br><span class="line">        <span class="comment">// List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; ，每一个元素代表一个 bucket</span></span><br><span class="line">        <span class="comment">// List&lt;SstTestDataGenerator.Data&gt; ，代表 bucket 中的 lsm data files</span></span><br><span class="line">        List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; bucketLevels =</span><br><span class="line">                levels.get(file.bucket).computeIfAbsent(file.partition, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        ensureCapacity(bucketLevels, file.meta.level());</span><br><span class="line"></span><br><span class="line">        List&lt;SstTestDataGenerator.Data&gt; level = bucketLevels.get(file.meta.level());</span><br><span class="line">        <span class="comment">// 添加到 bucket 下的 lsm data file list 中</span></span><br><span class="line">        level.add(file);</span><br><span class="line"></span><br><span class="line">        bufferedResults.push(</span><br><span class="line">                <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                        ValueKind.ADD, file.partition, file.bucket, numBuckets, file.meta));</span><br><span class="line">        <span class="comment">// merge level</span></span><br><span class="line">        mergeLevelsIfNeeded(file.partition, file.bucket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bufferedResults.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lsm tree level 文件合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeLevelsIfNeeded</span><span class="params">(BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this method uses a very simple merging strategy just for producing valid data</span></span><br><span class="line">        List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; bucketLevels = levels.get(bucket).get(partition);</span><br><span class="line">        <span class="keyword">int</span> lastModifiedLevel = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// level0 通常会限制 sst file 个数为4</span></span><br><span class="line">        <span class="keyword">while</span> (bucketLevels.get(lastModifiedLevel).size() &gt; LEVEL_CAPACITY) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// remove all sst files in the current and next level</span></span><br><span class="line">            ensureCapacity(bucketLevels, lastModifiedLevel + <span class="number">1</span>);</span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; currentLevel = bucketLevels.get(lastModifiedLevel);</span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; nextLevel = bucketLevels.get(lastModifiedLevel + <span class="number">1</span>);</span><br><span class="line">            List&lt;KeyValue&gt; kvs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : currentLevel) &#123;</span><br><span class="line">                <span class="comment">// ManifestEntry 的 ValueKind 为 DELETE，合并之后将被删除</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                                ValueKind.DELETE, partition, bucket, numBuckets, file.meta));</span><br><span class="line">                <span class="comment">// 将当前 level 下的 sst files 加入 kvs</span></span><br><span class="line">                kvs.addAll(file.content);</span><br><span class="line">            &#125;</span><br><span class="line">            currentLevel.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : nextLevel) &#123;</span><br><span class="line">                <span class="comment">// ManifestEntry 的 ValueKind 为 DELETE，合并之后将被删除</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                                ValueKind.DELETE, partition, bucket, numBuckets, file.meta));</span><br><span class="line">                <span class="comment">// 将 next level 下的 sst files 加入 kvs</span></span><br><span class="line">                kvs.addAll(file.content);</span><br><span class="line">            &#125;</span><br><span class="line">            nextLevel.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add back merged sst files</span></span><br><span class="line">            <span class="comment">// 在 next level 中，为 currentLevel 和 nextLevel 合并好的有序 LinkedList&lt;KeyValues&gt; 创建 sst file</span></span><br><span class="line">            <span class="comment">// 根据 key,sequenceNumber 进行排序，按 key 聚合去重</span></span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; merged =</span><br><span class="line">                    gen.createSstFiles(kvs, lastModifiedLevel + <span class="number">1</span>, partition, bucket);</span><br><span class="line">            <span class="comment">// 新创建的 sst files 加入到 next level</span></span><br><span class="line">            nextLevel.addAll(merged);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : nextLevel) &#123;</span><br><span class="line">                <span class="comment">// 遍历 next level 中的 sst files ，生成一个新的 List&lt;ManifestEntry&gt;</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(ValueKind.ADD, partition, bucket, numBuckets, file.meta));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastModifiedLevel += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ManifestFileMeta <span class="title">createManifestFileMeta</span><span class="params">(List&lt;ManifestEntry&gt; entries)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(</span><br><span class="line">                !entries.isEmpty(), <span class="string">"Manifest entries are empty. Invalid test data."</span>);</span><br><span class="line"></span><br><span class="line">        FieldStatsCollector collector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.PARTITION_TYPE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> numAddedFiles = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> numDeletedFiles = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ManifestEntry entry : entries) &#123;</span><br><span class="line">            collector.collect(entry.partition());</span><br><span class="line">            <span class="keyword">if</span> (entry.kind() == ValueKind.ADD) &#123;</span><br><span class="line">                numAddedFiles++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                numDeletedFiles++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestFileMeta(</span><br><span class="line">                <span class="string">"manifest-"</span> + UUID.randomUUID(),</span><br><span class="line">                entries.size() * <span class="number">100L</span>,</span><br><span class="line">                numAddedFiles,</span><br><span class="line">                numDeletedFiles,</span><br><span class="line">                collector.extract());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManifestFile <span class="title">createManifestFile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory =</span><br><span class="line">                <span class="keyword">new</span> FileStorePathFactory(</span><br><span class="line">                        <span class="keyword">new</span> Path(path), TestKeyValueGenerator.PARTITION_TYPE, <span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">int</span> suggestedFileSize = ThreadLocalRandom.current().nextInt(<span class="number">8192</span>) + <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestFile.Factory(</span><br><span class="line">                        TestKeyValueGenerator.PARTITION_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.ROW_TYPE,</span><br><span class="line">                        avro,</span><br><span class="line">                        pathFactory,</span><br><span class="line">                        suggestedFileSize)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sst files：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-40dab8b8-a7c0-4707-9743-b3a91c2d12f7</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-1e8deb99-9685-48e9-99c2-162db58b68b2</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">sst file: partition -&gt; 202111118，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-4d10b7c1-d152-46d4-b9ca-4516e8c44b90</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-23feaaf4-5e2a-42b3-95b9-c2383c6125f7</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48 // lsm files &gt; 3</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-0dc375a6-4819-4f2d-ab9e-8db87f9567f8</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-8c7b1c56-91f1-40bc-aeda-d00b181c919e</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-242a0b57-a2b0-4008-bb94-489d30c81f74</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-15609d8a-de66-4628-b8c9-bee68ba7c9ae</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-60666da9-27ef-4169-871b-34426c78fb30</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-fa182845-ed32-461c-b5f4-911fd625c9e6</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f // lsm files &gt; 3</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-90b8d42a-5fd7-4a23-9af4-0c449b543a57</span><br><span class="line">sst file: partition -&gt; 202111118，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-83fdee55-99f8-4306-a24c-6a67f2cd7c8a</span><br></pre></td></tr></table></figure><p>manifestEntry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-40dab8b8-a7c0-4707-9743-b3a91c2d12f7</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-1e8deb99-9685-48e9-99c2-162db58b68b2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111118，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-4d10b7c1-d152-46d4-b9ca-4516e8c44b90</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-23feaaf4-5e2a-42b3-95b9-c2383c6125f7</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line"></span><br><span class="line">// 1. 生成 sst-cf014187-3a62-48ca-bac3-26e9d899cc48 之后，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1 的 lsm files &gt; 3 ，压栈</span><br><span class="line">// 2. 依次标记删除当前 level 层的 lsm file</span><br><span class="line">// 3. merge 生成一个新的 lsm file sst-b8c363dd-d918-4425-ae31-449d76d3e4a3</span><br><span class="line">// 经过以上3步，出栈的顺序如下：</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-b8c363dd-d918-4425-ae31-449d76d3e4a3</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-0dc375a6-4819-4f2d-ab9e-8db87f9567f8</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-8c7b1c56-91f1-40bc-aeda-d00b181c919e</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-242a0b57-a2b0-4008-bb94-489d30c81f74</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-15609d8a-de66-4628-b8c9-bee68ba7c9ae</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-60666da9-27ef-4169-871b-34426c78fb30</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-fa182845-ed32-461c-b5f4-911fd625c9e6</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-592e5b47-844b-4c49-8ffe-8e183560dbe5</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-90b8d42a-5fd7-4a23-9af4-0c449b543a57</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111118，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-83fdee55-99f8-4306-a24c-6a67f2cd7c8a</span><br></pre></td></tr></table></figure><h3 id="ManifestListTest"><a href="#ManifestListTest" class="headerlink" title="ManifestListTest"></a>ManifestListTest</h3><figure class="highlight java"><figcaption><span>ManifestListTest#testWriteAndReadManifestList</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestListTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> ManifestList&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestListTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ManifestTestDataGenerator gen = ManifestTestDataGenerator.builder().build();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadManifestList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 生成 kv 数据 -&gt; 组装 ManifestEntry 生成 ManifestFileMeta -&gt; 返回 ManifestFileMeta list</span></span><br><span class="line">        List&lt;ManifestFileMeta&gt; metas = generateData();</span><br><span class="line"></span><br><span class="line">        ManifestList manifestList = createManifestList(tempDir.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依次序列化写入 ManifestFileMeta</span></span><br><span class="line">        String manifestListName = manifestList.write(metas);</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestFileMeta&gt; actualMetas = manifestList.read(manifestListName);</span><br><span class="line">        assertThat(actualMetas).isEqualTo(metas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ManifestFileMeta&gt; <span class="title">generateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        List&lt;ManifestFileMeta&gt; metas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            List&lt;ManifestEntry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = random.nextInt(<span class="number">10</span>) + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                entries.add(gen.next());</span><br><span class="line">            &#125;</span><br><span class="line">            metas.add(gen.createManifestFileMeta(entries));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManifestList <span class="title">createManifestList</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory =</span><br><span class="line">                <span class="keyword">new</span> FileStorePathFactory(</span><br><span class="line">                        <span class="keyword">new</span> Path(path), TestKeyValueGenerator.PARTITION_TYPE, <span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestList.Factory(TestKeyValueGenerator.PARTITION_TYPE, avro, pathFactory)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IntervalPartitionTest"><a href="#IntervalPartitionTest" class="headerlink" title="IntervalPartitionTest"></a>IntervalPartitionTest</h3><figure class="highlight java"><figcaption><span>IntervalPartitionTest.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/IntervalPartitionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> IntervalPartition&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalPartitionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSameMinKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[100, 200], [100, 400], [100, 300], [100, 500]"</span>, </span><br><span class="line">                <span class="comment">// 输出    </span></span><br><span class="line">                <span class="string">"[100, 200] | [100, 300] | [100, 400] | [100, 500]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSameMaxKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[100, 500], [300, 500], [200, 500], [400, 500]"</span>,</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                <span class="string">"[100, 500] | [200, 500] | [300, 500] | [400, 500]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSectionPartitioning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0    5    10   15   20   25   30</span></span><br><span class="line">        <span class="comment">// |--------|</span></span><br><span class="line">        <span class="comment">//      |-|</span></span><br><span class="line">        <span class="comment">//          |-----|</span></span><br><span class="line">        <span class="comment">//                 |-----|</span></span><br><span class="line">        <span class="comment">//                 |-----------|</span></span><br><span class="line">        <span class="comment">//                         |-------|</span></span><br><span class="line">        <span class="comment">// 0    5    10   15   20   25   30</span></span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[0, 9], [5, 7], [9, 15], [16, 22], [16, 28], [24, 32]"</span>,</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                <span class="string">"[0, 9] | [5, 7], [9, 15]\n[16, 22], [24, 32] | [16, 28]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * p=p0/bucket-0/[0,9]</span></span><br><span class="line"><span class="comment">         *     /bucket-1/[5-7] [9-15]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * p=p1/bucket-0/[16,22] [24,32]</span></span><br><span class="line"><span class="comment">         *     /bucket-1/[16,28]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>IntervalPartition.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/compact/IntervalPartition.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Algorithm to partition several sst files into the minimum number of &#123;<span class="doctag">@link</span> SortedRun&#125;s. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalPartition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntervalPartition</span><span class="params">(List&lt;SstFileMeta&gt; inputFiles, Comparator&lt;RowData&gt; keyComparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.files = <span class="keyword">new</span> ArrayList&lt;&gt;(inputFiles);</span><br><span class="line">        <span class="comment">// 输入的 sst file metas 依次按照 minKey 、maxKey 排序</span></span><br><span class="line">        <span class="keyword">this</span>.files.sort(</span><br><span class="line">                (o1, o2) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">int</span> leftResult = keyComparator.compare(o1.minKey(), o2.minKey());</span><br><span class="line">                    <span class="keyword">return</span> leftResult == <span class="number">0</span></span><br><span class="line">                            ? keyComparator.compare(o1.maxKey(), o2.maxKey())</span><br><span class="line">                            : leftResult;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">this</span>.keyComparator = keyComparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;SortedRun&gt;&gt; partition() &#123;</span><br><span class="line">        List&lt;List&lt;SortedRun&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; section = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        BinaryRowData bound = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SstFileMeta meta : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!section.isEmpty() &amp;&amp; keyComparator.compare(meta.minKey(), bound) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// larger than current right bound, conclude current section and create a new one</span></span><br><span class="line">                <span class="comment">// [16,22] 的 mingKey 大于 bound，即 [9,15] ，将之前输入的 [0,9]、[5,7]、[9,15] 聚合在一个 partition 下</span></span><br><span class="line">                result.add(partition(section));</span><br><span class="line">                section.clear();</span><br><span class="line">                bound = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            section.add(meta);</span><br><span class="line">            <span class="keyword">if</span> (bound == <span class="keyword">null</span> || keyComparator.compare(meta.maxKey(), bound) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// update right bound</span></span><br><span class="line">                bound = meta.maxKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!section.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// conclude last section</span></span><br><span class="line">            result.add(partition(section));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SortedRun&gt; <span class="title">partition</span><span class="params">(List&lt;SstFileMeta&gt; metas)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 优先级队列，maxKey 小的排在队列前面</span></span><br><span class="line">        PriorityQueue&lt;List&lt;SstFileMeta&gt;&gt; queue =</span><br><span class="line">                <span class="keyword">new</span> PriorityQueue&lt;&gt;(</span><br><span class="line">                        (o1, o2) -&gt;</span><br><span class="line">                                <span class="comment">// sort by max key of the last sst file</span></span><br><span class="line">                                keyComparator.compare(</span><br><span class="line">                                        o1.get(o1.size() - <span class="number">1</span>).maxKey(),</span><br><span class="line">                                        o2.get(o2.size() - <span class="number">1</span>).maxKey()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [0,9]、[5,7]、[9,15]</span></span><br><span class="line">        <span class="comment">// create the initial partition</span></span><br><span class="line">        List&lt;SstFileMeta&gt; firstRun = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        firstRun.add(metas.get(<span class="number">0</span>));</span><br><span class="line">        queue.add(firstRun);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; metas.size(); i++) &#123;</span><br><span class="line">            SstFileMeta meta = metas.get(i);</span><br><span class="line">            <span class="comment">// any file list whose max key &lt; meta.minKey() is sufficient,</span></span><br><span class="line">            <span class="comment">// for convenience we pick the smallest</span></span><br><span class="line">            List&lt;SstFileMeta&gt; top = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (keyComparator.compare(meta.minKey(), top.get(top.size() - <span class="number">1</span>).maxKey()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// append current file to an existing partition</span></span><br><span class="line">                <span class="comment">// [9,15] 的 minKey = 9 &gt; [5,7] 的 maxKey = 7</span></span><br><span class="line">                top.add(meta);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// [5,7] 的 minKey = 7 &lt; [0,9] 的 maxKey</span></span><br><span class="line">                <span class="comment">// create a new partition ，我理解为一个新的 bucket</span></span><br><span class="line">                List&lt;SstFileMeta&gt; newRun = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                newRun.add(meta);</span><br><span class="line">                queue.add(newRun);</span><br><span class="line">            &#125;</span><br><span class="line">            queue.add(top);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// order between partitions does not matter</span></span><br><span class="line">        <span class="keyword">return</span> queue.stream().map(SortedRun::fromSorted).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UniversalCompactionTest"><a href="#UniversalCompactionTest" class="headerlink" title="UniversalCompactionTest"></a>UniversalCompactionTest</h3><ul><li>testSizeAmplification</li></ul><figure class="highlight java"><figcaption><span>UniversalCompactionTest#testSizeAmplification</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/UniversalCompactionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Test for &#123;<span class="doctag">@link</span> UniversalCompaction&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniversalCompactionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSizeAmplification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UniversalCompaction compaction = <span class="keyword">new</span> UniversalCompaction(<span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span>[] sizes = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 满足条件的，CompactionUnit != null，返回 files 的 totalSize 之和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1&#125; 1*100 &gt; 25*1 ，CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,2&#125; 1*100 &gt; 25*2 ，CompactionUnit != null 返回 &#123;1,2&#125; -&gt; &#123;3&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,3&#125; 1*100 &gt; 25*3 ，CompactionUnit != null 返回 &#123;1,3&#125; -&gt; &#123;4&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,4&#125; 1*100 = 25*4 ，CompactionUnit == null ， &#123;1,4&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,4&#125; 2*100 &gt; 25*4 ，CompactionUnit != null 返回 &#123;1,1,4&#125; -&gt; &#123;6&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">6</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,6&#125; 1*100 &lt; 25*6 ，CompactionUnit == null ， &#123;1,6&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">6</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,6&#125; 2*100 &gt; 25*6 ，CompactionUnit != null 返回 &#123;1,1,6&#125; -&gt; &#123;8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,8&#125; 1*100 &lt; 25*8 ，CompactionUnit == null ， &#123;1,8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,8&#125; 2*100 = 25*8 ，CompactionUnit == null ， &#123;1,1,8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,8&#125; 3*100 &gt; 25*8 ，CompactionUnit != null 返回 &#123;1,1,1,8&#125; -&gt; &#123;11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,11&#125; 1*100 &lt; 25*11 ，CompactionUnit == null ， &#123;1,11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,11&#125; 2*100 &lt; 25*11 ，CompactionUnit == null ， &#123;1,1,11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,11&#125; 3*100 &gt; 25*11 ，CompactionUnit != null 返回 &#123;1,1,1,11&#125; -&gt; &#123;14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,14&#125; 1*100 &lt; 25*14 ，CompactionUnit == null ， &#123;1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,14&#125; 2*100 &lt; 25*14 ，CompactionUnit != null ， &#123;1,1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,14&#125; 3*100 &lt; 25*14 ，CompactionUnit == null ， &#123;1,1,1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,1,14&#125; 4*100 &gt; 25*14 ，CompactionUnit != null 返回 &#123;1,1,1,1,14&#125; -&gt; &#123;18&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">18</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testSizeRatio</li></ul><figure class="highlight java"><figcaption><span>UniversalCompactionTest#testSizeRatio</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/UniversalCompactionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Test for &#123;<span class="doctag">@link</span> UniversalCompaction&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniversalCompactionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSizeRatio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UniversalCompaction compaction = <span class="keyword">new</span> UniversalCompaction(<span class="number">25</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">long</span>[] sizes = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 满足条件的，CompactionUnit != null，返回 files 的 totalSize 之和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,1&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// CompactionUnit !=null 返回 &#123;1,1,1,1,1&#125; -&gt; &#123;5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 2 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ， &#123;1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &lt; 5 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1,1&#125; -&gt; &#123;4&#125; ，&#123;4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &lt; 1 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1&#125; -&gt; &#123;3&#125; ，&#123;3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &lt; 1 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125; ，&#123;2,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,2,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &lt; 2 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,2,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,2,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 4</span></span><br><span class="line">        <span class="comment">// 5*(100+1)/100 &gt; 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,2,3,4,5&#125; -&gt; &#123;16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 2 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &lt; 16</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1,1&#125; -&gt; &#123;4&#125; ，&#123;4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &lt; 4</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1&#125; -&gt; &#123;3&#125; ，&#123;3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &lt; 3 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125; ，&#123;2,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,2,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &lt; 2 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,2,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,2,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 4</span></span><br><span class="line">        <span class="comment">// 5*(100+1)/100 &lt; 16 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,2,3,4&#125; -&gt; &#123;11&#125; ，&#123;11,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">11</span>, <span class="number">16</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MergeTreeTest"><a href="#MergeTreeTest" class="headerlink" title="MergeTreeTest"></a>MergeTreeTest</h3><figure class="highlight java"><figcaption><span>MergeTreeTest#testWriteAndRead</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/MergeTreeTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> MergeTreeReader&#125; and &#123;<span class="doctag">@link</span> MergeTreeWriter&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTreeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TempDir</span> java.nio.file.Path tempDir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService service;</span><br><span class="line">    <span class="keyword">private</span> FileStorePathFactory pathFactory;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;RowData&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MergeTreeOptions options;</span><br><span class="line">    <span class="keyword">private</span> SstFileReader sstFileReader;</span><br><span class="line">    <span class="keyword">private</span> SstFileWriter sstFileWriter;</span><br><span class="line">    <span class="keyword">private</span> RecordWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service = Executors.newSingleThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.shutdownNow();</span><br><span class="line">        service = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        pathFactory = <span class="keyword">new</span> FileStorePathFactory(<span class="keyword">new</span> Path(tempDir.toString()));</span><br><span class="line">        comparator = Comparator.comparingInt(o -&gt; o.getInt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MergeTree</span></span><br><span class="line">        recreateMergeTree(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 bucket dir</span></span><br><span class="line">        Path bucketDir = sstFileWriter.pathFactory().toPath(<span class="string">"ignore"</span>).getParent();</span><br><span class="line">        bucketDir.getFileSystem().mkdirs(bucketDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateMergeTree</span><span class="params">(<span class="keyword">long</span> targetFileSize)</span> </span>&#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        configuration.set(MergeTreeOptions.WRITE_BUFFER_SIZE, <span class="keyword">new</span> MemorySize(<span class="number">4096</span> * <span class="number">3</span>));</span><br><span class="line">        configuration.set(MergeTreeOptions.PAGE_SIZE, <span class="keyword">new</span> MemorySize(<span class="number">4096</span>));</span><br><span class="line">        configuration.set(MergeTreeOptions.TARGET_FILE_SIZE, <span class="keyword">new</span> MemorySize(targetFileSize));</span><br><span class="line">        options = <span class="keyword">new</span> MergeTreeOptions(configuration);</span><br><span class="line">        RowType keyType = <span class="keyword">new</span> RowType(singletonList(<span class="keyword">new</span> RowType.RowField(<span class="string">"k"</span>, <span class="keyword">new</span> IntType())));</span><br><span class="line">        RowType valueType = <span class="keyword">new</span> RowType(singletonList(<span class="keyword">new</span> RowType.RowField(<span class="string">"v"</span>, <span class="keyword">new</span> IntType())));</span><br><span class="line">        FileFormat flushingAvro = <span class="keyword">new</span> FlushingFileFormat(<span class="string">"avro"</span>);</span><br><span class="line"></span><br><span class="line">        sstFileReader =</span><br><span class="line">                <span class="keyword">new</span> SstFileReader.Factory(keyType, valueType, flushingAvro, pathFactory)</span><br><span class="line">                        .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">        sstFileWriter =</span><br><span class="line">                <span class="keyword">new</span> SstFileWriter.Factory(</span><br><span class="line">                                keyType,</span><br><span class="line">                                valueType,</span><br><span class="line">                                flushingAvro,</span><br><span class="line">                                pathFactory,</span><br><span class="line">                                options.targetFileSize)</span><br><span class="line">                        .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">        writer = createMergeTreeWriter(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MergeTreeWriter <span class="title">createMergeTreeWriter</span><span class="params">(List&lt;SstFileMeta&gt; files)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始为 -1</span></span><br><span class="line">        <span class="keyword">long</span> maxSequenceNumber =</span><br><span class="line">                files.stream().map(SstFileMeta::maxSequenceNumber).max(Long::compare).orElse(-<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MergeTreeWriter(</span><br><span class="line">                <span class="keyword">new</span> SortBufferMemTable(</span><br><span class="line">                        sstFileWriter.keyType(),</span><br><span class="line">                        sstFileWriter.valueType(),</span><br><span class="line">                        options.writeBufferSize,</span><br><span class="line">                        options.pageSize),</span><br><span class="line">                createCompactManager(sstFileWriter, service),</span><br><span class="line">                <span class="comment">// stores all level files of merge tree</span></span><br><span class="line">                <span class="keyword">new</span> Levels(comparator, files, options.numLevels),</span><br><span class="line">                maxSequenceNumber,</span><br><span class="line">                comparator,</span><br><span class="line">                <span class="comment">// where key is primary key (unique) and value is the full record, only keep the latest one.</span></span><br><span class="line">                <span class="keyword">new</span> DeduplicateAccumulator(),</span><br><span class="line">                sstFileWriter,</span><br><span class="line">                <span class="comment">// 提交之后，强制执行 compact</span></span><br><span class="line">                options.commitForceCompact);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompactManager <span class="title">createCompactManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SstFileWriter sstFileWriter, ExecutorService compactExecutor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建压缩策略</span></span><br><span class="line">        CompactStrategy compactStrategy =</span><br><span class="line">                <span class="keyword">new</span> UniversalCompaction(</span><br><span class="line">                        options.maxSizeAmplificationPercent,</span><br><span class="line">                        options.sizeRatio,</span><br><span class="line">                        options.numSortedRunMax);</span><br><span class="line">        CompactManager.Rewriter rewriter =</span><br><span class="line">                (outputLevel, dropDelete, sections) -&gt;</span><br><span class="line">                        sstFileWriter.write(</span><br><span class="line">                                <span class="keyword">new</span> RecordReaderIterator(</span><br><span class="line">                                        <span class="keyword">new</span> MergeTreeReader(</span><br><span class="line">                                                sections,</span><br><span class="line">                                                dropDelete,</span><br><span class="line">                                                sstFileReader,</span><br><span class="line">                                                comparator,</span><br><span class="line">                                                <span class="keyword">new</span> DeduplicateAccumulator())),</span><br><span class="line">                                outputLevel);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompactManager(</span><br><span class="line">                compactExecutor, compactStrategy, comparator, options.targetFileSize, rewriter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一批 200 条数据</span></span><br><span class="line">    <span class="keyword">int</span> batchNumber = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> perBatch = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;TestRecord&gt; expected = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; newFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; newFileNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; compactedFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ================================ 测试写入 ================================</span></span><br><span class="line">        <span class="comment">// write batch and commit</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= batchNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; batchNumber) &#123;</span><br><span class="line">                expected.addAll(writeBatch(perBatch));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writer.sync();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 所有数据都写入之后，接着执行 prepareCommit ，内部会再次执行 flush() ，返回增量 new files</span></span><br><span class="line">            Increment increment = writer.prepareCommit();</span><br><span class="line">            newFiles.addAll(increment.newFiles());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行合并，用于断言</span></span><br><span class="line">            mergeCompacted(newFileNames, compactedFiles, increment);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// ================================ 测试读取 ================================</span></span><br><span class="line">        <span class="comment">// assert records from writer</span></span><br><span class="line">        assertRecords(expected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assert records from increment new files</span></span><br><span class="line">        assertRecords(expected, newFiles, <span class="keyword">false</span>);</span><br><span class="line">        assertRecords(expected, newFiles, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assert records from increment compacted files</span></span><br><span class="line">        assertRecords(expected, compactedFiles, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空目录下创建的一些文件</span></span><br><span class="line">        Path bucketDir = sstFileWriter.pathFactory().toPath(<span class="string">"ignore"</span>).getParent();</span><br><span class="line">        Set&lt;String&gt; files =</span><br><span class="line">                Arrays.stream(bucketDir.getFileSystem().listStatus(bucketDir))</span><br><span class="line">                        .map(FileStatus::getPath)</span><br><span class="line">                        .map(Path::getName)</span><br><span class="line">                        .collect(Collectors.toSet());</span><br><span class="line">        newFiles.stream().map(SstFileMeta::fileName).forEach(files::remove);</span><br><span class="line">        compactedFiles.stream().map(SstFileMeta::fileName).forEach(files::remove);</span><br><span class="line">        assertThat(files).isEqualTo(Collections.emptySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">writeBatch</span><span class="params">(<span class="keyword">int</span> perBatch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 随机生成一批数据</span></span><br><span class="line">        List&lt;TestRecord&gt; records = generateRandom(perBatch);</span><br><span class="line">        writeAll(records);</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">generateRandom</span><span class="params">(<span class="keyword">int</span> perBatch)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        List&lt;TestRecord&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;(perBatch);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; perBatch; i++) &#123;</span><br><span class="line">            records.add(</span><br><span class="line">                    <span class="keyword">new</span> TestRecord(</span><br><span class="line">                            random.nextBoolean() ? ValueKind.ADD : ValueKind.DELETE,</span><br><span class="line">                            random.nextInt(perBatch / <span class="number">2</span>),</span><br><span class="line">                            random.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 MergeTree.write() 写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeAll</span><span class="params">(List&lt;TestRecord&gt; records)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TestRecord record : records) &#123;</span><br><span class="line">            <span class="comment">// 通过 MergeTreeWriter 逐个写入</span></span><br><span class="line">            writer.write(record.kind, row(record.k), row(record.v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据，验证写入是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertRecords</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;TestRecord&gt; expected, List&lt;SstFileMeta&gt; files, <span class="keyword">boolean</span> dropDelete)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertThat(readAll(files, dropDelete)).isEqualTo(compactAndSort(expected, dropDelete));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取 List&lt;SstFileMeta&gt; files ，转换成 List&lt;TestRecord&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">readAll</span><span class="params">(List&lt;SstFileMeta&gt; files, <span class="keyword">boolean</span> dropDelete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        RecordReader reader =</span><br><span class="line">                <span class="keyword">new</span> MergeTreeReader(</span><br><span class="line">                        <span class="keyword">new</span> IntervalPartition(files, comparator).partition(),</span><br><span class="line">                        dropDelete,</span><br><span class="line">                        sstFileReader,</span><br><span class="line">                        comparator,</span><br><span class="line">                        <span class="keyword">new</span> DeduplicateAccumulator());</span><br><span class="line"></span><br><span class="line">        List&lt;TestRecord&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (RecordReaderIterator iterator = <span class="keyword">new</span> RecordReaderIterator(reader)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                KeyValue kv = iterator.next();</span><br><span class="line">                records.add(</span><br><span class="line">                        <span class="keyword">new</span> TestRecord(kv.valueKind(), kv.key().getInt(<span class="number">0</span>), kv.value().getInt(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ValueKind kind;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">TestRecord</span><span class="params">(ValueKind kind, <span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kind = kind;</span><br><span class="line">            <span class="keyword">this</span>.k = k;</span><br><span class="line">            <span class="keyword">this</span>.v = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TestRecord that = (TestRecord) o;</span><br><span class="line">            <span class="keyword">return</span> k == that.k &amp;&amp; v == that.v &amp;&amp; kind == that.kind;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"TestRecord&#123;"</span> + <span class="string">"kind="</span> + kind + <span class="string">", k="</span> + k + <span class="string">", v="</span> + v + <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例产生200条一批数据，到 sequenceNumber = 186 时，写 memTable 失败执行第一次 flush ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 0, ValueKind -&gt; ADD, key -&gt; +I(79), value -&gt; +I(-1282339797)</span><br><span class="line">sequenceNumber -&gt; 1, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(1179918470)</span><br><span class="line">sequenceNumber -&gt; 2, ValueKind -&gt; DELETE, key -&gt; +I(27), value -&gt; +I(-1398930820)</span><br><span class="line">sequenceNumber -&gt; 3, ValueKind -&gt; DELETE, key -&gt; +I(48), value -&gt; +I(-1816730153)</span><br><span class="line">sequenceNumber -&gt; 4, ValueKind -&gt; DELETE, key -&gt; +I(46), value -&gt; +I(-2008842454)</span><br><span class="line">sequenceNumber -&gt; 5, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(65480438)</span><br><span class="line">sequenceNumber -&gt; 6, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(791928228)</span><br><span class="line">sequenceNumber -&gt; 7, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(2011579993)</span><br><span class="line">sequenceNumber -&gt; 8, ValueKind -&gt; ADD, key -&gt; +I(31), value -&gt; +I(-2035056816)</span><br><span class="line">sequenceNumber -&gt; 9, ValueKind -&gt; ADD, key -&gt; +I(16), value -&gt; +I(607711095)</span><br><span class="line">sequenceNumber -&gt; 10, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1623789565)</span><br><span class="line">sequenceNumber -&gt; 11, ValueKind -&gt; ADD, key -&gt; +I(8), value -&gt; +I(-432617120)</span><br><span class="line">sequenceNumber -&gt; 12, ValueKind -&gt; ADD, key -&gt; +I(4), value -&gt; +I(418530737)</span><br><span class="line">sequenceNumber -&gt; 13, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(-945438846)</span><br><span class="line">sequenceNumber -&gt; 14, ValueKind -&gt; DELETE, key -&gt; +I(45), value -&gt; +I(1561651582)</span><br><span class="line">sequenceNumber -&gt; 15, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(-1087187082)</span><br><span class="line">sequenceNumber -&gt; 16, ValueKind -&gt; ADD, key -&gt; +I(95), value -&gt; +I(2007713649)</span><br><span class="line">sequenceNumber -&gt; 17, ValueKind -&gt; DELETE, key -&gt; +I(51), value -&gt; +I(-963275986)</span><br><span class="line">sequenceNumber -&gt; 18, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(1588442994)</span><br><span class="line">sequenceNumber -&gt; 19, ValueKind -&gt; ADD, key -&gt; +I(12), value -&gt; +I(-281565984)</span><br><span class="line">sequenceNumber -&gt; 20, ValueKind -&gt; ADD, key -&gt; +I(99), value -&gt; +I(303373668)</span><br><span class="line">sequenceNumber -&gt; 21, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-667201927)</span><br><span class="line">sequenceNumber -&gt; 22, ValueKind -&gt; ADD, key -&gt; +I(54), value -&gt; +I(-13136015)</span><br><span class="line">sequenceNumber -&gt; 23, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(977320072)</span><br><span class="line">sequenceNumber -&gt; 24, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(-111372055)</span><br><span class="line">sequenceNumber -&gt; 25, ValueKind -&gt; DELETE, key -&gt; +I(98), value -&gt; +I(-1109725994)</span><br><span class="line">sequenceNumber -&gt; 26, ValueKind -&gt; ADD, key -&gt; +I(46), value -&gt; +I(-1950499520)</span><br><span class="line">sequenceNumber -&gt; 27, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(-1088651475)</span><br><span class="line">sequenceNumber -&gt; 28, ValueKind -&gt; DELETE, key -&gt; +I(54), value -&gt; +I(557220361)</span><br><span class="line">sequenceNumber -&gt; 29, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1736811783)</span><br><span class="line">sequenceNumber -&gt; 30, ValueKind -&gt; DELETE, key -&gt; +I(73), value -&gt; +I(1575145486)</span><br><span class="line">sequenceNumber -&gt; 31, ValueKind -&gt; DELETE, key -&gt; +I(27), value -&gt; +I(-1649396023)</span><br><span class="line">sequenceNumber -&gt; 32, ValueKind -&gt; DELETE, key -&gt; +I(40), value -&gt; +I(-597968181)</span><br><span class="line">sequenceNumber -&gt; 33, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(1162929887)</span><br><span class="line">sequenceNumber -&gt; 34, ValueKind -&gt; ADD, key -&gt; +I(70), value -&gt; +I(-991165706)</span><br><span class="line">sequenceNumber -&gt; 35, ValueKind -&gt; DELETE, key -&gt; +I(81), value -&gt; +I(417316419)</span><br><span class="line">sequenceNumber -&gt; 36, ValueKind -&gt; DELETE, key -&gt; +I(37), value -&gt; +I(1764148187)</span><br><span class="line">sequenceNumber -&gt; 37, ValueKind -&gt; ADD, key -&gt; +I(34), value -&gt; +I(-1127910879)</span><br><span class="line">sequenceNumber -&gt; 38, ValueKind -&gt; ADD, key -&gt; +I(77), value -&gt; +I(-520815433)</span><br><span class="line">sequenceNumber -&gt; 39, ValueKind -&gt; ADD, key -&gt; +I(18), value -&gt; +I(2051544406)</span><br><span class="line">sequenceNumber -&gt; 40, ValueKind -&gt; ADD, key -&gt; +I(21), value -&gt; +I(-107422117)</span><br><span class="line">sequenceNumber -&gt; 41, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(1788072570)</span><br><span class="line">sequenceNumber -&gt; 42, ValueKind -&gt; ADD, key -&gt; +I(67), value -&gt; +I(-1262468430)</span><br><span class="line">sequenceNumber -&gt; 43, ValueKind -&gt; DELETE, key -&gt; +I(9), value -&gt; +I(-863921982)</span><br><span class="line">sequenceNumber -&gt; 44, ValueKind -&gt; ADD, key -&gt; +I(77), value -&gt; +I(-268941560)</span><br><span class="line">sequenceNumber -&gt; 45, ValueKind -&gt; DELETE, key -&gt; +I(39), value -&gt; +I(705039510)</span><br><span class="line">sequenceNumber -&gt; 46, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(858389285)</span><br><span class="line">sequenceNumber -&gt; 47, ValueKind -&gt; DELETE, key -&gt; +I(22), value -&gt; +I(475088561)</span><br><span class="line">sequenceNumber -&gt; 48, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(390088338)</span><br><span class="line">sequenceNumber -&gt; 49, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(-1991355107)</span><br><span class="line">sequenceNumber -&gt; 50, ValueKind -&gt; DELETE, key -&gt; +I(21), value -&gt; +I(-1391469913)</span><br><span class="line">sequenceNumber -&gt; 51, ValueKind -&gt; ADD, key -&gt; +I(27), value -&gt; +I(-1840343188)</span><br><span class="line">sequenceNumber -&gt; 52, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(838800181)</span><br><span class="line">sequenceNumber -&gt; 53, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(-1455750144)</span><br><span class="line">sequenceNumber -&gt; 54, ValueKind -&gt; DELETE, key -&gt; +I(44), value -&gt; +I(1590319332)</span><br><span class="line">sequenceNumber -&gt; 55, ValueKind -&gt; ADD, key -&gt; +I(12), value -&gt; +I(558741055)</span><br><span class="line">sequenceNumber -&gt; 56, ValueKind -&gt; DELETE, key -&gt; +I(17), value -&gt; +I(339525532)</span><br><span class="line">sequenceNumber -&gt; 57, ValueKind -&gt; ADD, key -&gt; +I(8), value -&gt; +I(485877251)</span><br><span class="line">sequenceNumber -&gt; 58, ValueKind -&gt; DELETE, key -&gt; +I(65), value -&gt; +I(-1470592871)</span><br><span class="line">sequenceNumber -&gt; 59, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(1251223210)</span><br><span class="line">sequenceNumber -&gt; 60, ValueKind -&gt; DELETE, key -&gt; +I(84), value -&gt; +I(-1696484617)</span><br><span class="line">sequenceNumber -&gt; 61, ValueKind -&gt; DELETE, key -&gt; +I(10), value -&gt; +I(-1501259636)</span><br><span class="line">sequenceNumber -&gt; 62, ValueKind -&gt; ADD, key -&gt; +I(41), value -&gt; +I(-866046253)</span><br><span class="line">sequenceNumber -&gt; 63, ValueKind -&gt; DELETE, key -&gt; +I(69), value -&gt; +I(868229578)</span><br><span class="line">sequenceNumber -&gt; 64, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(-1375050149)</span><br><span class="line">sequenceNumber -&gt; 65, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(1250941867)</span><br><span class="line">sequenceNumber -&gt; 66, ValueKind -&gt; ADD, key -&gt; +I(67), value -&gt; +I(-1754729116)</span><br><span class="line">sequenceNumber -&gt; 67, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(-476497914)</span><br><span class="line">sequenceNumber -&gt; 68, ValueKind -&gt; DELETE, key -&gt; +I(75), value -&gt; +I(1225352026)</span><br><span class="line">sequenceNumber -&gt; 69, ValueKind -&gt; DELETE, key -&gt; +I(57), value -&gt; +I(-1630271894)</span><br><span class="line">sequenceNumber -&gt; 70, ValueKind -&gt; ADD, key -&gt; +I(54), value -&gt; +I(-1789471578)</span><br><span class="line">sequenceNumber -&gt; 71, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(1727726334)</span><br><span class="line">sequenceNumber -&gt; 72, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(1942470627)</span><br><span class="line">sequenceNumber -&gt; 73, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(1019545942)</span><br><span class="line">sequenceNumber -&gt; 74, ValueKind -&gt; DELETE, key -&gt; +I(11), value -&gt; +I(651497588)</span><br><span class="line">sequenceNumber -&gt; 75, ValueKind -&gt; ADD, key -&gt; +I(66), value -&gt; +I(502330288)</span><br><span class="line">sequenceNumber -&gt; 76, ValueKind -&gt; ADD, key -&gt; +I(28), value -&gt; +I(-1694526628)</span><br><span class="line">sequenceNumber -&gt; 77, ValueKind -&gt; ADD, key -&gt; +I(5), value -&gt; +I(597994318)</span><br><span class="line">sequenceNumber -&gt; 78, ValueKind -&gt; ADD, key -&gt; +I(61), value -&gt; +I(-577870746)</span><br><span class="line">sequenceNumber -&gt; 79, ValueKind -&gt; DELETE, key -&gt; +I(18), value -&gt; +I(-819164947)</span><br><span class="line">sequenceNumber -&gt; 80, ValueKind -&gt; ADD, key -&gt; +I(27), value -&gt; +I(-1330437890)</span><br><span class="line">sequenceNumber -&gt; 81, ValueKind -&gt; ADD, key -&gt; +I(52), value -&gt; +I(2093608076)</span><br><span class="line">sequenceNumber -&gt; 82, ValueKind -&gt; DELETE, key -&gt; +I(69), value -&gt; +I(-1527497908)</span><br><span class="line">sequenceNumber -&gt; 83, ValueKind -&gt; DELETE, key -&gt; +I(38), value -&gt; +I(-176326148)</span><br><span class="line">sequenceNumber -&gt; 84, ValueKind -&gt; DELETE, key -&gt; +I(66), value -&gt; +I(-1719225487)</span><br><span class="line">sequenceNumber -&gt; 85, ValueKind -&gt; DELETE, key -&gt; +I(73), value -&gt; +I(2019867633)</span><br><span class="line">sequenceNumber -&gt; 86, ValueKind -&gt; ADD, key -&gt; +I(56), value -&gt; +I(-530313746)</span><br><span class="line">sequenceNumber -&gt; 87, ValueKind -&gt; ADD, key -&gt; +I(91), value -&gt; +I(740139405)</span><br><span class="line">sequenceNumber -&gt; 88, ValueKind -&gt; ADD, key -&gt; +I(75), value -&gt; +I(1199728040)</span><br><span class="line">sequenceNumber -&gt; 89, ValueKind -&gt; DELETE, key -&gt; +I(76), value -&gt; +I(-622761322)</span><br><span class="line">sequenceNumber -&gt; 90, ValueKind -&gt; ADD, key -&gt; +I(60), value -&gt; +I(1718043906)</span><br><span class="line">sequenceNumber -&gt; 91, ValueKind -&gt; ADD, key -&gt; +I(50), value -&gt; +I(-1682393888)</span><br><span class="line">sequenceNumber -&gt; 92, ValueKind -&gt; ADD, key -&gt; +I(58), value -&gt; +I(1551652094)</span><br><span class="line">sequenceNumber -&gt; 93, ValueKind -&gt; DELETE, key -&gt; +I(91), value -&gt; +I(-1049392752)</span><br><span class="line">sequenceNumber -&gt; 94, ValueKind -&gt; ADD, key -&gt; +I(11), value -&gt; +I(246037102)</span><br><span class="line">sequenceNumber -&gt; 95, ValueKind -&gt; DELETE, key -&gt; +I(60), value -&gt; +I(-816180426)</span><br><span class="line">sequenceNumber -&gt; 96, ValueKind -&gt; DELETE, key -&gt; +I(83), value -&gt; +I(-1623000942)</span><br><span class="line">sequenceNumber -&gt; 97, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(964697602)        // 排序集合中的第 1 条数据</span><br><span class="line">sequenceNumber -&gt; 98, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(-194759233)</span><br><span class="line">sequenceNumber -&gt; 99, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(-1374078600)</span><br><span class="line">sequenceNumber -&gt; 100, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(198351328)</span><br><span class="line">sequenceNumber -&gt; 101, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-1998891159)</span><br><span class="line">sequenceNumber -&gt; 102, ValueKind -&gt; ADD, key -&gt; +I(64), value -&gt; +I(75726825)</span><br><span class="line">sequenceNumber -&gt; 103, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(1354212903)</span><br><span class="line">sequenceNumber -&gt; 104, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-508548447)</span><br><span class="line">sequenceNumber -&gt; 105, ValueKind -&gt; ADD, key -&gt; +I(78), value -&gt; +I(-1504299996)</span><br><span class="line">sequenceNumber -&gt; 106, ValueKind -&gt; ADD, key -&gt; +I(36), value -&gt; +I(1967516225)</span><br><span class="line">sequenceNumber -&gt; 107, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(-1448527484)</span><br><span class="line">sequenceNumber -&gt; 108, ValueKind -&gt; DELETE, key -&gt; +I(80), value -&gt; +I(422507492)</span><br><span class="line">sequenceNumber -&gt; 109, ValueKind -&gt; DELETE, key -&gt; +I(70), value -&gt; +I(19710019)</span><br><span class="line">sequenceNumber -&gt; 110, ValueKind -&gt; DELETE, key -&gt; +I(30), value -&gt; +I(1060594873)</span><br><span class="line">sequenceNumber -&gt; 111, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(645029376)</span><br><span class="line">sequenceNumber -&gt; 112, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-500311443)</span><br><span class="line">sequenceNumber -&gt; 113, ValueKind -&gt; DELETE, key -&gt; +I(96), value -&gt; +I(-1664755054)</span><br><span class="line">sequenceNumber -&gt; 114, ValueKind -&gt; ADD, key -&gt; +I(86), value -&gt; +I(488472411)</span><br><span class="line">sequenceNumber -&gt; 115, ValueKind -&gt; DELETE, key -&gt; +I(42), value -&gt; +I(-1960475417)</span><br><span class="line">sequenceNumber -&gt; 116, ValueKind -&gt; DELETE, key -&gt; +I(71), value -&gt; +I(-1040436146)</span><br><span class="line">sequenceNumber -&gt; 117, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-350114843)</span><br><span class="line">sequenceNumber -&gt; 118, ValueKind -&gt; ADD, key -&gt; +I(31), value -&gt; +I(1415574280)</span><br><span class="line">sequenceNumber -&gt; 119, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(-799816888)</span><br><span class="line">sequenceNumber -&gt; 120, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(332753861)</span><br><span class="line">sequenceNumber -&gt; 121, ValueKind -&gt; DELETE, key -&gt; +I(8), value -&gt; +I(361512102)</span><br><span class="line">sequenceNumber -&gt; 122, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(155422065)</span><br><span class="line">sequenceNumber -&gt; 123, ValueKind -&gt; DELETE, key -&gt; +I(80), value -&gt; +I(289053479)</span><br><span class="line">sequenceNumber -&gt; 124, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(-721556651)</span><br><span class="line">sequenceNumber -&gt; 125, ValueKind -&gt; DELETE, key -&gt; +I(35), value -&gt; +I(1458427036)</span><br><span class="line">sequenceNumber -&gt; 126, ValueKind -&gt; ADD, key -&gt; +I(86), value -&gt; +I(-49406890)</span><br><span class="line">sequenceNumber -&gt; 127, ValueKind -&gt; DELETE, key -&gt; +I(93), value -&gt; +I(-140821273)</span><br><span class="line">sequenceNumber -&gt; 128, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-62714072)</span><br><span class="line">sequenceNumber -&gt; 129, ValueKind -&gt; DELETE, key -&gt; +I(25), value -&gt; +I(664998142)</span><br><span class="line">sequenceNumber -&gt; 130, ValueKind -&gt; DELETE, key -&gt; +I(36), value -&gt; +I(-1222167553)</span><br><span class="line">sequenceNumber -&gt; 131, ValueKind -&gt; DELETE, key -&gt; +I(59), value -&gt; +I(884329714)</span><br><span class="line">sequenceNumber -&gt; 132, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(431167396)</span><br><span class="line">sequenceNumber -&gt; 133, ValueKind -&gt; DELETE, key -&gt; +I(82), value -&gt; +I(-1503470408)</span><br><span class="line">sequenceNumber -&gt; 134, ValueKind -&gt; ADD, key -&gt; +I(71), value -&gt; +I(-1866273544)</span><br><span class="line">sequenceNumber -&gt; 135, ValueKind -&gt; ADD, key -&gt; +I(36), value -&gt; +I(-1348634198)</span><br><span class="line">sequenceNumber -&gt; 136, ValueKind -&gt; DELETE, key -&gt; +I(95), value -&gt; +I(-1877911221)</span><br><span class="line">sequenceNumber -&gt; 137, ValueKind -&gt; DELETE, key -&gt; +I(68), value -&gt; +I(1990244092)</span><br><span class="line">sequenceNumber -&gt; 138, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(1272509713)</span><br><span class="line">sequenceNumber -&gt; 139, ValueKind -&gt; ADD, key -&gt; +I(63), value -&gt; +I(549481877)</span><br><span class="line">sequenceNumber -&gt; 140, ValueKind -&gt; DELETE, key -&gt; +I(30), value -&gt; +I(-1827265063)</span><br><span class="line">sequenceNumber -&gt; 141, ValueKind -&gt; ADD, key -&gt; +I(17), value -&gt; +I(961410061)</span><br><span class="line">sequenceNumber -&gt; 142, ValueKind -&gt; ADD, key -&gt; +I(42), value -&gt; +I(-1923379307)</span><br><span class="line">sequenceNumber -&gt; 143, ValueKind -&gt; DELETE, key -&gt; +I(66), value -&gt; +I(-447682108)</span><br><span class="line">sequenceNumber -&gt; 144, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(-583980392)</span><br><span class="line">sequenceNumber -&gt; 145, ValueKind -&gt; DELETE, key -&gt; +I(1), value -&gt; +I(2065491016)  </span><br><span class="line">sequenceNumber -&gt; 146, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(521101514)        // 排序集合中的第 2 条数据 </span><br><span class="line">sequenceNumber -&gt; 147, ValueKind -&gt; ADD, key -&gt; +I(30), value -&gt; +I(1132139652)</span><br><span class="line">sequenceNumber -&gt; 148, ValueKind -&gt; ADD, key -&gt; +I(72), value -&gt; +I(713572359)</span><br><span class="line">sequenceNumber -&gt; 149, ValueKind -&gt; DELETE, key -&gt; +I(5), value -&gt; +I(162860404)</span><br><span class="line">sequenceNumber -&gt; 150, ValueKind -&gt; DELETE, key -&gt; +I(36), value -&gt; +I(-2108809046)</span><br><span class="line">sequenceNumber -&gt; 151, ValueKind -&gt; DELETE, key -&gt; +I(3), value -&gt; +I(104679497)</span><br><span class="line">sequenceNumber -&gt; 152, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(1452009131)</span><br><span class="line">sequenceNumber -&gt; 153, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(-639638965)</span><br><span class="line">sequenceNumber -&gt; 154, ValueKind -&gt; DELETE, key -&gt; +I(62), value -&gt; +I(1906544864)</span><br><span class="line">sequenceNumber -&gt; 155, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(-175182120)</span><br><span class="line">sequenceNumber -&gt; 156, ValueKind -&gt; DELETE, key -&gt; +I(89), value -&gt; +I(452324661)</span><br><span class="line">sequenceNumber -&gt; 157, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(836346953)</span><br><span class="line">sequenceNumber -&gt; 158, ValueKind -&gt; ADD, key -&gt; +I(99), value -&gt; +I(651514373)</span><br><span class="line">sequenceNumber -&gt; 159, ValueKind -&gt; DELETE, key -&gt; +I(71), value -&gt; +I(-108776269)</span><br><span class="line">sequenceNumber -&gt; 160, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(-73532459)</span><br><span class="line">sequenceNumber -&gt; 161, ValueKind -&gt; ADD, key -&gt; +I(14), value -&gt; +I(2128763828)</span><br><span class="line">sequenceNumber -&gt; 162, ValueKind -&gt; DELETE, key -&gt; +I(67), value -&gt; +I(-456952804)</span><br><span class="line">sequenceNumber -&gt; 163, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(-1249173302)</span><br><span class="line">sequenceNumber -&gt; 164, ValueKind -&gt; DELETE, key -&gt; +I(42), value -&gt; +I(-1216151330)</span><br><span class="line">sequenceNumber -&gt; 165, ValueKind -&gt; DELETE, key -&gt; +I(84), value -&gt; +I(-500755987)</span><br><span class="line">sequenceNumber -&gt; 166, ValueKind -&gt; DELETE, key -&gt; +I(10), value -&gt; +I(-1947673013)</span><br><span class="line">sequenceNumber -&gt; 167, ValueKind -&gt; DELETE, key -&gt; +I(95), value -&gt; +I(-1342645152)</span><br><span class="line">sequenceNumber -&gt; 168, ValueKind -&gt; ADD, key -&gt; +I(85), value -&gt; +I(1979169435)</span><br><span class="line">sequenceNumber -&gt; 169, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(157530613)</span><br><span class="line">sequenceNumber -&gt; 170, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(743959004)</span><br><span class="line">sequenceNumber -&gt; 171, ValueKind -&gt; ADD, key -&gt; +I(35), value -&gt; +I(170145595)</span><br><span class="line">sequenceNumber -&gt; 172, ValueKind -&gt; ADD, key -&gt; +I(2), value -&gt; +I(-464790927)</span><br><span class="line">sequenceNumber -&gt; 173, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(-1317899453)</span><br><span class="line">sequenceNumber -&gt; 174, ValueKind -&gt; ADD, key -&gt; +I(74), value -&gt; +I(1008782452)</span><br><span class="line">sequenceNumber -&gt; 175, ValueKind -&gt; ADD, key -&gt; +I(51), value -&gt; +I(-763579376)</span><br><span class="line">sequenceNumber -&gt; 176, ValueKind -&gt; DELETE, key -&gt; +I(0), value -&gt; +I(500333878)    // 排序集合中的第 3 条数据 </span><br><span class="line">sequenceNumber -&gt; 177, ValueKind -&gt; ADD, key -&gt; +I(48), value -&gt; +I(1184699077)</span><br><span class="line">sequenceNumber -&gt; 178, ValueKind -&gt; DELETE, key -&gt; +I(67), value -&gt; +I(-1805865582)</span><br><span class="line">sequenceNumber -&gt; 179, ValueKind -&gt; DELETE, key -&gt; +I(60), value -&gt; +I(-861165267)</span><br><span class="line">sequenceNumber -&gt; 180, ValueKind -&gt; ADD, key -&gt; +I(10), value -&gt; +I(-888539951)</span><br><span class="line">sequenceNumber -&gt; 181, ValueKind -&gt; ADD, key -&gt; +I(62), value -&gt; +I(1848778293)</span><br><span class="line">sequenceNumber -&gt; 182, ValueKind -&gt; ADD, key -&gt; +I(48), value -&gt; +I(-1260289205)</span><br><span class="line">sequenceNumber -&gt; 183, ValueKind -&gt; DELETE, key -&gt; +I(28), value -&gt; +I(1880572265)</span><br><span class="line">sequenceNumber -&gt; 184, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-1507320045)</span><br><span class="line">sequenceNumber -&gt; 185, ValueKind -&gt; DELETE, key -&gt; +I(19), value -&gt; +I(14067102)</span><br><span class="line">sequenceNumber -&gt; 186, ValueKind -&gt; DELETE, key -&gt; +I(77), value -&gt; +I(1177031237)</span><br></pre></td></tr></table></figure><p>经过 <code>QuickSort.sort(buffer)</code> 排序如下，按照 sequenceNumber, key 排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 97, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(964697602)        </span><br><span class="line">sequenceNumber -&gt; 146, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(521101514)        </span><br><span class="line">sequenceNumber -&gt; 176, ValueKind -&gt; DELETE, key -&gt; +I(0), value -&gt; +I(500333878)   // memTable.iterator().next() 返回的第 1 条数据</span><br><span class="line">sequenceNumber -&gt; 145, ValueKind -&gt; DELETE, key -&gt; +I(1), value -&gt; +I(2065491016)  // memTable.iterator().next() 返回的第 2 条数据</span><br><span class="line">sequenceNumber -&gt; 172, ValueKind -&gt; ADD, key -&gt; +I(2), value -&gt; +I(-464790927)     // memTable.iterator().next() 返回的第 3 条数据</span><br><span class="line">sequenceNumber -&gt; 151, ValueKind -&gt; DELETE, key -&gt; +I(3), value -&gt; +I(104679497)   // memTable.iterator().next() 返回的第 4 条数据</span><br><span class="line">sequenceNumber -&gt; 12, ValueKind -&gt; ADD, key -&gt; +I(4), value -&gt; +I(418530737)       // memTable.iterator().next() 返回的第 5 条数据 </span><br><span class="line">sequenceNumber -&gt; 77, ValueKind -&gt; ADD, key -&gt; +I(5), value -&gt; +I(597994318)</span><br><span class="line">sequenceNumber -&gt; 149, ValueKind -&gt; DELETE, key -&gt; +I(5), value -&gt; +I(162860404)   // memTable.iterator().next() 返回的第 6 条数据</span><br><span class="line">sequenceNumber -&gt; 10, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1623789565)</span><br><span class="line">sequenceNumber -&gt; 18, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(1588442994)</span><br><span class="line">sequenceNumber -&gt; 29, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1736811783)</span><br><span class="line">sequenceNumber -&gt; 49, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(-1991355107)</span><br><span class="line">sequenceNumber -&gt; 72, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(1942470627)   // memTable.iterator().next() 返回的第 7 条数据</span><br><span class="line">sequenceNumber -&gt; 46, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(858389285)</span><br><span class="line">sequenceNumber -&gt; 122, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(155422065)      // memTable.iterator().next() 返回的第 8 条数据</span><br><span class="line"></span><br><span class="line">... 后面就不一一列举了</span><br></pre></td></tr></table></figure><p><code>MergeTreeWriter.flush()</code> 操作是从 <code>memTable.iterator()</code> 迭代读取数据，通过 <code>SstFileWriter.write()</code> 写入 bucket-0/sst-* 文件 。</p><h2 id="关键实现"><a href="#关键实现" class="headerlink" title="关键实现"></a>关键实现</h2><h3 id="MergeTreeWriter-1"><a href="#MergeTreeWriter-1" class="headerlink" title="MergeTreeWriter"></a>MergeTreeWriter</h3><figure class="highlight java"><figcaption><span>MergeTreeWriter.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/MergeTreeWriter.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A &#123;<span class="doctag">@link</span> RecordWriter&#125; to write records and generate &#123;<span class="doctag">@link</span> Increment&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTreeWriter</span> <span class="keyword">implements</span> <span class="title">RecordWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存 table</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemTable memTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步 compact 线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CompactManager compactManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Levels levels;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key 值比较器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于 key 值去重的工具类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Accumulator accumulator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstFileWriter sstFileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> commitForceCompact;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashSet&lt;SstFileMeta&gt; newFiles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, SstFileMeta&gt; compactBefore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashSet&lt;SstFileMeta&gt; compactAfter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> newSequenceNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">newSequenceNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newSequenceNumber++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">Levels <span class="title">levels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> levels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MergeWriter 接收并写入数据</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ValueKind valueKind, RowData key, RowData value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先生成一个序列号</span></span><br><span class="line">        <span class="keyword">long</span> sequenceNumber = newSequenceNumber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写入 memTable 中</span></span><br><span class="line">        <span class="keyword">boolean</span> success = memTable.put(sequenceNumber, valueKind, key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当 memTable.nextMemorySegment 获取失败，即写 memTable 失败，需要执行刷盘</span></span><br><span class="line">            flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重试一次，接着上一次失败的 sequenceNumber ，继续写入 memTable 中</span></span><br><span class="line">            success = memTable.put(sequenceNumber, valueKind, key, value);</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Mem table is too small to hold a single element."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 memTable 中读取数据，刷写到 SstFile </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memTable.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            finishCompaction();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 memTable 中迭代读取数据 ，在此过程中，对于相同的 key ，最大 sequenceNumber 的 key 将会覆盖小 sequenceNumber</span></span><br><span class="line">            Iterator&lt;KeyValue&gt; iterator = memTable.iterator(keyComparator, accumulator);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将数据写入 sst file ，level 设置为0</span></span><br><span class="line">            List&lt;SstFileMeta&gt; files =</span><br><span class="line">                    sstFileWriter.write(CloseableIterator.adapterForIterator(iterator), <span class="number">0</span>);</span><br><span class="line">            newFiles.addAll(files);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将生成的 sst file 加入到 Level0 中</span></span><br><span class="line">            files.forEach(levels::addLevel0File);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空 memTable</span></span><br><span class="line">            memTable.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步执行 LSM compactions ，丢入线程池</span></span><br><span class="line">            submitCompaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishCompaction</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 需要结束掉上一次 compaction</span></span><br><span class="line">        Optional&lt;CompactManager.CompactResult&gt; result = compactManager.finishCompaction(levels); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// compact 前后的 LinkedHashSet&lt;SstFileMeta&gt; 存储在 MergeTreeWriter 中</span></span><br><span class="line">        result.ifPresent(<span class="keyword">this</span>::updateCompactResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitCompaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        compactManager.submitCompaction(levels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交准备，返回 Increment </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Increment <span class="title">prepareCommit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷写 memTable</span></span><br><span class="line">        flush();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (commitForceCompact) &#123;</span><br><span class="line">            finishCompaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取构建出增量 files ，并清空 newFiles 、compactBefore 、compactAfter</span></span><br><span class="line">        <span class="keyword">return</span> drainIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Increment <span class="title">drainIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Increment increment =</span><br><span class="line">                <span class="keyword">new</span> Increment(</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(newFiles),</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(compactBefore.values()),</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(compactAfter));</span><br><span class="line">        newFiles.clear();</span><br><span class="line">        compactBefore.clear();</span><br><span class="line">        compactAfter.clear();</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步操作，结束掉 compaction</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        finishCompaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SortBufferMemTable"><a href="#SortBufferMemTable" class="headerlink" title="SortBufferMemTable"></a>SortBufferMemTable</h3><figure class="highlight java"><figcaption><span>SortBufferMemTable.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/SortBufferMemTable.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A &#123;<span class="doctag">@link</span> MemTable&#125; which stores records in &#123;<span class="doctag">@link</span> BinaryInMemorySortBuffer&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortBufferMemTable</span> <span class="keyword">implements</span> <span class="title">MemTable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RowType keyType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RowType valueType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KeyValueSerializer serializer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存 buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BinaryInMemorySortBuffer buffer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(<span class="keyword">long</span> sequenceNumber, ValueKind valueKind, RowData key, RowData value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.write(serializer.toRow(key, sequenceNumber, valueKind, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;KeyValue&gt; <span class="title">iterator</span><span class="params">(Comparator&lt;RowData&gt; keyComparator, Accumulator accumulator)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 排序之后，memTable 中的数据条数不变</span></span><br><span class="line">        <span class="keyword">new</span> QuickSort().sort(buffer); </span><br><span class="line">        MutableObjectIterator&lt;BinaryRowData&gt; kvIter = buffer.getIterator();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MemTableIterator(kvIter, keyComparator, accumulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * memTable iterator 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MemTableIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">KeyValue</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MutableObjectIterator&lt;BinaryRowData&gt; kvIter;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Accumulator accumulator;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// holds the accumulated value</span></span><br><span class="line">        <span class="keyword">private</span> KeyValueSerializer previous;</span><br><span class="line">        <span class="keyword">private</span> BinaryRowData previousRow;</span><br><span class="line">        <span class="comment">// reads the next kv</span></span><br><span class="line">        <span class="keyword">private</span> KeyValueSerializer current;</span><br><span class="line">        <span class="keyword">private</span> BinaryRowData currentRow;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * iterator 指针是否已经推进过的标识</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> advanced;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemTableIterator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                MutableObjectIterator&lt;BinaryRowData&gt; kvIter,</span></span></span><br><span class="line"><span class="function"><span class="params">                Comparator&lt;RowData&gt; keyComparator,</span></span></span><br><span class="line"><span class="function"><span class="params">                Accumulator accumulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kvIter = kvIter;</span><br><span class="line">            <span class="keyword">this</span>.keyComparator = keyComparator;</span><br><span class="line">            <span class="keyword">this</span>.accumulator = accumulator;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> totalFieldCount = keyType.getFieldCount() + <span class="number">2</span> + valueType.getFieldCount();</span><br><span class="line">            <span class="keyword">this</span>.previous = <span class="keyword">new</span> KeyValueSerializer(keyType, valueType);</span><br><span class="line">            <span class="keyword">this</span>.previousRow = <span class="keyword">new</span> BinaryRowData(totalFieldCount);</span><br><span class="line">            <span class="keyword">this</span>.current = <span class="keyword">new</span> KeyValueSerializer(keyType, valueType);</span><br><span class="line">            <span class="keyword">this</span>.currentRow = <span class="keyword">new</span> BinaryRowData(totalFieldCount);</span><br><span class="line">            readOnce();</span><br><span class="line">            <span class="keyword">this</span>.advanced = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            advanceIfNeeded();</span><br><span class="line">            <span class="keyword">return</span> previousRow != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> KeyValue <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            advanceIfNeeded();</span><br><span class="line">            <span class="keyword">if</span> (previousRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advanced = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> previous.getReusedKv();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">advanceIfNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (advanced) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advanced = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            RowData result;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换 current 与 previous 值</span></span><br><span class="line">                swapSerializers(); </span><br><span class="line">                <span class="keyword">if</span> (previousRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                accumulator.reset();</span><br><span class="line">                accumulator.add(previous.getReusedKv().value());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// readOnce() 从经过排序的 buffer 中读取数据</span></span><br><span class="line">                <span class="keyword">while</span> (readOnce()) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 比较当前行数据和 previous 行数据的key ，如果不相等，则跳出本次循环</span></span><br><span class="line">                    <span class="keyword">if</span> (keyComparator.compare(</span><br><span class="line">                                    previous.getReusedKv().key(), current.getReusedKv().key()) </span><br><span class="line">                            != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果相等，则用最新 sequenceNumber 的数据，覆盖更新到 accumulator</span></span><br><span class="line">                    accumulator.add(current.getReusedKv().value()); </span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 指针继续向前推进 </span></span><br><span class="line">                    swapSerializers(); </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回相同 key 的具有最大 sequenceNumber 数据</span></span><br><span class="line">                result = accumulator.getValue();  </span><br><span class="line">            &#125; <span class="keyword">while</span> (result == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 赋值给 previous</span></span><br><span class="line">            previous.getReusedKv().setValue(result); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readOnce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取下一行数据</span></span><br><span class="line">                currentRow = kvIter.next(currentRow);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentRow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                current.fromRow(currentRow);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> currentRow != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 交换赋值 current 与 previous</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapSerializers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            KeyValueSerializer tmp = previous;</span><br><span class="line">            BinaryRowData tmpRow = previousRow;</span><br><span class="line">            previous = current;</span><br><span class="line">            previousRow = currentRow;</span><br><span class="line">            current = tmp;</span><br><span class="line">            currentRow = tmpRow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buffer.reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CompactManager"><a href="#CompactManager" class="headerlink" title="CompactManager"></a>CompactManager</h3><figure class="highlight java"><figcaption><span>CompactManager.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/compact/CompactManager.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Manager to submit compaction task. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompactManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CompactStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> minFileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rewriter rewriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Future&lt;CompactResult&gt; taskFuture;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Submit a new compaction task. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitCompaction</span><span class="params">(Levels levels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 finishCompaction 时，会将 taskFuture 置为空，以此来判断上一次 compaction 是否结束</span></span><br><span class="line">        <span class="keyword">if</span> (taskFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Please finish the previous compaction before submitting new one."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strategy.pick(levels.numberOfLevels(), levels.levelSortedRuns())</span><br><span class="line">                .ifPresent(</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//  为 CompactUnit 分配一个线程</span></span><br><span class="line">                        unit -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (unit.files().size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * As long as there is no older data, We can drop the deletion.</span></span><br><span class="line"><span class="comment">                             * If the output level is 0, there may be older data not involved in compaction.</span></span><br><span class="line"><span class="comment">                             * If the output level is bigger than 0, as long as there is no older data in</span></span><br><span class="line"><span class="comment">                             * the current levels, the output is the oldest, so we can drop the deletion.</span></span><br><span class="line"><span class="comment">                             * See CompactStrategy.pick.</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            <span class="keyword">boolean</span> dropDelete =</span><br><span class="line">                                    unit.outputLevel() != <span class="number">0</span></span><br><span class="line">                                            &amp;&amp; unit.outputLevel() &gt;= levels.nonEmptyHighestLevel();</span><br><span class="line"></span><br><span class="line">                            CompactTask task = <span class="keyword">new</span> CompactTask(unit, dropDelete);</span><br><span class="line">                            taskFuture = executor.submit(task);</span><br><span class="line">                        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Finish current task, and update result files to &#123;<span class="doctag">@link</span> Levels&#125;. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;CompactResult&gt; <span class="title">finishCompaction</span><span class="params">(Levels levels)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (taskFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 CompactTask 线程返回 Future 回调结果</span></span><br><span class="line">            CompactResult result = taskFuture.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 compact 前后的 List&lt;SstFileMeta&gt;</span></span><br><span class="line">            levels.update(result.before(), result.after());</span><br><span class="line"></span><br><span class="line">            taskFuture = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Internal classes</span></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Compaction task. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CompactTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">CompactResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> outputLevel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;List&lt;SortedRun&gt;&gt; partitioned;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> dropDelete;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CompactTask</span><span class="params">(CompactUnit unit, <span class="keyword">boolean</span> dropDelete)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.outputLevel = unit.outputLevel();</span><br><span class="line">            <span class="keyword">this</span>.partitioned = <span class="keyword">new</span> IntervalPartition(unit.files(), keyComparator).partition();</span><br><span class="line">            <span class="keyword">this</span>.dropDelete = dropDelete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompactResult <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compact();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> CompactResult <span class="title">compact</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            List&lt;List&lt;SortedRun&gt;&gt; candidate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;SstFileMeta&gt; before = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;SstFileMeta&gt; after = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Checking the order and compacting adjacent and contiguous files</span></span><br><span class="line">            <span class="comment">// Note: can't skip an intermediate file to compact, this will destroy the overall</span></span><br><span class="line">            <span class="comment">// orderliness</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;SortedRun&gt; section : partitioned) &#123;</span><br><span class="line">                <span class="keyword">if</span> (section.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    candidate.add(section);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    SortedRun run = section.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// No overlapping:</span></span><br><span class="line">                    <span class="comment">// We can just upgrade the large file and just change the level instead of</span></span><br><span class="line">                    <span class="comment">// rewriting it</span></span><br><span class="line">                    <span class="comment">// But for small files, we will try to compact it</span></span><br><span class="line">                    <span class="keyword">for</span> (SstFileMeta file : run.files()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (file.fileSize() &lt; minFileSize) &#123;</span><br><span class="line">                            <span class="comment">// Smaller files are rewritten along with the previous files</span></span><br><span class="line">                            candidate.add(singletonList(SortedRun.fromSingle(file)));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Large file appear, rewrite previous and upgrade it</span></span><br><span class="line">                            rewrite(candidate, before, after);</span><br><span class="line">                            upgrade(file, before, after);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rewrite(candidate, before, after);</span><br><span class="line">            <span class="keyword">return</span> result(before, after);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">(SstFileMeta file, List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (file.level() != outputLevel) &#123;</span><br><span class="line">                before.add(file);</span><br><span class="line">                after.add(file.upgrade(outputLevel));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rewrite</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;List&lt;SortedRun&gt;&gt; candidate, List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidate.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                List&lt;SortedRun&gt; section = candidate.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (section.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (SstFileMeta file : section.get(<span class="number">0</span>).files()) &#123;</span><br><span class="line">                        upgrade(file, before, after);</span><br><span class="line">                    &#125;</span><br><span class="line">                    candidate.clear();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidate.forEach(runs -&gt; runs.forEach(run -&gt; before.addAll(run.files())));</span><br><span class="line">            after.addAll(rewriter.rewrite(outputLevel, dropDelete, candidate));</span><br><span class="line">            candidate.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> CompactResult <span class="title">result</span><span class="params">(List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CompactResult() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;SstFileMeta&gt; <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> before;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;SstFileMeta&gt; <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> after;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/wuxb45/lsm-trie" target="_blank" rel="noopener">lsm-trie git</a><br><a href="LSM-tire_An_LSM-tree-based_Ultra-Large_Key-Value_Store_for_Small_Data.pdf">LSM-tire_An_LSM-tree-based_Ultra-Large_Key-Value_Store_for_Small_Data.pdf</a><br><a href="Skip_Lists_A_Probabilistic_Alternative_to_Balanced_Trees.pdf">Skip_Lists_A_Probabilistic_Alternative_to_Balanced_Trees.pdf</a><br><a href="The_Log-Structured_Merge-Tree.pdf">The_Log-Structured_Merge-Tree.pdf</a><br><a href="WiscKey_Separating_Keys_from_Values_in_SSD-conscious_Storage.pdf">WiscKey_Separating_Keys_from_Values_in_SSD-conscious_Storage.pdf</a><br><a href="https://zhuanlan.zhihu.com/p/389397486" target="_blank" rel="noopener">浅析 LSM-tree</a><br><a href="https://www.bilibili.com/video/BV1mL411P72H" target="_blank" rel="noopener">Designing Data-Intensive Applications 分享视频</a><br>《精通LevelDB》 2022年1月出版</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/apache/flink-table-store/commits/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flink-table-store git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文了解下 MergeTreeWriter 的源码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-table-store" scheme="http://yoursite.com/categories/Flink/Flink-table-store/"/>
    
    
  </entry>
  
  <entry>
    <title>Presto Connectors</title>
    <link href="http://yoursite.com/2022/03/29/Presto-Connectors/"/>
    <id>http://yoursite.com/2022/03/29/Presto-Connectors/</id>
    <published>2022-03-29T11:04:20.000Z</published>
    <updated>2023-03-02T08:49:08.711Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结下 Presto Connectors 的 SPI 实现。在 Presto 中，UDF、EventListener、DataTypes、ParameterTypes、Access Control、Resource Group 以及 Connector<br>都是通过插件机制实现的。</p><a id="more"></a><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><p>Presto 将支持的所有插件类型封装在顶层接口 Plugin 中：</p><p><img src="Plugin%E7%B1%BB%E5%9B%BE.png" alt></p><p>Presto 将所有支持的插件类型，都统一封装在一个统一的接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Plugin</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Connector</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ConnectorFactory&gt; <span class="title">getConnectorFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;BlockEncoding&gt; <span class="title">getBlockEncodings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Data Types</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;Type&gt; <span class="title">getTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parameter Types</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ParametricType&gt; <span class="title">getParametricTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">default</span> Set&lt;Class&lt;?&gt;&gt; getFunctions() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;SystemAccessControlFactory&gt; <span class="title">getSystemAccessControlFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;PasswordAuthenticatorFactory&gt; <span class="title">getPasswordAuthenticatorFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EventListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;EventListenerFactory&gt; <span class="title">getEventListenerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ResourceGroupConfigurationManagerFactory&gt; <span class="title">getResourceGroupConfigurationManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;SessionPropertyConfigurationManagerFactory&gt; <span class="title">getSessionPropertyConfigurationManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;FunctionNamespaceManagerFactory&gt; <span class="title">getFunctionNamespaceManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;TempStorageFactory&gt; <span class="title">getTempStorageFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;QueryPrerequisitesFactory&gt; <span class="title">getQueryPrerequisitesFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h2><p>插件加载时序图： </p><p><img src="PrestoServer_run_load_Connectors.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPlugins</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// installedPluginsDir 通过 config.properties 配置文件中的 plugin.dir 指定</span></span><br><span class="line">        <span class="keyword">for</span> (File file : listFiles(installedPluginsDir)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                loadPlugin(file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String plugin : plugins) &#123;</span><br><span class="line">            loadPlugin(plugin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逐个加载 plugin，每个插件都要独立的路径，new 一个类加载器</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(String plugin)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"-- Loading plugin %s --"</span>, plugin);</span><br><span class="line">        URLClassLoader pluginClassLoader = buildClassLoader(plugin);</span><br><span class="line">        <span class="keyword">try</span> (ThreadContextClassLoader ignored = <span class="keyword">new</span> ThreadContextClassLoader(pluginClassLoader)) &#123;</span><br><span class="line">            loadPlugin(pluginClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"-- Finished loading plugin %s --"</span>, plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SPI 机制加载实现了 Plugin 接口的类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(URLClassLoader pluginClassLoader)</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Plugin&gt; serviceLoader = ServiceLoader.load(Plugin.class, pluginClassLoader);</span><br><span class="line">        List&lt;Plugin&gt; plugins = ImmutableList.copyOf(serviceLoader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (plugins.isEmpty()) &#123;</span><br><span class="line">            log.warn(<span class="string">"No service providers of type %s"</span>, Plugin.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Plugin plugin : plugins) &#123;</span><br><span class="line">            log.info(<span class="string">"Installing %s"</span>, plugin.getClass().getName());</span><br><span class="line">            installPlugin(plugin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装置 plugin ，将 plugin 单独实现的插件们，设置到 xxxManager 中</span></span><br><span class="line"><span class="comment">     * 如 Connector 插件存放到 ConnectorManager 中，xxxManager 中都会有一个内存 Map，称之为 factories</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPlugin</span><span class="params">(Plugin plugin)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ConnectorFactory connectorFactory : plugin.getConnectorFactories()) &#123;</span><br><span class="line">            </span><br><span class="line">            log.info(<span class="string">"Registering connector %s"</span>, connectorFactory.getName());</span><br><span class="line">            connectorManager.addConnectorFactory(connectorFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (QueryPrerequisitesFactory queryPrerequisitesFactory : plugin.getQueryPrerequisitesFactories()) &#123;</span><br><span class="line">            log.info(<span class="string">"Registering query prerequisite factory %s"</span>, queryPrerequisitesFactory.getName());</span><br><span class="line">            queryPrerequisitesManager.addQueryPrerequisitesFactory(queryPrerequisitesFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 plugin 构建 URLClassLoader</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> URLClassLoader <span class="title">buildClassLoader</span><span class="params">(String plugin)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(plugin);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile() &amp;&amp; (file.getName().equals(<span class="string">"pom.xml"</span>) || file.getName().endsWith(<span class="string">".pom"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> buildClassLoaderFromPom(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> buildClassLoaderFromDirectory(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildClassLoaderFromCoordinates(plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Presto 没有走配置 META-INF/services 来实现 SPI ，而是实现了一套插件自动发现功能，自动创建了对应的目录和文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> URLClassLoader <span class="title">buildClassLoaderFromPom</span><span class="params">(File pomFile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Artifact&gt; artifacts = resolver.resolvePom(pomFile);</span><br><span class="line">        URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath());</span><br><span class="line"></span><br><span class="line">        Artifact artifact = artifacts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件声明的发现</span></span><br><span class="line">        Set&lt;String&gt; plugins = discoverPlugins(artifact, classLoader);</span><br><span class="line">        <span class="keyword">if</span> (!plugins.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件声明的写入</span></span><br><span class="line">            writePluginServices(plugins, artifact.getFile());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_FILE_SUFFIX = <span class="string">".class"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICES_FILE = <span class="string">"META-INF/services/"</span> + Plugin.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件声明的发现</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">discoverPlugins</span><span class="params">(Artifact artifact, ClassLoader classLoader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> File(file, SERVICES_FILE).exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ImmutableSet.of();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> listClasses(file.toPath()).stream()</span><br><span class="line">                .filter(name -&gt; classInterfaces(name, classLoader).contains(Plugin.class.getName()))</span><br><span class="line">                .collect(toImmutableSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件声明的写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePluginServices</span><span class="params">(Iterable&lt;String&gt; plugins, File root)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Path path = root.toPath().resolve(SERVICES_FILE);</span><br><span class="line"></span><br><span class="line">        createDirectories(path.getParent());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Writer out = Files.newBufferedWriter(path, UTF_8)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String plugin : plugins) &#123;</span><br><span class="line">                out.write(plugin + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载-Catalogs"><a href="#加载-Catalogs" class="headerlink" title="加载 Catalogs"></a>加载 Catalogs</h2><p>Catalog -&gt; Schema -&gt; Table ，ConnectorFactory 可能存放多个 catalog 实例，例如每一个 mysql 实例都是一个 catalog 。</p><p>加载 Catalogs 时序图： </p><ol><li><code>PrestoServer.run()</code> 调用 <code>StaticCatalogStore.loadCatalogs()</code></li></ol><p><img src="PrestoServer_run_load_Catalogs.png" alt></p><ol start="2"><li><code>StaticCatalogStore.loadCatalogs()</code> 的具体调用</li></ol><p><img src="StaticCatalogStore_loadCatalogs.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCatalogStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 etc/catalog 目录下的所有 properties 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadCatalogs</span><span class="params">(Map&lt;String, Map&lt;String, String&gt;&gt; additionalCatalogs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : listFiles(catalogConfigurationDir)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">".properties"</span>)) &#123;</span><br><span class="line">                loadCatalog(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载某一个具体的 catalog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadCatalog</span><span class="params">(String catalogName, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"-- Loading catalog %s --"</span>, catalogName);</span><br><span class="line"></span><br><span class="line">        String connectorName = <span class="keyword">null</span>;</span><br><span class="line">        ImmutableMap.Builder&lt;String, String&gt; connectorProperties = ImmutableMap.builder();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取 catalog.properties 中配置的 connector.name</span></span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(<span class="string">"connector.name"</span>)) &#123;</span><br><span class="line">                connectorName = entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                connectorProperties.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 catalog 创建真正的物理连接</span></span><br><span class="line">        connectorManager.createConnection(catalogName, connectorName, connectorProperties.build());</span><br><span class="line">        log.info(<span class="string">"-- Added catalog %s using connector %s --"</span>, catalogName, connectorName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectorManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建一个 catalog connector ，根据 connectorName 和 catalogName 两个入参，结果输出 catalog 对应的 connectorId</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> ConnectorId <span class="title">createConnection</span><span class="params">(String catalogName, ConnectorFactory connectorFactory, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ConnectorId connectorId = <span class="keyword">new</span> ConnectorId(catalogName);</span><br><span class="line">        checkState(!connectors.containsKey(connectorId), <span class="string">"A connector %s already exists"</span>, connectorId);</span><br><span class="line"></span><br><span class="line">        addCatalogConnector(catalogName, connectorId, connectorFactory, properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectorId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IcebergConnectorFactory"><a href="#IcebergConnectorFactory" class="headerlink" title="IcebergConnectorFactory"></a>IcebergConnectorFactory</h2><p>下面以 iceberg 为例，看下如何实现一个 ConnectorFactory 。</p><p>实现一个 ConnectorFactory ，需要实现 <code>getName()</code>、<code>getHandleResolver()</code>、<code>create()</code> 3个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IcebergConnectorFactory</span> <span class="keyword">implements</span> <span class="title">ConnectorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"iceberg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回各自实现的 ConnectorHandleResolver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectorHandleResolver <span class="title">getHandleResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IcebergHandleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建 Connector</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">create</span><span class="params">(String catalogName, Map&lt;String, String&gt; config, ConnectorContext context)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ClassLoader classLoader = IcebergConnectorFactory.class.getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 java 反射，调用 InternalIcebergConnectorFactory.createConnector 创建 iceberg connector</span></span><br><span class="line">            <span class="keyword">return</span> (Connector) classLoader.loadClass(InternalIcebergConnectorFactory.class.getName())</span><br><span class="line">                    .getMethod(<span class="string">"createConnector"</span>, String.class, Map.class, ConnectorContext.class, Optional.class)</span><br><span class="line">                    .invoke(<span class="keyword">null</span>, catalogName, config, context, Optional.empty());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable targetException = e.getTargetException();</span><br><span class="line">            throwIfUnchecked(targetException);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(targetException);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大体是定义关于读写 iceberg 数据源的操作，后续再细拆</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalIcebergConnectorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InternalIcebergConnectorFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connector <span class="title">createConnector</span><span class="params">(String catalogName, Map&lt;String, String&gt; config, ConnectorContext context, Optional&lt;ExtendedHiveMetastore&gt; metastore)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        ClassLoader classLoader = InternalIcebergConnectorFactory.class.getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> (ThreadContextClassLoader ignored = <span class="keyword">new</span> ThreadContextClassLoader(classLoader)) &#123;</span><br><span class="line">            </span><br><span class="line">            Bootstrap app = <span class="keyword">new</span> Bootstrap(</span><br><span class="line">                    <span class="keyword">new</span> EventModule(),</span><br><span class="line">                    <span class="keyword">new</span> MBeanModule(),</span><br><span class="line">                    <span class="keyword">new</span> JsonModule(),</span><br><span class="line">                    <span class="keyword">new</span> IcebergModule(),</span><br><span class="line">                    <span class="keyword">new</span> IcebergMetastoreModule(),</span><br><span class="line">                    <span class="keyword">new</span> HiveS3Module(catalogName),</span><br><span class="line">                    <span class="keyword">new</span> HiveAuthenticationModule(),</span><br><span class="line">                    <span class="keyword">new</span> HiveMetastoreModule(catalogName, metastore),</span><br><span class="line">                    binder -&gt; &#123;</span><br><span class="line">                        binder.bind(NodeVersion.class).toInstance(<span class="keyword">new</span> NodeVersion(context.getNodeManager().getCurrentNode().getVersion()));</span><br><span class="line">                        binder.bind(NodeManager.class).toInstance(context.getNodeManager());</span><br><span class="line">                        binder.bind(TypeManager.class).toInstance(context.getTypeManager());</span><br><span class="line">                        binder.bind(PageIndexerFactory.class).toInstance(context.getPageIndexerFactory());</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Google Guice 是从 Google 开源的一款轻量级依赖注入框架；</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * Guice：整个框架的门面，通过 Guice 获得 Injector 实例；</span></span><br><span class="line"><span class="comment">             * Injector：一个依赖的管理上下文</span></span><br><span class="line"><span class="comment">             * Binder：一个接口和实现的绑定</span></span><br><span class="line"><span class="comment">             * Module：一组 Binder ，绑定一组被依赖的中间服务</span></span><br><span class="line"><span class="comment">             * Provider：bean 的提供者           </span></span><br><span class="line"><span class="comment">             * Scope：Provider 的作用域</span></span><br><span class="line"><span class="comment">             * @Inject：类似 Spring Autowired</span></span><br><span class="line"><span class="comment">             * @Name：和 @Inject 配合使用，类似 Spring Resource</span></span><br><span class="line"><span class="comment">             *          </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Injector injector = app</span><br><span class="line">                    .doNotInitializeLogging()</span><br><span class="line">                    .setRequiredConfigurationProperties(config)</span><br><span class="line">                    .initialize();</span><br><span class="line"></span><br><span class="line">            LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);</span><br><span class="line">            IcebergTransactionManager transactionManager = injector.getInstance(IcebergTransactionManager.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据表元数据</span></span><br><span class="line">            IcebergMetadataFactory metadataFactory = injector.getInstance(IcebergMetadataFactory.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理分任务逻辑</span></span><br><span class="line">            ConnectorSplitManager splitManager = injector.getInstance(ConnectorSplitManager.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            ConnectorPageSinkProvider pageSinkProvider = injector.getInstance(ConnectorPageSinkProvider.class);</span><br><span class="line"></span><br><span class="line">            ConnectorNodePartitioningProvider connectorDistributionProvider = injector.getInstance(ConnectorNodePartitioningProvider.class);</span><br><span class="line">            IcebergSessionProperties icebergSessionProperties = injector.getInstance(IcebergSessionProperties.class);</span><br><span class="line">            IcebergTableProperties icebergTableProperties = injector.getInstance(IcebergTableProperties.class);</span><br><span class="line">            Set&lt;Procedure&gt; procedures = injector.getInstance((Key&lt;Set&lt;Procedure&gt;&gt;) Key.get(Types.setOf(Procedure.class)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IcebergConnector(</span><br><span class="line">                    lifeCycleManager,</span><br><span class="line">                    transactionManager,</span><br><span class="line">                    metadataFactory,</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorSplitManager(splitManager, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorPageSinkProvider(pageSinkProvider, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeNodePartitioningProvider(connectorDistributionProvider, classLoader),</span><br><span class="line">                    ImmutableSet.of(),</span><br><span class="line">                    icebergSessionProperties.getSessionProperties(),</span><br><span class="line">                    IcebergSchemaProperties.SCHEMA_PROPERTIES,</span><br><span class="line">                    icebergTableProperties.getTableProperties(),</span><br><span class="line">                    <span class="keyword">new</span> AllowAllAccessControl(),</span><br><span class="line">                    procedures);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConnectorHandleResolver 接口用于对数据源 schema 结构等解析处理</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IcebergHandleResolver</span> <span class="keyword">implements</span> <span class="title">ConnectorHandleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTableHandle&gt; getTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTableLayoutHandle&gt; getTableLayoutHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergTableLayoutHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ColumnHandle&gt; getColumnHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergColumnHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorSplit&gt; getSplitClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergSplit.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorOutputTableHandle&gt; getOutputTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergWritableTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorInsertTableHandle&gt; getInsertTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergWritableTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTransactionHandle&gt; getTransactionHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> HiveTransactionHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/143115558" target="_blank" rel="noopener">Presto Connector 实现原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结下 Presto Connectors 的 SPI 实现。在 Presto 中，UDF、EventListener、DataTypes、ParameterTypes、Access Control、Resource Group 以及 Connector&lt;br&gt;都是通过插件机制实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
      <category term="Presto" scheme="http://yoursite.com/categories/BigData/Presto/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Presto 基础</title>
    <link href="http://yoursite.com/2022/03/25/Presto%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2022/03/25/Presto基础/</id>
    <published>2022-03-24T17:18:43.000Z</published>
    <updated>2023-03-02T08:49:04.228Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍下 Presto 的基础概念。</p><a id="more"></a><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p><img src="Presto%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><h2 id="查询计划"><a href="#查询计划" class="headerlink" title="查询计划"></a>查询计划</h2><h3 id="句法优化器"><a href="#句法优化器" class="headerlink" title="句法优化器"></a>句法优化器</h3><h4 id="初始查询计划"><a href="#初始查询计划" class="headerlink" title="初始查询计划"></a>初始查询计划</h4><p>查询最直接的查询计划非常接近其 SQL 语法结构，查询计划是树状的，执行从叶子节点开始，沿着树结构逐步上升。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- Limit[5]</span><br><span class="line">- Sort[orders_sum DESC]</span><br><span class="line">- LateralJoin[2]</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey AND c.custkey = o.custkey]</span><br><span class="line">- CrossJoin</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- EnforceSingleRow[region_name := r.name]</span><br><span class="line">- Filter[r.regionkey = n.regionkey]</span><br><span class="line">- TableScan[region]</span><br></pre></td></tr></table></figure><p>TableScan 算子从底层存储中访问表，并返回包含表中所有行的结果集；<br>Filter 算子接收行并在每一行数据上应用过滤条件，只留下满足条件的行；<br>CrossJoin 算子从两个子节点接收数据集，返回两个数据集中行的所有组合，它可能会将其中一个数据集存放在内存中，从而避免多次访问底层存储；</p><h4 id="谓词下推"><a href="#谓词下推" class="headerlink" title="谓词下推"></a>谓词下推</h4><p>将过滤条件移动到尽可能接近数据源的位置，使数据量在查询开始后尽可能早地开始缩减。<br>案例中，将原 Filter 算子的一部分条件保留在新的简化 Filter 算子中，另一部分和下层的 CrossJoin 算子合并为新的 InnerJoin 算子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey AND c.custkey = o.custkey]  // 原始 Filter 算子</span><br><span class="line">- CrossJoin</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey]      // 简化后的 Filter 算子</span><br><span class="line">- InnerJoin[o.custkey = c.custkey]   // 合并后新产生的 InnerJoin 算子</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">...</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### Cross Join 消除</span><br><span class="line"></span><br><span class="line">```txt</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey]      // 先过滤 nationkey 列</span><br><span class="line">- InnerJoin[o.custkey = c.custkey]   // 然后是 Inner Join custkey</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         // 重新排列为 custkey 在前面</span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] // nationkey 在后面</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="局部聚合"><a href="#局部聚合" class="headerlink" title="局部聚合"></a>局部聚合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- Aggregate[by custkey; totalprice := sum(totalprice)] // 局部预聚合，聚合用户维度的订单金额</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="Lateral-Join-去关联化"><a href="#Lateral-Join-去关联化" class="headerlink" title="Lateral Join 去关联化"></a>Lateral Join 去关联化</h4><p>Lateral Join 可以通过如下方式实现：使用 for 循环迭代一个数据集中的所有行，并对每一行执行另一次查询。</p><p>Presto 将子查询去关联化，将所有的相关条件拉取上来并形成一个标准的 Left Join。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> region r <span class="keyword">WHERE</span> regionkey = n.regionkey)</span><br><span class="line"><span class="keyword">AS</span> region_name</span><br><span class="line"><span class="keyword">FROM</span> nation n</span><br></pre></td></tr></table></figure><p>变换为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">r.name <span class="keyword">AS</span> region_name,</span><br><span class="line">n.name <span class="keyword">AS</span> nation_name</span><br><span class="line"><span class="keyword">FROM</span> nation n <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> region r <span class="keyword">ON</span> r.regionkey = n.regionkey</span><br></pre></td></tr></table></figure><p>平时写 odps sql ，也是习惯用下面这种标准的 left join ，如曝光表 left join 点击表 left join 行为事件表等等。</p><h4 id="Semi-join-IN-去关联化"><a href="#Semi-join-IN-去关联化" class="headerlink" title="Semi-join (IN) 去关联化"></a>Semi-join (IN) 去关联化</h4><p>子查询不只用于在查询中拉取信息，也常用于配合 IN 谓词过滤行。</p><p>下面这个查询，用于找出客户和物品供应商来自同一个国家（地区）的订单，查询这样的订单非常有用，这样可以绕过分发中心直接从供应商发货到消费者，<br>以此来降低运送成本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> o.orderkey</span><br><span class="line"><span class="keyword">FROM</span> lineitem l</span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">JOIN</span> customer <span class="keyword">ON</span> o.custkey = c.custkey</span><br><span class="line"><span class="keyword">WHERE</span> c.nationkey <span class="keyword">IN</span> (</span><br><span class="line"><span class="comment">-- 多次调用的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> s.nationkey</span><br><span class="line"><span class="keyword">FROM</span> part p</span><br><span class="line"><span class="keyword">JOIN</span> partsupp ps <span class="keyword">ON</span> p.partkey = ps.partkey</span><br><span class="line"><span class="keyword">JOIN</span> supplier s <span class="keyword">ON</span> ps.suppkey = s.suppkey</span><br><span class="line"><span class="keyword">WHERE</span> p.partkey = l.partkey</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="基于代价的优化器-CBO"><a href="#基于代价的优化器-CBO" class="headerlink" title="基于代价的优化器 (CBO)"></a>基于代价的优化器 (CBO)</h3><p>Cost Based Optimizer ，计划转换时不但基于本身的形状，也将查询数据的形状考虑在內：</p><ul><li>CPU 时间</li><li>内存使用</li><li>网络带宽</li></ul><p>基于代价优化的查询案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n.name <span class="keyword">AS</span> nation_name,</span><br><span class="line"><span class="keyword">avg</span>(extendedprice) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> nation n, orders o, customer c, lineitem l</span><br><span class="line"><span class="keyword">WHERE</span> n.nationkey = c.nationkey</span><br><span class="line"><span class="keyword">AND</span> c.custkey = o.custkey</span><br><span class="line"><span class="keyword">AND</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> n.nationkey, n.name;</span><br></pre></td></tr></table></figure><p>如果不基于代价进行决策，查询优化器就会使用规则来优化此查询的初始计划。这个计划完全由 SQL 查询的语法结构所决定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[o.orderkey = l.orderkey]  </span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[lineitem]</span><br></pre></td></tr></table></figure><p>下面变换一个 SQL ，仅仅改变一下 WHERE 语句中条件的顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n.name <span class="keyword">AS</span> nation_name,</span><br><span class="line"><span class="keyword">avg</span>(extendedprice) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> nation n, orders o, customer c, lineitem l</span><br><span class="line"><span class="keyword">WHERE</span> c.custkey = o.custkey </span><br><span class="line"><span class="keyword">AND</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">AND</span> n.nationkey = c.nationkey</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> n.nationkey, n.name;</span><br></pre></td></tr></table></figure><p>就产生了一个具有不同 Join 顺序的查询计划：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey]  </span><br><span class="line">- InnerJoin[o.orderkey = l.orderkey]         </span><br><span class="line">- InnerJoin[c.custkey = o.custkey] </span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[lineitem]</span><br><span class="line">- TableScan[nation]</span><br></pre></td></tr></table></figure><p>从时间复杂度的角度来看，无论是将 nation 表 Join 到 customer 表，还是反过来将 customer 表 Join 到 nation 表，都无关紧要，<br>两个表都要处理，在使用 Hash Join 时，总的运行时间与输出行数成正比。<br>然而，时间复杂度并不是唯一的考量标准，通常对于处理数据的程序，尤其是大规模数据库系统来说，内存使用和网络流量也很重要。</p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><h3 id="blackhole-Connector"><a href="#blackhole-Connector" class="headerlink" title="blackhole Connector"></a>blackhole Connector</h3><p>它作为任何数据的最终消费者，类似于 UNIX 操作系统中的 null 设备（/dev/null）。可以把它作为从其他 catalog 中读取并插入数据的目标，实际上不写入任何内容，所以可以用它来衡量 catalog<br>读取的性能。</p><p>/etc/catalog/blackhole.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = blackhole</span><br></pre></td></tr></table></figure><h3 id="JMX-Connector"><a href="#JMX-Connector" class="headerlink" title="JMX Connector"></a>JMX Connector</h3><p>/etc/catalog/jmx.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = jmx</span><br></pre></td></tr></table></figure><p>为最新数据提供了名为 current 的 schema ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> jmx.current;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> vmname, uptime, node <span class="keyword">FROM</span> jmx.current.<span class="string">"java.lang.type=runtime"</span>;</span><br></pre></td></tr></table></figure><h3 id="Memory-Connector"><a href="#Memory-Connector" class="headerlink" title="Memory Connector"></a>Memory Connector</h3><p>可以像使用临时数据库一样使用内存连接器，所有的数据都存储在集群的内存中，停止集群就会销毁数据，可以用作调试。</p><p>/etc/catalog/memory.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = memory</span><br></pre></td></tr></table></figure><h3 id="tpch-Connector"><a href="#tpch-Connector" class="headerlink" title="tpch Connector"></a>tpch Connector</h3><p>TPC-H 是一款面向商品零售业的决策支持系统测试基准，它定义了8张表，22个查询，遵循 SQL92 。TPC-H 基准的数据库模式遵循第三范式，其数据维护功能仅仅限制了潜在的对索引的过度使用，而没有测试 DBMS 执行 ETL 的能力。同时，新兴的数据仓库开始采用新的模型，如星型模型、雪花模型，TPC-H 已经不能精准反应当今数据库系统的真实性能。</p><p>/etc/catalog/tpch.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = tpch</span><br><span class="line">tpch.splits-per-node = 4</span><br></pre></td></tr></table></figure><p>从 TPC 官网下载 TPC-H 的 zip 包 ，需要填写一些个人信息，之后会发送一个下载链接到邮箱中：</p><p><img src="TPC%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDTPCH%E7%9A%84zip%E5%8C%85.png" alt></p><p><img src="TPCH%E5%B7%A5%E5%85%B7%E5%8C%85%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./916c6f4e-1935-4f81-ad6f-04165831ae11-tpc-h-tool/TPC-H_Tools_v3.0.0/dbgen</span><br><span class="line">cp makefile.suite Makefile</span><br><span class="line">vi Makefile</span><br></pre></td></tr></table></figure><p>修改 Makefile 的 103 ～ 111 行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CC      = gcc</span><br><span class="line"># Current values for DATABASE are: INFORMIX, DB2, TDAT (Teradata)</span><br><span class="line">#                                  SQLSERVER, SYBASE, ORACLE, VECTORWISE</span><br><span class="line"># Current values for MACHINE are:  ATT, DOS, HP, IBM, ICL, MVS, </span><br><span class="line">#                                  SGI, SUN, U2200, VMS, LINUX, WIN32 </span><br><span class="line"># Current values for WORKLOAD are:  TPCH</span><br><span class="line">DATABASE= ORACLE</span><br><span class="line">MACHINE = LINUX</span><br><span class="line">WORKLOAD = TPCH</span><br></pre></td></tr></table></figure><p><img src="%E4%BF%AE%E6%94%B9TPCH_Makefile.png" alt></p><p>执行 make ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>在 Mac 上编译可能会报如下错误，因为 mac 下的 malloc 头文件移动到了 sys 下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -DDBNAME=\"dss\" -DLINUX -DORACLE -DTPCH -DRNG_TEST -D_FILE_OFFSET_BITS=64    -c -o bm_utils.o bm_utils.c</span><br><span class="line">bm_utils.c:71:10: fatal error: <span class="string">'malloc.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;malloc.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [bm_utils.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>bm_utils.c</code> 文件的第71行，<code>varsub.c</code> 文件的第44行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>查看 <code>TPC-H_Tools_v3.0.0/dbgen</code> 目录下生成了两个新的命令 <code>dbgen</code> 与 <code>qgen</code> ，分别用来生成数据与生成 sql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt</span><br><span class="line">-rwxr-xr-x   1 staff  staff  105842  3 28 11:29 dbgen</span><br><span class="line">-rwxr-xr-x   1 staff  staff  100977  3 28 11:31 qgen</span><br></pre></td></tr></table></figure><p>生成数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 dbgen、qgen 命令拷贝至一个单独的目录，便于测试</span></span><br><span class="line">cp dbgen tpch-kit</span><br><span class="line">cp dists.dss tpch-kit</span><br><span class="line">cp queries tpch-kit</span><br><span class="line">cp qgen tpch-kit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数用于控制数据集规模，1GB；-f 参数强制覆盖已有数据；</span></span><br><span class="line"><span class="built_in">cd</span> tpch-kit</span><br><span class="line">./dbgen -s 1 -f </span><br><span class="line"></span><br><span class="line">ls -lrt *.tpl</span><br><span class="line">-rw-r--r--   1 staff  staff    1409184  3 28 11:42 supplier.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff   24346144  3 28 11:42 customer.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  171952161  3 28 11:42 orders.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  759863287  3 28 11:42 lineitem.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff   24135125  3 28 11:42 part.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  118984616  3 28 11:42 partsupp.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff       2224  3 28 11:42 nation.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff        389  3 28 11:42 region.tbl</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">表名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">supplier</td><td align="center">供货商</td></tr><tr><td align="center">customer</td><td align="center">顾客</td></tr><tr><td align="center">orders</td><td align="center">订单</td></tr><tr><td align="center">lineitem</td><td align="center">在线商品</td></tr><tr><td align="center">part</td><td align="center">零件</td></tr><tr><td align="center">partsupp</td><td align="center">供货商的零件信息</td></tr><tr><td align="center">nation</td><td align="center">国家</td></tr><tr><td align="center">region</td><td align="center">地区</td></tr></tbody></table><p>可以将 .tpl 数据转换为 csv ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls *.tbl`; <span class="keyword">do</span> sed <span class="string">'s/|$//'</span> <span class="variable">$i</span> &gt; <span class="variable">$&#123;i/tbl/csv&#125;</span>; <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>生成 query sql ，<code>DSS_QUERY=./queries</code> 是 sql 模板，<code>-s</code> 表示数据集规模：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpch-kit</span><br><span class="line">mkdir q</span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> `seq 1 22`; <span class="keyword">do</span>     DSS_QUERY=./queries ./qgen -s 1 <span class="variable">$id</span> -b ./dists.dss &gt; q/<span class="variable">$id</span>.sql; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>可能会产生如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Open failed <span class="keyword">for</span> ./queries/1.sql at qgen.c:170</span><br></pre></td></tr></table></figure><p>需要设置下环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> DSS_CONFIG=tpch-kit/dbgen</span><br><span class="line"><span class="built_in">export</span> DSS_QUERY=<span class="variable">$DSS_CONFIG</span>/PATH_TO_QUERIES_FOLDER</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>在 <code>tpch-kit/dbgen/q</code> 目录将会生成22个 query sql 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpch-kit/q</span><br><span class="line">ls -lrt</span><br><span class="line">-rw-r--r--@ 1 staff  staff   598  3 28 14:02 1.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   769  3 28 14:02 2.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   478  3 28 14:02 3.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   421  3 28 14:02 4.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   556  3 28 14:02 5.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   311  3 28 14:02 6.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   893  3 28 14:02 7.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   868  3 28 14:02 8.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   672  3 28 14:02 9.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   592  3 28 14:02 10.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   568  3 28 14:02 11.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   659  3 28 14:02 12.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   413  3 28 14:02 13.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   395  3 28 14:02 14.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   594  3 28 14:02 15.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   550  3 28 14:02 16.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   350  3 28 14:02 17.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   516  3 28 14:02 18.sql</span><br><span class="line">-rw-r--r--  1 staff  staff  1041  3 28 14:02 19.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   670  3 28 14:02 20.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   727  3 28 14:02 21.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   726  3 28 14:02 22.sql</span><br></pre></td></tr></table></figure><h3 id="tpcds-Connector"><a href="#tpcds-Connector" class="headerlink" title="tpcds Connector"></a>tpcds Connector</h3><p>TPC-DS 采用星型、雪花等多维数据模式，包含7张事实表，17张维度表，平均每张表含有18列。其工作负载包含99个 SQL 查询，覆盖 SQL92 和 2003 的核心部分以及 OLAP 。这个测试集包含对大数据集的统计、报表生成、联机查询、数据挖掘等复杂应用，测试用的数据和值是有倾斜的，与真实数据一致。TPC-DS 是与真实场景非常接近的一个测试集。</p><p>/etc/catalog/tpcds.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = tpcds</span><br><span class="line">tpcds.splits-per-node = 4</span><br></pre></td></tr></table></figure><h4 id="安装-TPC-DS-工具"><a href="#安装-TPC-DS-工具" class="headerlink" title="安装 TPC-DS 工具"></a>安装 TPC-DS 工具</h4><p>由于从 TPC 官网下载的 zip 包：</p><p><img src="TPC%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDTPCDS%E7%9A%84zip%E5%8C%85.png" alt></p><p>生成数据时，会报如下错误，暂未找到解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dsdgen Population Generator (Version 3.2.0)</span><br><span class="line">Copyright Transaction Processing Performance Council (TPC) 2001 - 2021</span><br><span class="line">Warning: This scale factor is valid <span class="keyword">for</span> QUALIFICATION ONLY</span><br><span class="line">Runtime ERROR: Distribution over-run/under-run</span><br><span class="line">Check distribution definitions and usage <span class="keyword">for</span> cities.</span><br><span class="line">index = -1, length=1000.</span><br></pre></td></tr></table></figure><p>因此直接从 <a href="https://github.com/gregrahn/tpcds-kit" target="_blank" rel="noopener"></a> 下载并进行编译。</p><p>编译 tpcds ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../tpc-ds-tool/tools</span><br><span class="line">cp Makefile.suite Makefile</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>在 MacOS 上编译，可能会出现如下几个报错：</p><p>错误1 ：因为 <code>values.h</code> 是 GNU 的库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In file included from mkheader.c:37:</span><br><span class="line">./porting.h:46:10: fatal error: <span class="string">'values.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;values.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [mkheader.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>porting.h</code> 文件的第46行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;values.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>错误2：malloc.h 头文件位置不对：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date.c:40:10: fatal error: <span class="string">'malloc.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;malloc.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [date.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>date.c</code> 文件的第42行，<code>dist.c</code> 文件的第54行，<code>misc.c</code> 文件的第45行，<code>tokenizer.l</code>的第50行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>错误3：缺少宏定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">genrand.c:87:12: error: use of undeclared identifier <span class="string">'MAXINT'</span></span><br><span class="line">      s += MAXINT;</span><br><span class="line">           ^</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>因为 mac 和 linux 的 h 文件差异，部分宏 mac 并没有，因此直接在 <code>genrand.h</code> 中自己添加即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXINT 4096000</span></span><br></pre></td></tr></table></figure><p>查看 <code>tpc-ds-tool/tools</code> 目录下生成了两个新的命令 <code>dbgen</code> 与 <code>qgen</code> ，分别用来生成数据与生成 sql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt *gen</span><br><span class="line">-rwxr-xr-x  1 staff  staff  329603  3 28 16:24 dsdgen</span><br><span class="line">-rwxr-xr-x  1 staff  staff  249219  3 28 16:25 dsqgen</span><br></pre></td></tr></table></figure><h4 id="创建-TPC-DS-测试需要用到的表"><a href="#创建-TPC-DS-测试需要用到的表" class="headerlink" title="创建 TPC-DS 测试需要用到的表"></a>创建 TPC-DS 测试需要用到的表</h4><ol><li>准备好创建表语句</li></ol><p>TPC-DS 已经提前准备好了创建表相关的 SQL 文件，位于 tools 目录下：</p><ul><li>tpcds.sql：创建25张表</li><li>tpcds_ri.sql：创建表与表之间关系的 sql 语句</li><li>tpcds_source.sql</li></ul><ol start="2"><li>利用数据库连接工具（如：navicat）创建相应的数据库和表</li></ol><h4 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpc-ds-tool</span><br><span class="line">mkdir data</span><br><span class="line"><span class="built_in">cd</span> tools</span><br><span class="line"></span><br><span class="line">./dsdgen -SCALE 1GB -FORCE -DIR ../data</span><br></pre></td></tr></table></figure><p>之后通常会通过命令将测试数据 load 到具体的数据源存储中，用于后续测试。</p><h4 id="生成99个-query-sql"><a href="#生成99个-query-sql" class="headerlink" title="生成99个 query sql"></a>生成99个 query sql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpc-ds-tool</span><br><span class="line">mkdir sql</span><br><span class="line"><span class="built_in">cd</span> tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环命令，生成99个 query sql</span></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> `seq 1 99`; <span class="keyword">do</span>   ./dsqgen -DIRECTORY ../query_templates -TEMPLATE <span class="string">"query<span class="variable">$&#123;id&#125;</span>.tpl"</span> -DIALECT oracle -FILTER Y &gt; ../sql/query<span class="variable">$&#123;id&#125;</span>.sql; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成单个 query sql 示例</span></span><br><span class="line">./dsqgen -DIRECTORY ../query_templates -TEMPLATE <span class="string">"query8.tpl"</span> -DIALECT oracle -VERBOSE Y &gt; ../sql/query8.sql</span><br></pre></td></tr></table></figure><h3 id="RDBMS-Connector"><a href="#RDBMS-Connector" class="headerlink" title="RDBMS Connector"></a>RDBMS Connector</h3><p>/etc/catalog/postgresql.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connector.name = &apos;postgresql&apos;</span><br><span class="line">connectot-url = jdbc:postgresql://db.example.com:5432/database</span><br><span class="line">connector-user = root</span><br><span class="line">connector-password = secret</span><br></pre></td></tr></table></figure><h3 id="Hive-Connector"><a href="#Hive-Connector" class="headerlink" title="Hive Connector"></a>Hive Connector</h3><p>/etc/catalog/hive.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = hive-hadoop2</span><br><span class="line">hive.metastore.uri = thrift://example.net:9083</span><br></pre></td></tr></table></figure><p>建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hive.web.page_views (</span><br><span class="line">view_time <span class="built_in">timestamp</span>,</span><br><span class="line">user_id <span class="built_in">bigint</span>,</span><br><span class="line">page_url <span class="built_in">varchar</span>,</span><br><span class="line">view_date <span class="built_in">date</span>,</span><br><span class="line">country <span class="built_in">varchar</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="keyword">format</span> = <span class="string">'ORC'</span>,</span><br><span class="line">external_location = <span class="string">'s3://starburst-external/pageviews'</span>,</span><br><span class="line">partitioned_by = <span class="built_in">ARRAY</span>[<span class="string">'view_date'</span>, <span class="string">'country'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Presto 自动发现和添加分区的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> system.sync_partition_metadata (</span><br><span class="line"><span class="string">'web'</span>,</span><br><span class="line"><span class="string">'page_views'</span>,</span><br><span class="line"><span class="string">'FULL'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Phoenix-Connector"><a href="#Phoenix-Connector" class="headerlink" title="Phoenix Connector"></a>Phoenix Connector</h3><p>/etc/catalog/bigtables.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = phoenix</span><br><span class="line">phoenix.connection-url = jdbc:phoenix:zookeeper1.zookeeper2:2181:/hbase</span><br></pre></td></tr></table></figure><h3 id="Druid-Connector"><a href="#Druid-Connector" class="headerlink" title="Druid Connector"></a>Druid Connector</h3><p>/etc/catalog/druid.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connector.name = druid</span><br><span class="line">druid.coordinator-url = http://localhost:8081</span><br><span class="line">druid.broker-url = http://localhost:8082</span><br></pre></td></tr></table></figure><h3 id="Kafka-Connector"><a href="#Kafka-Connector" class="headerlink" title="Kafka Connector"></a>Kafka Connector</h3><p>/etc/catalog/trafficstream.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connector.name = kafka</span><br><span class="line">kafka.table-names = web.pages,web.users</span><br><span class="line">kafka.nodes = trafficstream.example.com:9092</span><br></pre></td></tr></table></figure><p>kafka 的消息过期配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.retention.hours = 168</span><br><span class="line">log.segment.bytes = 1073741824</span><br><span class="line">log.clenup.policy = delete</span><br></pre></td></tr></table></figure><p>可以定期将 kafka 的数据迁移至 hdfs：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 hdfs 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  hdfs.web.page_views</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line"><span class="keyword">format</span> = <span class="string">'ORC'</span>,</span><br><span class="line">partitioned_by = <span class="built_in">ARRAY</span>[<span class="string">'view_date'</span>]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> trafficstream.web.page_views;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定期查询导入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hdfs.web.page_views</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> trafficstream.web.page_views;</span><br></pre></td></tr></table></figure><h3 id="Iceberg-Connector"><a href="#Iceberg-Connector" class="headerlink" title="Iceberg Connector"></a>Iceberg Connector</h3><p>/etc/catalog/iceberg.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connector.name = iceberg</span><br><span class="line">hive.metastore.uri = thrift://example.net:9083</span><br><span class="line">iceberg.catalog.type = hive</span><br><span class="line">iceberg.file-format = PARQUET</span><br><span class="line">iceberg.compression-codec = GZIP</span><br></pre></td></tr></table></figure><h3 id="联邦查询"><a href="#联邦查询" class="headerlink" title="联邦查询"></a>联邦查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f.uniquecarrier, c.description, <span class="keyword">count</span>(*) <span class="keyword">AS</span> ct</span><br><span class="line"><span class="keyword">FROM</span> hive.ontime.flights_orc f,  <span class="comment">-- hive 事实明细表</span></span><br><span class="line">postgresql.airline.carrier c <span class="comment">-- postgresql 关系维表</span></span><br><span class="line"><span class="keyword">WHERE</span> c.code = f.uniquecarrier</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> f.uniquecarrier, c.description</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span>(*) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考书籍：《Presto实战》、《Presto技术内幕》<br> <a href="https://github.com/prestodb/f8-2019-demo" target="_blank" rel="noopener">f8-2019-demo</a><br> <a href="https://prestodb.io" target="_blank" rel="noopener">官网</a><br> <a href="https://github.com/prestodb/presto" target="_blank" rel="noopener">presto 代码库</a><br> <a href="https://trino.io/Presto_SQL_on_Everything.pdf" target="_blank" rel="noopener">presto 论文</a><br> <a href="https://prestodb.io/resources.html#libraries" target="_blank" rel="noopener">presto 语言 libraries</a><br> <a href="https://jupyter.org" target="_blank" rel="noopener">jupyter notebook</a><br> <a href="https://www.tpc.org/tpch/?spm=a2c4g.11186623.0.0.b1752815xppTva" target="_blank" rel="noopener">TPC 官网</a><br> <a href="https://sq.sf.163.com/blog/article/169594668340142080" target="_blank" rel="noopener">【大数据之数据仓库】TPCH工具使用指南</a><br> <a href="https://sq.sf.163.com/blog/article/169598335655010304" target="_blank" rel="noopener">【大数据之数据仓库】基准测试之TPCH</a><br> <a href="https://programmerah.com/compiling-tpc-h-tools-for-mac-9846/" target="_blank" rel="noopener">Compiling TPC-H tools for Mac</a><br> <a href="https://github.com/gregrahn/tpch-kit" target="_blank" rel="noopener">tpch-kit包</a><br> <a href="https://sq.sf.163.com/blog/article/169593936715112448" target="_blank" rel="noopener">【大数据之数据仓库】TPCDS工具使用指南</a><br> <a href="https://sq.sf.163.com/blog/article/169597393857601536" target="_blank" rel="noopener">【大数据之数据仓库】基准测试之TPCDS</a><br> <a href="https://github.com/gregrahn/tpcds-kit" target="_blank" rel="noopener">tpcds-kit包</a><br> <a href="https://www.baifachuan.com/posts/34f97a60.html" target="_blank" rel="noopener">MacOS 下编译 tpcds</a><br> <a href="https://github.com/gregrahn/tpcds-kit/commit/1653aeca89658ff42ec544b8fca0386fa56c835a" target="_blank" rel="noopener">DEFINE 缺失修复记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍下 Presto 的基础概念。&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
      <category term="Presto" scheme="http://yoursite.com/categories/BigData/Presto/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-188: Introduce Built-in Dynamic Table Storage</title>
    <link href="http://yoursite.com/2022/03/09/Flink-FLIP-188-Introduce-Built-in-Dynamic-Table-Storage/"/>
    <id>http://yoursite.com/2022/03/09/Flink-FLIP-188-Introduce-Built-in-Dynamic-Table-Storage/</id>
    <published>2022-03-09T07:05:32.000Z</published>
    <updated>2023-02-10T07:15:48.034Z</updated>
    
    <content type="html"><![CDATA[<p>动态表：全新的 Flink 内置存储。</p><p>Flink Dynamic Table 可以理解为一套流批一体的存储，并无缝对接 Flink SQL 。原来 Flink 只能读写像 Kafka 、 HBase 这样的外部表，现在用一套 Flink SQL 语法就可以像原来创建源表和目标表一样，创建一个 Dynamic Table。流式数仓的分层数据可以全部放到 Flink Dynamic Table 中，通过 Flink SQL 就能实时地串联起整个数仓的分层，既可以对 Dynamic Table 中不同明细层的数据做实时查询和分析，也可以对不同分层做批量 ETL 处理。</p><p>最终，利用 Flink CDC 、Flink SQL 、Flink Dynamic Table 就可以构建一套完整的流式数仓，实现实时离线一体化的体验。</p><p>目前，作为一个独立的开源项目 <a href="https://github.com/apache/flink-table-store" target="_blank" rel="noopener">flink-table-store</a> 开发中，该功能预计在 Flink 1.15 中发布。</p><a id="more"></a><p><img src="Dynamic_Table_Storage%E5%A4%A7%E8%87%B4%E7%BB%93%E6%9E%84.png" alt></p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>生产应用中，用户倾向于使用 Kafka 存储 logs ，使用 hudi/iceberg/click 作为一张表。<code>FLIP-188</code> 提议引入一种内置的存储：动态表，从 Flink SQL 视角，真正统一 changelog&amp;table 实现，未来也可以支持点查。</p><p>内置存储有以下几个特点：</p><ol><li>Flink SQL 的内置存储</li></ol><ul><li>改善可用性问题</li><li>Flink DDL 不再是数据源的简单映射，而是真正创建表</li><li>屏蔽和抽象底层技术细节，去除连接 connector 需要填写的 options ，使 SQL 聚焦于业务逻辑本身</li></ul><ol start="2"><li>支持亚秒级写入和消耗</li></ol><ul><li>可以通过面向服务的消息队列（如 Kafka）支持</li><li>高吞吐的 scan 能力</li><li>使用 columnar 格式的文件系统，同 iceberg/hudi 一样</li></ul><ol start="3"><li>还需要自动处理各种 Insert/Update/Delete 操作和表定义</li><li>接收任何类型的变更日志</li><li>接收任何类型的数据类型</li><li>表可以有主键，也可以没有主键</li></ol><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>从数据结构上看， Dynamic Table 内部有两个核心组件，File Storage 和 Log Storage ：</p><p><img src="Flink_Dynamic_Table%E7%9A%84%E5%A4%A7%E4%BD%93%E6%A0%BC%E5%BC%8F.png" alt></p><h3 id="File-Storage"><a href="#File-Storage" class="headerlink" title="File Storage"></a>File Storage</h3><p>Table 的文件存储形式，采用 LSM 架构，支持流式的更新、删除、增加等。采用开放的列存结构，支持压缩等优化。对应 Flink SQL 的批模式，支持全量批式读取。</p><p><img src="FileStore%E7%9A%84%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F.png" alt></p><ol><li>Data 目录</li></ol><ul><li>Part 目录：partition，在 DDL 中以 “PARTITIONED BY” 定义，同 Hive 一样，如 “dt=2022-03-12”</li><li>Bucket 目录：partition 下的 bucket ，数据通过 hash 落入 bucket ，分桶对应一个由多个 files 组成的 LSM</li><li>LSM datafiles：数据文件，抽象 format，支持 orc、parquet、avro ，record schema 如下：<br>SequenceNumber<br>ValueKind(add or delete)<br>RowData: key<br>RowData: value</li></ul><ol start="2"><li>Meta 文件</li></ol><ul><li><p>Manifest file: 代表多少 files 已经 added ，多少 files 已经 deleted，代表 table 的一次变更，Manifest 记录增量文件的版本，schema 如下：<br>data file 名称<br>FileKind: delete 或 add<br>partition<br>bucket<br>min/max key: 用于 skipping<br>min/max sequenceNumber<br>统计数据：data file 大小，行数</p></li><li><p>Snapshot file: manifest files 集合，代表 table 的一个 snapshot 。snapshot 代表一个版本的所有 files ，snapshot file 的 schema 是一个 Manifest：<br>manifest file名称<br>lower/upper partition: 用于分区裁剪<br>统计数据：manifest file 大小，added file 个数，deleted file 个数</p></li></ul><ul><li><p>table path 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262$     ll</span><br><span class="line">total 0</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ./</span><br><span class="line">drwx------  3 staff  staff   96  3 11 17:51 ../</span><br><span class="line">drwxr-xr-x  5 staff  staff  160  3 11 17:55 manifest/</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 p=p1/</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 p=p2/</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:55 snapshot/</span><br></pre></td></tr></table></figure></li><li><p>分区 p1、分桶 bucket-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/p=p1$     ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ../</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 bucket-1/</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 bucket-2/</span><br><span class="line"></span><br><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/p=p1/bucket-1$     ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 ./</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  426  3 11 17:55 sst-90911871-51d6-4323-aa55-f25c8a29021d-0</span><br></pre></td></tr></table></figure></li><li><p>manifest 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/manifest$     ll</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x  5 staff  staff   160  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff   192  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  2681  3 11 17:55 manifest-5a53de30-1d30-43f0-a837-078ca61e0b93-0</span><br><span class="line">-rw-r--r--  1 staff  staff   837  3 11 17:55 manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-0</span><br><span class="line">-rw-r--r--  1 staff  staff   931  3 11 17:55 manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-1</span><br></pre></td></tr></table></figure></li><li><p>snapshot-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/snapshot$     ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  283  3 11 17:55 snapshot-1</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"baseManifestList"</span>:<span class="string">"manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-0"</span>,</span><br><span class="line">    <span class="attr">"deltaManifestList"</span>:<span class="string">"manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-1"</span>,</span><br><span class="line">    <span class="attr">"commitUser"</span>:<span class="string">"user"</span>,</span><br><span class="line">    <span class="attr">"commitIdentifier"</span>:<span class="string">"9223372036854775807"</span>,</span><br><span class="line">    <span class="attr">"commitKind"</span>:<span class="string">"APPEND"</span>,</span><br><span class="line">    <span class="attr">"timeMillis"</span>:<span class="number">1646992531086</span>,</span><br><span class="line">    <span class="attr">"logOffsets"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Log-Storage"><a href="#Log-Storage" class="headerlink" title="Log Storage"></a>Log Storage</h3><p>Table 的操作记录，是一个不可变更序列，对应 Flink SQL 的流模式，可以通过 Flink SQL 订阅 Dynamic Table 的增量变化做实时分析，支持插件化实现。<br>依赖 Kafka 作为底层存储，Log Storage 中的 bucket 就对应 Kafka Partition 。</p><h2 id="源码阅读准备"><a href="#源码阅读准备" class="headerlink" title="源码阅读准备"></a>源码阅读准备</h2><p><a href="https://github.com/apache/flink" target="_blank" rel="noopener">flink git仓库</a> 切换到 master 分支，当前是 1.15-SNAPSHOT 分支，需要 install 到本地，flink-table-store 需要引用这个版本。<br><a href="https://github.com/apache/flink-table-store" target="_blank" rel="noopener">flink-table-store git仓库</a>，切换到 master 分支。</p><p><code>FileStoreITCase</code> </p><ol><li>分区表</li></ol><p>测试数据集：</p><p>0,p1,1<br>0,p1,2<br>5,p1,1<br>6,p2,1<br>3,p2,5<br>5,p2,1</p><p>buckets = 3<br>partitions {1}<br>keys {2}</p><p>中间结果：<br>partition -&gt; p1<br>key -&gt; 1<br>row -&gt; 0,p1,1<br>partition -&gt; p1<br>key -&gt; 1<br>row -&gt; 5,p1,1<br>partition -&gt; p2<br>key -&gt; 1<br>row -&gt; 6,p2,1<br>partition -&gt; p2<br>key -&gt; 1<br>row -&gt; 5,p2,1<br>partition -&gt; p1<br>key -&gt; 2<br>row -&gt; 0,p1,2<br>partition -&gt; p2<br>key -&gt; 5<br>row -&gt; 3,p2,5</p><p>输出结果：<br>5,p2,1<br>3,p2,5<br>5,p1,1<br>0,p1,2  </p><ol start="2"><li>非分区表</li></ol><p>测试数据集：</p><p>0,p1,1<br>0,p1,2<br>5,p1,1<br>6,p2,1<br>3,p2,5<br>5,p2,1</p><p>buckets = 3<br>keys {2}</p><p>key -&gt; 1<br>row -&gt; 0,p1,1<br>key -&gt; 1<br>row -&gt; 5,p1,1<br>key -&gt; 1<br>row -&gt; 6,p2,1<br>key -&gt; 1<br>row -&gt; 5,p2,1<br>key -&gt; 2<br>row -&gt; 0,p1,2<br>key -&gt; 5<br>row -&gt; 3,p2,5</p><p>输出结果：<br>5,p2,1<br>0,p1,2<br>3,p2,5</p><h2 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h2><ol><li>LSM 处理（类似 Leveldb）</li></ol><ul><li>在内存中维护 memtable ，数据直接写入 memtable ，每条数据都有一个 sequenceNumber 。对于相同的 key ，最大 sequenceNumber 的 key 将会覆盖小 sequenceNumber </li><li>当 memtable 已满或 PrepareCommit ，执行刷盘，按 key + sequenceNumber 排序，合并重复的 key ，使用特殊的 format 将数据写入 remote file</li><li>异步线程执行 LSM compactions</li></ul><ol start="2"><li>PrepareCommit</li></ol><ul><li>刷写 memtable</li><li>提交信息：DeleteFiles 、AddFiles</li></ul><ol start="3"><li>Global Commit</li></ol><ul><li>读取旧 snapshots ，如果 checkpoint 已提交，则返回</li><li>读取前一个 snapshot-{i} ，将 buckets 的 deleteFiles 和 addFiles 写入新的 manifest ，生成一个新的 snapshot-${i+1}</li></ul><h2 id="读取流程"><a href="#读取流程" class="headerlink" title="读取流程"></a>读取流程</h2><ol><li>Planner</li></ol><ul><li>读取当前的 snapshot ，根据过滤条件裁剪分区，获得需要读取的 manifests</li><li>为每个 partition 中的每个 bucket ，合并 manifests 中的 deleteFiles 和 addFiles ，生成一个 file list</li></ul><ol start="2"><li>SplitEnumerator</li></ol><ul><li>遍历需要读取的 partitions ，为每个 bucket 生成相应的 SourceSplit</li><li>根据过滤条件过滤出 bucket 中需要读取的 files ，在 SourceSplit 生成一个 LSM 层</li></ul><ol start="3"><li>Runtime Task</li></ol><ul><li>获得要读取的 SourceSplit ，生成 LSM 的 MergeIterator ，并读取数据</li></ul><h2 id="几个关键类图"><a href="#几个关键类图" class="headerlink" title="几个关键类图"></a>几个关键类图</h2><h3 id="FileStore-类图"><a href="#FileStore-类图" class="headerlink" title="FileStore 类图"></a>FileStore 类图</h3><p><img src="FileStore%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="FileStoreSource-类图"><a href="#FileStoreSource-类图" class="headerlink" title="FileStoreSource 类图"></a>FileStoreSource 类图</h3><p><img src="FileStoreSource%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="StoreSink-类图"><a href="#StoreSink-类图" class="headerlink" title="StoreSink 类图"></a>StoreSink 类图</h3><p><img src="StoreSink%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="mergetree-包类图"><a href="#mergetree-包类图" class="headerlink" title="mergetree 包类图"></a>mergetree 包类图</h3><p><img src="mergetree%E5%8C%85%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="KafkaLogStore类图"><a href="#KafkaLogStore类图" class="headerlink" title="KafkaLogStore类图"></a>KafkaLogStore类图</h3><p>在 flink-table-store/flink-table-store-kafka/src/main/resources/META-INF/services 路径上有一个文件 <code>org.apache.flink.table.factories.Factory</code>  中定义了 <code>KafkaLogStoreFactory</code> ，用 SPI 机制来实现 flink-table-store 的 <code>LogStoreTableFactory</code> 。</p><p><img src="kafkaLogStore%E7%B1%BB%E5%9B%BE.png" alt></p><h4 id="KafkaLogSourceProvider"><a href="#KafkaLogSourceProvider" class="headerlink" title="KafkaLogSourceProvider"></a>KafkaLogSourceProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaLogSourceProvider</span> <span class="keyword">implements</span> <span class="title">LogSourceProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaSource&lt;RowData&gt; <span class="title">createSource</span><span class="params">(@Nullable Map&lt;Integer, Long&gt; bucketOffsets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (consistency) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启 Kafka 读取事务</span></span><br><span class="line">            <span class="keyword">case</span> TRANSACTIONAL:</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add read committed for transactional consistency mode.</span></span><br><span class="line">                properties.setProperty(ISOLATION_LEVEL_CONFIG, <span class="string">"read_committed"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 满足最终一致性</span></span><br><span class="line">            <span class="keyword">case</span> EVENTUAL:</span><br><span class="line">                <span class="keyword">if</span> (keyDeserializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Can not use EVENTUAL consistency mode for non-pk table."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                properties.setProperty(ISOLATION_LEVEL_CONFIG, <span class="string">"read_uncommitted"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> KafkaSource.&lt;RowData&gt;builder()</span><br><span class="line">                .setTopics(topic)</span><br><span class="line">                .setStartingOffsets(toOffsetsInitializer(bucketOffsets))</span><br><span class="line">                .setProperties(properties)</span><br><span class="line">                .setDeserializer(createDeserializationSchema())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">KafkaRecordDeserializationSchema&lt;RowData&gt; <span class="title">createDeserializationSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> primaryKey.length &gt; <span class="number">0</span></span><br><span class="line">                ? KafkaRecordDeserializationSchema.of(</span><br><span class="line">                        <span class="keyword">new</span> KafkaLogKeyedDeserializationSchema(</span><br><span class="line">                                physicalType, primaryKey, keyDeserializer, valueDeserializer))</span><br><span class="line">                : KafkaRecordDeserializationSchema.valueOnly(valueDeserializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KafkaLogSinkProvider"><a href="#KafkaLogSinkProvider" class="headerlink" title="KafkaLogSinkProvider"></a>KafkaLogSinkProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaLogSinkProvider</span> <span class="keyword">implements</span> <span class="title">LogSinkProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaSink&lt;SinkRecord&gt; <span class="title">createSink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        KafkaSinkBuilder&lt;SinkRecord&gt; builder = KafkaSink.builder();</span><br><span class="line">        <span class="keyword">switch</span> (consistency) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TRANSACTIONAL:</span><br><span class="line">                builder.setDeliverGuarantee(DeliveryGuarantee.EXACTLY_ONCE)</span><br><span class="line">                        .setTransactionalIdPrefix(<span class="string">"log-store-"</span> + topic);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> EVENTUAL:</span><br><span class="line">                <span class="keyword">if</span> (keySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Can not use EVENTUAL consistency mode for non-pk table."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.setDeliverGuarantee(DeliveryGuarantee.AT_LEAST_ONCE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.setBootstrapServers(</span><br><span class="line">                        properties.get(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG).toString())</span><br><span class="line">                .setKafkaProducerConfig(properties)</span><br><span class="line">                .setRecordSerializer(createSerializationSchema())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;RecordMetadata&gt; <span class="title">createMetadataConsumer</span><span class="params">(WriteCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> meta -&gt; callback.onCompletion(meta.partition(), meta.offset());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">KafkaLogSerializationSchema <span class="title">createSerializationSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaLogSerializationSchema(</span><br><span class="line">                topic, keySerializer, valueSerializer, changelogMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="Demo1-%E6%B5%81%E5%BC%8F%E6%95%B0%E4%BB%93-pipeline.png" alt></p><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>MySql CDC : 订单表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">order_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">trans_amount <span class="built_in">BIGINT</span>,</span><br><span class="line">gmt_create <span class="built_in">VARCHAR</span>,</span><br><span class="line">dt <span class="keyword">AS</span> <span class="keyword">DATE_FORMAT</span>(gmt_create, <span class="string">'yyyy-MM-dd'</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (order_id) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="string">'connector'</span> = <span class="string">'mysql-cdc'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'database-name'</span> = <span class="string">'retail'</span>,</span><br><span class="line"><span class="string">'table-name'</span> = <span class="string">'orders'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>MySql CDC : 类目表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> cate_dim (</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (cate_id) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="string">'connector'</span> = <span class="string">'mysql-cdc'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'database-name'</span> = <span class="string">'retail'</span>,</span><br><span class="line"><span class="string">'table-name'</span> = <span class="string">'category'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>Flink 动态表：DWD 订单类目宽表</li></ul><p>创建动态表的 DDL ，不用再指定 connector options ，就像在离线平台创建表一样，只需要指定表字段、主键、分区即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> dwd_orders_cate (</span><br><span class="line">dt <span class="keyword">STRING</span>,</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    order_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    trans_amount <span class="built_in">BIGINT</span>,</span><br><span class="line">    gmt_create <span class="built_in">VARCHAR</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (order_id, dt) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (dt);</span><br></pre></td></tr></table></figure><ul><li>Flink 动态表：DWS 类目指标聚合表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dws_cate_day (</span><br><span class="line">dt <span class="keyword">STRING</span>,</span><br><span class="line">parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">cate_gmv <span class="built_in">BIGINT</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (parent_cate_id, dt) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">)  PARTITIONED <span class="keyword">BY</span> (dt);</span><br></pre></td></tr></table></figure><ul><li>流作业：两张 MySql CDC 表 join 写入 DWD</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">s.dt,</span><br><span class="line">s.parent_cate_id,</span><br><span class="line">s.cate_id,</span><br><span class="line">s.order_id,</span><br><span class="line">s.trans_amount,</span><br><span class="line">s.gmt_create</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`orders`</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`cate_dim`</span> d</span><br><span class="line"><span class="keyword">ON</span> s.cate_id = d.cate_id;</span><br></pre></td></tr></table></figure><ul><li>流作业：DWD 经过聚合写入 DWS</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dws_cate_day</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dt,</span><br><span class="line">parent_cate_id,</span><br><span class="line"><span class="keyword">SUM</span>(trans_amount) <span class="keyword">AS</span> cate_gmv</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> parent_cate_id, dt;</span><br></pre></td></tr></table></figure><h3 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h3><ul><li>实时 OLAP：join 订单宽表和类目指标表，得出订单在这个类目下金额的占比</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">order_id,</span><br><span class="line">trans_amount,</span><br><span class="line"><span class="keyword">CAST</span>(trans_amount <span class="keyword">AS</span> <span class="keyword">DOUBLE</span>) / cate_gmv <span class="keyword">AS</span> ratio</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate d </span><br><span class="line"><span class="keyword">JOIN</span> dws_cate_day s</span><br><span class="line"><span class="keyword">ON</span> d.parent_cate_id = s.parent_cate_id</span><br><span class="line"><span class="keyword">WHERE</span> d.dt = <span class="string">'2021-12-08'</span> <span class="keyword">AND</span> s.dt = <span class="string">'2021-12-08'</span> <span class="comment">-- 分区裁剪</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ratio <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>历史 OLAP：查询订单宽表三天前的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dwd_orders_cate <span class="keyword">WHERE</span> dt = <span class="string">'2021-12-05'</span>;</span><br></pre></td></tr></table></figure><h3 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h3><p><img src="Demo2-%E7%A6%BB%E7%BA%BF%E6%95%B0%E4%BB%93-%E6%95%B0%E6%8D%AE%E8%AE%A2%E6%AD%A3.png" alt></p><ul><li>Batch 数据订正：覆写指定分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE dws_cate_day <span class="keyword">PARTITION</span> (dt = <span class="string">'2021-12-05'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">parent_cate_id,</span><br><span class="line"><span class="keyword">SUM</span>(trans_amount) <span class="keyword">AS</span> cate_gmv</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">WHERE</span> dt = <span class="string">'2021-12-05'</span> <span class="keyword">AND</span> trans_amount &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> parent_cate_id;</span><br></pre></td></tr></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>Flink 要统一存储，就必须要提供高质量的查询服务，如 OLAP 交互查询，这其中包括 Flink SQL 在 OLAP 交互场景下的优化、动态表存储性能和一致性的优化以及构建动态表服务化能力等诸多工作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-188%3A+Introduce+Built-in+Dynamic+Table+Storage" target="_blank" rel="noopener">FLIP-188: Introduce Built-in Dynamic Table Storage</a><br><a href="https://lists.apache.org/thread/tqyn1cro5ohl3c3fkjb1zvxbo03sofn7" target="_blank" rel="noopener">FLIP-188 讨论列表</a><br><a href="https://www.infoq.cn/article/ndur1dzox8g2muuddi56" target="_blank" rel="noopener">Apache Flink 不止于计算，数仓架构或兴起新一轮变革</a><br><a href="https://blog.csdn.net/u013516966/article/details/127581865?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167599596716800213022633%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167599596716800213022633&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127581865-null-null.142^v73^control_1,201^v4^add_ask,239^v1^control&utm_term=Flink%20Table%20Store&spm=1018.2226.3001.4187" target="_blank" rel="noopener">Flink Table Store：流批一体存储</a><br><a href="https://developer.aliyun.com/article/1080869" target="_blank" rel="noopener">基于 Apache Flink Table Store 的全增量一体实时入湖</a><br><a href="https://developer.aliyun.com/article/1009052" target="_blank" rel="noopener">Apache Flink Table Store 0.2.0 发布</a><br><a href="https://developer.aliyun.com/article/1151116?spm=a2c6h.14164896.0.0.3dc73c04heP4nq" target="_blank" rel="noopener">Flink Table Store 典型应用场景</a><br><a href="https://flink.apache.org/news/2023/01/13/release-table-store-0.3.0.html?spm=a2c6h.12873639.article-detail.7.7d6b1d4cf8EsYJ" target="_blank" rel="noopener">Apache Flink Table Store 0.3.0 Release Announcement</a><br><a href="https://developer.aliyun.com/live/251137?spm=a2c6h.14164896.0.0.24623c04pxV8HC" target="_blank" rel="noopener">Flink Table Store 0.3 构建流式数仓最佳实践</a><br><a href="https://blog.csdn.net/Aquester/article/details/127834798?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167599596716800213022633%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167599596716800213022633&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-127834798-null-null.142^v73^control_1,201^v4^add_ask,239^v1^control&utm_term=Flink%20Table%20Store&spm=1018.2226.3001.4187" target="_blank" rel="noopener">快速体验 Flink Table Store 入门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态表：全新的 Flink 内置存储。&lt;/p&gt;
&lt;p&gt;Flink Dynamic Table 可以理解为一套流批一体的存储，并无缝对接 Flink SQL 。原来 Flink 只能读写像 Kafka 、 HBase 这样的外部表，现在用一套 Flink SQL 语法就可以像原来创建源表和目标表一样，创建一个 Dynamic Table。流式数仓的分层数据可以全部放到 Flink Dynamic Table 中，通过 Flink SQL 就能实时地串联起整个数仓的分层，既可以对 Dynamic Table 中不同明细层的数据做实时查询和分析，也可以对不同分层做批量 ETL 处理。&lt;/p&gt;
&lt;p&gt;最终，利用 Flink CDC 、Flink SQL 、Flink Dynamic Table 就可以构建一套完整的流式数仓，实现实时离线一体化的体验。&lt;/p&gt;
&lt;p&gt;目前，作为一个独立的开源项目 &lt;a href=&quot;https://github.com/apache/flink-table-store&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flink-table-store&lt;/a&gt; 开发中，该功能预计在 Flink 1.15 中发布。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-table-store" scheme="http://yoursite.com/categories/Flink/Flink-table-store/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-150: Introduce Hybrid Source</title>
    <link href="http://yoursite.com/2022/03/09/Flink-FLIP-150-Introduce-Hybrid-Source/"/>
    <id>http://yoursite.com/2022/03/09/Flink-FLIP-150-Introduce-Hybrid-Source/</id>
    <published>2022-03-09T07:04:50.000Z</published>
    <updated>2022-03-29T18:24:16.458Z</updated>
    
    <content type="html"><![CDATA[<p>在实践中，尤其在需要数据回溯的场景下，许多 Flink 作业需要按顺序从多个数据源中读取数据：</p><ul><li>CDC：用户可以将数据快照存储在 HDFS/S3 ，数据的更新日志存储在数据库 binlog 或 Kafka 中</li><li>机器学习特征回填：当向模型中添加新特性时，需要从历史到现在的原始数据计算该特性。在大多情况下，历史数据和实时数据分别存储在两种不同的存储系统中，如 HDFS 和 Kafka</li></ul><a id="more"></a><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>在过去，如果要读取不同的数据源，用户必须运行两个不同的 Flink 作业：</p><ul><li>基于不同连接器的代码实现，多个源之间的切换很复杂。在切换前控制上游 source 的具体状态，以及下游 source 如何获取上游的状态转换为初始状态。</li><li>目前还没有有效的机制来支持历史数据和实时数据之间平滑的迁移。平滑迁移需要定义切换的规则和时间，以确保数据的完整性和一致性。</li></ul><p>为了平滑的支持对两种数据源的读取，Flink 作业需要先从 HDFS 读取历史数据，然后切换至 Kafka 读取实时数据，所以需要引入一个建立在 <code>FLIP-27</code> 之上的 <code>混合 Source API</code>。</p><p>hybrid source 包含具体 source 列表，hybrid source 按照定义顺序读取每个 source 的数据。当 A source 读取之后，切换到下一个 B souce ：</p><ul><li>当前 source 的 splitEnumerator 提供读取 end position</li><li>下一个 source 支持设置 start position</li><li>用户提供自定义函数：将当前 source 的 end position 转换为下一个 source 的 start position</li></ul><p><img src="HybridSource%E5%A4%A7%E8%87%B4%E7%BB%93%E6%9E%84.png" alt></p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>HybridSource 内部切换示例：<br><img src="HybridSource%E5%86%85%E9%83%A8%E5%88%87%E6%8D%A2%E7%A4%BA%E4%BE%8B.png" alt></p><p>FileSource 串 KafkaSource ，Kafka 从指定位点开始消费：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FileSource&lt;String&gt; fileSource = </span><br><span class="line">FileSource.forRecordStreamFormat(<span class="keyword">new</span> TextLineFormat(), Path.fromLocalFile(testDir)).build();</span><br><span class="line"></span><br><span class="line">KafkaSource&lt;String&gt; KafkaSource =</span><br><span class="line">KafkaSource.&lt;String&gt;builder()</span><br><span class="line">.setBootstrapServers(<span class="string">"localost:9091"</span>)</span><br><span class="line">.setGroupId(<span class="string">"MyGroup"</span>)</span><br><span class="line">.setTopics(Arrays.asList(<span class="string">"quickstart-events"</span>))</span><br><span class="line">.setDeserializer(KafkaRecordDeserializer.valueOnly(StringDeserializer.class))</span><br><span class="line">.setStartingOffsets(OffsetInitializer.earliest())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">HybridSource&lt;String&gt; hybridSource =</span><br><span class="line">HybridSource.builder(fileSource)</span><br><span class="line">.addSource(KafkaSource)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><p>更复杂的示例，从前一个 source 获取 Kafka 的启动位点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HybridSource&lt;String&gt; hybridSource =</span><br><span class="line">HybridSource.&lt;String, StaticFileSplitEnumerator&gt;builder(fileSource)</span><br><span class="line">.addSource(</span><br><span class="line">switchContext -&gt; &#123;</span><br><span class="line">StaticFileSplitEnumerator previousEnumerator = switchContext.getPreviousEnumerator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> timestamp = previousEnumerator.getEndTimestamp();</span><br><span class="line"></span><br><span class="line">OffsetInitializer offsets = OffsetInitializer.timestamp(timestamp);</span><br><span class="line">KafkaSource&lt;String&gt; kafkaSource = </span><br><span class="line">KafkaSource.&lt;String&gt;builder()</span><br><span class="line">.setBootstrapServers(<span class="string">"localost:9091"</span>)</span><br><span class="line">.setGroupId(<span class="string">"MyGroup"</span>)</span><br><span class="line">.setTopics(Arrays.asList(<span class="string">"quickstart-events"</span>))</span><br><span class="line">.setDeserializer(KafkaRecordDeserializer.valueOnly(StringDeserializer.class))</span><br><span class="line">.setStartingOffsets(offsets)</span><br><span class="line">.build();</span><br><span class="line"><span class="keyword">return</span> kafkaSource;</span><br><span class="line">&#125;,</span><br><span class="line">),</span><br><span class="line">Boundedness.CONTINUOUS_UNBOUNDED)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="HybridSource"><a href="#HybridSource" class="headerlink" title="HybridSource"></a>HybridSource</h3><p>HybridSource 是基于责任链设计模式实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSource</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Source</span>&lt;<span class="title">T</span>, <span class="title">HybridSourceSplit</span>, <span class="title">HybridSourceEnumeratorState</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SourceListEntry&gt; sources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 sources 列表中的最后一个 source 的有界属性，作为 HybirdSource 整体的有界属性</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boundedness <span class="title">getBoundedness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sources.get(sources.size() - <span class="number">1</span>).boundedness;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceReader&lt;T, HybridSourceSplit&gt; <span class="title">createReader</span><span class="params">(SourceReaderContext readerContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HybridSourceReader(readerContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SplitEnumerator&lt;HybridSourceSplit, HybridSourceEnumeratorState&gt; <span class="title">createEnumerator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SplitEnumeratorContext&lt;HybridSourceSplit&gt; enumContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HybridSourceSplitEnumerator(enumContext, sources, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中还包括以下几个函数式接口：</p><ul><li>SourceFactory ：创建具体 source 的工厂类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SourceFactory</span>&lt;<span class="title">T</span>, <span class="title">SourceT</span> <span class="keyword">extends</span> <span class="title">Source</span>&lt;<span class="title">T</span>,?,?&gt;, <span class="title">FromEnumT</span> <span class="keyword">extends</span> <span class="title">SplitEnumerator</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="function">SourceT <span class="title">create</span><span class="params">(SourceSwitchContext&lt;FromEnumT&gt; context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SourceSwitchContext</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SourceSwitchContext</span>&lt;<span class="title">EnumT</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">EnumT <span class="title">getPreviosEnumerator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HybridSourceBuilder </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceBuilder</span>&lt;<span class="title">T</span>, <span class="title">EnumT</span> <span class="keyword">extends</span> <span class="title">SplitEnumerator</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SourceListEntry&gt; sources;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HybridSourceBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接添加 Source 到 sources 中</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="keyword">public</span> &lt;ToEnumT extends SplitEnumerator, NextSourceT extends Source&lt;T,?,?&gt;&gt; HybridSourceBuilder&lt;T, ToEnumT&gt; </span><br><span class="line">addSource(NextSourceT source) &#123;</span><br><span class="line"><span class="keyword">return</span> addSource(<span class="keyword">new</span> PassthroughSourceFactory&lt;&gt;(source), source.getBoundedness());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据 SourceFactory 创建一个 Source ，再添加到 sources 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> &lt;ToEnumT extends SplitEnumerator, NextSourceT extends Source&lt;T,?,?&gt;&gt; HybridSourceBuilder&lt;T, ToEnumT&gt; </span><br><span class="line">addSource(SourceFactory&lt;T, NextSourceT, EnumT&gt; sourceFactory, Boundedness boundedness) &#123;</span><br><span class="line"><span class="keyword">if</span>(!sources.isEmpty()) &#123;</span><br><span class="line">Preconditions.checkArgument(</span><br><span class="line">                    Boundedness.BOUNDED.equals(sources.get(sources.size() - <span class="number">1</span>).boundedness),</span><br><span class="line">                    <span class="string">"All sources except the final source need to be bounded."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClosureCleaner.clean(sourceFactory, ExecutionConfig.ClosureCleanerLevel.RECURSIVE, <span class="keyword">true</span>);</span><br><span class="line">sources.add(SourceListEntry.of(sourceFactory, boundedness));</span><br><span class="line"><span class="keyword">return</span> (HybridSourceBuilder)<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> HybridSource&lt;T&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HybridSource(sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HybridSourceTest</li></ul><p>演示构建一个 HybridSource </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuilderWithSourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     HybridSource.SourceFactory&lt;Integer, Source&lt;Integer, ?, ?&gt;, MockSplitEnumerator&gt;</span><br><span class="line">            sourceFactory =</span><br><span class="line">                     <span class="keyword">new</span> HybridSource.SourceFactory&lt;</span><br><span class="line">                           Integer, Source&lt;Integer, ?, ?&gt;, MockSplitEnumerator&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Source&lt;Integer, ?, ?&gt; create(</span><br><span class="line">                                HybridSource.SourceSwitchContext&lt;MockSplitEnumerator&gt; context) &#123;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 从 SourceSwitchContext 上下文中获取上一个 source 的 SplitEnumerator</span></span><br><span class="line">                            MockSplitEnumerator enumerator = context.getPreviousEnumerator();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 通常从此 SplitEnumerator 中获取上一个 source 读取的 end position</span></span><br><span class="line">                            <span class="comment">// 作为下一 source 的 start position</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> MockBaseSource(<span class="number">1</span>, <span class="number">1</span>, Boundedness.BOUNDED);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">      HybridSource&lt;Integer&gt; source =</span><br><span class="line">            <span class="keyword">new</span> HybridSource.HybridSourceBuilder&lt;Integer, MockSplitEnumerator&gt;()</span><br><span class="line">                    .&lt;MockSplitEnumerator, Source&lt;Integer, ?, ?&gt;&gt;addSource(</span><br><span class="line">                            <span class="keyword">new</span> MockBaseSource(<span class="number">1</span>, <span class="number">1</span>, Boundedness.BOUNDED))</span><br><span class="line">                    .addSource(sourceFactory, Boundedness.BOUNDED)</span><br><span class="line">                    .build();</span><br><span class="line">      assertNotNull(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HybridSourceSplitEnumerator 与 HybridSourceReader 交互流程：<br><img src="HybridSourceSplitEnumerator%E4%B8%8EHybridSourceReader%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B.png" alt></p><h3 id="HybridSourceSplitEnumerator"><a href="#HybridSourceSplitEnumerator" class="headerlink" title="HybridSourceSplitEnumerator"></a>HybridSourceSplitEnumerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceSplitEnumerator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SplitEnumerator</span>&lt;<span class="title">HybridSourceSplit</span>, <span class="title">HybridSourceEnumeratorState</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SplitEnumeratorContext&lt;HybridSourceSplit&gt; context;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HybridSource 处理的 source 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HybridSource.SourceListEntry&gt; sources;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已切换 source 列表，在日常开发中，最好将多个 Map 封装成一个具体的类，面向对象编程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwitchedSources switchedSources = <span class="keyword">new</span> SwitchedSources();</span><br><span class="line">    <span class="comment">// Splits that have been returned due to subtask reset</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, TreeMap&lt;Integer, List&lt;HybridSourceSplit&gt;&gt;&gt; pendingSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录跟踪已读取完成的 SourceReader 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Integer&gt; finishedReaders;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Integer&gt; readerSourceIndex;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当前 source 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSourceIndex;</span><br><span class="line">    <span class="keyword">private</span> HybridSourceEnumeratorState restoredEnumeratorState;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当前 source 对应的 SplitEnumerator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SplitEnumerator&lt;SourceSplit, Object&gt; currentEnumerator;</span><br><span class="line">    <span class="keyword">private</span> SimpleVersionedSerializer&lt;Object&gt; currentEnumeratorCheckpointSerializer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        switchEnumerator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSourceEvent</span><span class="params">(<span class="keyword">int</span> subtaskId, SourceEvent sourceEvent)</span> </span>&#123;</span><br><span class="line">        LOG.debug(</span><br><span class="line">                <span class="string">"handleSourceEvent &#123;&#125; subtask=&#123;&#125; pendingSplits=&#123;&#125;"</span>,</span><br><span class="line">                sourceEvent,</span><br><span class="line">                subtaskId,</span><br><span class="line">                pendingSplits);</span><br><span class="line">        <span class="keyword">if</span> (sourceEvent <span class="keyword">instanceof</span> SourceReaderFinishedEvent) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收处理 HybridSourceReader 发送的 SourceReaderFinishedEvent</span></span><br><span class="line">            SourceReaderFinishedEvent srfe = (SourceReaderFinishedEvent) sourceEvent;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> subtaskSourceIndex =</span><br><span class="line">                    readerSourceIndex.computeIfAbsent(</span><br><span class="line">                            subtaskId,</span><br><span class="line">                            k -&gt; &#123;</span><br><span class="line">                                <span class="comment">// first time we see reader after cold start or recovery</span></span><br><span class="line">                                LOG.debug(</span><br><span class="line">                                        <span class="string">"New reader subtask=&#123;&#125; sourceIndex=&#123;&#125;"</span>,</span><br><span class="line">                                        subtaskId,</span><br><span class="line">                                        srfe.sourceIndex());</span><br><span class="line">                                <span class="keyword">return</span> srfe.sourceIndex();</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (srfe.sourceIndex() &lt; subtaskSourceIndex) &#123;</span><br><span class="line">                <span class="comment">// duplicate event</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (subtaskSourceIndex &lt; currentSourceIndex) &#123;</span><br><span class="line">            <span class="comment">// source index +1</span></span><br><span class="line">                subtaskSourceIndex++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向 HybridSourceReader 发送 SwitchSourceEvent 事件</span></span><br><span class="line">                sendSwitchSourceEvent(subtaskId, subtaskSourceIndex);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// track readers that have finished processing for current enumerator</span></span><br><span class="line">            finishedReaders.add(subtaskId);</span><br><span class="line">            <span class="keyword">if</span> (finishedReaders.size() == context.currentParallelism()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"All readers finished, ready to switch enumerator!"</span>);</span><br><span class="line">                <span class="keyword">if</span> (currentSourceIndex + <span class="number">1</span> &lt; sources.size()) &#123;</span><br><span class="line">                    switchEnumerator();</span><br><span class="line">                    <span class="comment">// switch all readers prior to sending split assignments</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; context.currentParallelism(); i++) &#123;</span><br><span class="line">                        sendSwitchSourceEvent(i, currentSourceIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentEnumerator.handleSourceEvent(subtaskId, sourceEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSwitchSourceEvent</span><span class="params">(<span class="keyword">int</span> subtaskId, <span class="keyword">int</span> sourceIndex)</span> </span>&#123;</span><br><span class="line">        readerSourceIndex.put(subtaskId, sourceIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定位到下一个 source</span></span><br><span class="line">        Source source = switchedSources.sourceOf(sourceIndex);</span><br><span class="line">        context.sendEventToSourceReader(</span><br><span class="line">                subtaskId,</span><br><span class="line">                <span class="comment">// SwitchSourceEvent 中包括 source 下标、Source 类、是否为最后一个 source</span></span><br><span class="line">                <span class="keyword">new</span> SwitchSourceEvent(sourceIndex, source, sourceIndex &gt;= (sources.size() - <span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// send pending splits, if any</span></span><br><span class="line">        TreeMap&lt;Integer, List&lt;HybridSourceSplit&gt;&gt; splitsBySource = pendingSplits.get(subtaskId);</span><br><span class="line">        <span class="keyword">if</span> (splitsBySource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;HybridSourceSplit&gt; splits = splitsBySource.remove(sourceIndex);</span><br><span class="line">            <span class="keyword">if</span> (splits != <span class="keyword">null</span> &amp;&amp; !splits.isEmpty()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"Restoring splits to subtask=&#123;&#125; &#123;&#125;"</span>, subtaskId, splits);</span><br><span class="line">                context.assignSplits(</span><br><span class="line">                        <span class="keyword">new</span> SplitsAssignment&lt;&gt;(Collections.singletonMap(subtaskId, splits)));</span><br><span class="line">                context.signalNoMoreSplits(subtaskId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (splitsBySource.isEmpty()) &#123;</span><br><span class="line">                pendingSplits.remove(subtaskId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sourceIndex == currentSourceIndex) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"adding reader subtask=&#123;&#125; sourceIndex=&#123;&#125;"</span>, subtaskId, currentSourceIndex);</span><br><span class="line">            currentEnumerator.addReader(subtaskId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HybridSourceReader"><a href="#HybridSourceReader" class="headerlink" title="HybridSourceReader"></a>HybridSourceReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceReader</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">HybridSourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SourceReaderContext readerContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已经切换的 source 集合</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwitchedSources switchedSources = <span class="keyword">new</span> SwitchedSources();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的 source 下标，启动时默认为 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSourceIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标记是否为最后一个 source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFinalSource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的 SourceReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SourceReader&lt;T, ? extends SourceSplit&gt; currentReader;</span><br><span class="line">    <span class="keyword">private</span> CompletableFuture&lt;Void&gt; availabilityFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;HybridSourceSplit&gt; restoredSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> initialSourceIndex = currentSourceIndex;</span><br><span class="line">        <span class="keyword">if</span> (!restoredSplits.isEmpty()) &#123;</span><br><span class="line">            initialSourceIndex = restoredSplits.get(<span class="number">0</span>).sourceIndex() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向 HybridSourceSplitEnumerator 发送 SourceReaderFinishedEvent</span></span><br><span class="line">        readerContext.sendSourceEventToCoordinator(</span><br><span class="line">                <span class="keyword">new</span> SourceReaderFinishedEvent(initialSourceIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentReader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> InputStatus.NOTHING_AVAILABLE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 currentReader 继续拉取数据</span></span><br><span class="line">        InputStatus status = currentReader.pollNext(output);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (status == InputStatus.END_OF_INPUT) &#123;</span><br><span class="line">            <span class="comment">//  当前 source 已读取完毕</span></span><br><span class="line">            LOG.info(</span><br><span class="line">                    <span class="string">"End of input subtask=&#123;&#125; sourceIndex=&#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    currentSourceIndex,</span><br><span class="line">                    currentReader);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向 HybridSourceSplitEnumerator 发送 SourceReaderFinishedEvent</span></span><br><span class="line">            <span class="comment">// 准备激活下一个 source</span></span><br><span class="line">            readerContext.sendSourceEventToCoordinator(</span><br><span class="line">                    <span class="keyword">new</span> SourceReaderFinishedEvent(currentSourceIndex));</span><br><span class="line">            <span class="keyword">if</span> (!isFinalSource) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (availabilityFuture.isDone()) &#123;</span><br><span class="line">                    <span class="comment">// reset to avoid continued polling</span></span><br><span class="line">                    availabilityFuture = <span class="keyword">new</span> CompletableFuture();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> InputStatus.NOTHING_AVAILABLE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSourceEvents</span><span class="params">(SourceEvent sourceEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceEvent <span class="keyword">instanceof</span> SwitchSourceEvent) &#123;</span><br><span class="line">            SwitchSourceEvent sse = (SwitchSourceEvent) sourceEvent;</span><br><span class="line">            LOG.info(</span><br><span class="line">                    <span class="string">"Switch source event: subtask=&#123;&#125; sourceIndex=&#123;&#125; source=&#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    sse.sourceIndex(),</span><br><span class="line">                    sse.source());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收 HybridSourceSplitEnumerator 发送的 SwitchSourceEvent 事件，从中获取 source 的 index 和 Source 类</span></span><br><span class="line">            <span class="comment">// 并加入到 switchedSources</span></span><br><span class="line">            switchedSources.put(sse.sourceIndex(), sse.source());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 currentReader</span></span><br><span class="line">            setCurrentReader(sse.sourceIndex());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断当前 source 是否为 sources 中的最后一个</span></span><br><span class="line">            isFinalSource = sse.isFinalSource();</span><br><span class="line">            <span class="keyword">if</span> (!availabilityFuture.isDone()) &#123;</span><br><span class="line">                <span class="comment">// continue polling</span></span><br><span class="line">                availabilityFuture.complete(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 currentReader 处理其余类型的 SourceEvent</span></span><br><span class="line">            currentReader.handleSourceEvents(sourceEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCurrentReader</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(index != currentSourceIndex);</span><br><span class="line">        <span class="keyword">if</span> (currentReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to close current reader"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.debug(</span><br><span class="line">                    <span class="string">"Reader closed: subtask=&#123;&#125; sourceIndex=&#123;&#125; currentReader=&#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    currentSourceIndex,</span><br><span class="line">                    currentReader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Source source = switchedSources.sourceOf(index);</span><br><span class="line">        SourceReader&lt;T, ?&gt; reader;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从 HybridSourceSplitEnumerator 接收到的 Source 类，创建该 Source 的 SourceReader</span></span><br><span class="line">            reader = source.createReader(readerContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed tp create reader"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 启动新的 SourceReader</span></span><br><span class="line">        reader.start();</span><br><span class="line">        currentSourceIndex = index;</span><br><span class="line">        currentReader = reader;</span><br><span class="line">        currentReader</span><br><span class="line">                .isAvailable()</span><br><span class="line">                .whenComplete(</span><br><span class="line">                        (result, ex) -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ex == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                availabilityFuture.complete(result);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                availabilityFuture.completeExceptionally(ex);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">        LOG.debug(</span><br><span class="line">                <span class="string">"Reader started: subtask=&#123;&#125; sourceIndex=&#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">                readerContext.getIndexOfSubtask(),</span><br><span class="line">                currentSourceIndex,</span><br><span class="line">                reader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加存储的 splits</span></span><br><span class="line">        <span class="keyword">if</span> (!restoredSplits.isEmpty()) &#123;</span><br><span class="line">            List&lt;HybridSourceSplit&gt; splits = <span class="keyword">new</span> ArrayList&lt;&gt;(restoredSplits.size());</span><br><span class="line">            Iterator&lt;HybridSourceSplit&gt; it = restoredSplits.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                HybridSourceSplit hybridSplit = it.next();</span><br><span class="line">                <span class="keyword">if</span> (hybridSplit.sourceIndex() == index) &#123;</span><br><span class="line">                    splits.add(hybridSplit);</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            addSplits(splits);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-150%3A+Introduce+Hybrid+Source" target="_blank" rel="noopener">FLIP-150: Introduce Hybrid Source</a><br><a href="https://blog.csdn.net/penriver/article/details/122377396" target="_blank" rel="noopener">Flink–Hybrid Source提出的动机及实现原理介绍</a><br><a href="https://lists.apache.org/thread/j9t31qx1h9w60w2p2j14yqyttox8nxnl" target="_blank" rel="noopener">FLIP-150 讨论列表</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实践中，尤其在需要数据回溯的场景下，许多 Flink 作业需要按顺序从多个数据源中读取数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDC：用户可以将数据快照存储在 HDFS/S3 ，数据的更新日志存储在数据库 binlog 或 Kafka 中&lt;/li&gt;
&lt;li&gt;机器学习特征回填：当向模型中添加新特性时，需要从历史到现在的原始数据计算该特性。在大多情况下，历史数据和实时数据分别存储在两种不同的存储系统中，如 HDFS 和 Kafka&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac单机安装zeppelin</title>
    <link href="http://yoursite.com/2022/03/08/Mac%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85zeppelin/"/>
    <id>http://yoursite.com/2022/03/08/Mac单机安装zeppelin/</id>
    <published>2022-03-08T03:49:23.000Z</published>
    <updated>2022-03-09T06:59:13.746Z</updated>
    
    <content type="html"><![CDATA[<p>Zeppelin 是基于 Web 的交互式数据分析 notebook ，支持 SQL 、 Scala 、 Python 等语言。<br>Zeppelin 通过插件化的 Interpreter 来解析用户提交的代码，并将其转化到对应的后端（计算框架、数据库等）执行，支持 angular 、beam 、 bigquery 、cassandra 、es 、HBase 、 influxdb 、Flink 、Spark 等引擎。</p><p>本机搭建一个 Zeppelin 环境，方便在界面上写简单的代码或 sql 进行测试任务。</p><a id="more"></a><h2 id="本机安装"><a href="#本机安装" class="headerlink" title="本机安装"></a>本机安装</h2><p><a href="https://www.apache.org/dyn/closer.cgi/zeppelin/zeppelin-0.10.1/zeppelin-0.10.1-bin-all.tgz" target="_blank" rel="noopener">zeppelin 安装包下载地址</a></p><ul><li>zeppelin 启动命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh start</span><br></pre></td></tr></table></figure><p>本机会启动一个 ZeppelinServer 进程</p><ul><li>zeppelin 停止命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh stop</span><br></pre></td></tr></table></figure><ul><li>访问入口：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p><img src="Zeppelin%E6%9C%AC%E6%9C%BA%E5%90%AF%E5%8A%A8web%E7%95%8C%E9%9D%A2.png" alt></p><ul><li>也可以以服务形式启动 zeppelin ：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service zepplin start</span><br><span class="line">sudo service zepplin stop</span><br><span class="line">sudo service zepplin restart</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh upstart</span><br></pre></td></tr></table></figure><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><ul><li>拉取 docker 镜像：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache/zeppelin:0.10.0</span><br></pre></td></tr></table></figure><ul><li>启动 docker 镜像，–name 指定容器名称，-p 指定暴露的端口：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zeppelin0.10.0 -p 8888:8080 apache/zeppelin:0.10.0</span><br></pre></td></tr></table></figure><h2 id="Flink-with-Zeppelin"><a href="#Flink-with-Zeppelin" class="headerlink" title="Flink with Zeppelin"></a>Flink with Zeppelin</h2><ol><li>启动 flink</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$FLINK_HOME</span></span><br><span class="line"></span><br><span class="line">bin/start-cluster.sh</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在 Zeppelin 界面上设置 FLINK_HOME<br>需要修改以下几个配置项：<br><img src="Zepplin%E8%AE%BE%E7%BD%AEflink_remote%E6%A8%A1%E5%BC%8F.png" alt></p></li><li><p>使用 Zeppelin 自带的 Flink tourial 脚本测试</p></li></ol><ul><li><code>%flink</code>    - 创建 scala environment</li><li><code>%flink.pyflink</code>    - 提供 python environment </li><li><code>%flink.ipyflink</code>    - 提供 ipython environment </li><li><code>%flink.ssql</code>     - 提供 stream sql environment </li><li><code>%flink.bsql</code>    - 提供 batch sql environment </li></ul><p>执行脚本测试，会启动 RemoteInterpreterServer 进程</p><ul><li>Batch WordCount</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%flink</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = benv.fromElements(<span class="string">"hello world"</span>,<span class="string">"hello flink"</span>,<span class="string">"hello hadoop"</span>);</span><br><span class="line">data.flatMap(line =&gt; line.split(<span class="string">"\\s"</span>))</span><br><span class="line">.map(w =&gt; (w,<span class="number">1</span>))</span><br><span class="line">.groupBy(<span class="number">0</span>)</span><br><span class="line">.sum(<span class="number">1</span>)</span><br><span class="line">.print()</span><br></pre></td></tr></table></figure><p><img src="%E6%89%A7%E8%A1%8Cscala_BatchWordCount.png" alt></p><ul><li>Streaming WordCount</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%flink</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = senv.fromElements(<span class="string">"hello world"</span>,<span class="string">"hello flink"</span>,<span class="string">"hello hadoop"</span>)</span><br><span class="line">data.flatMap(line =&gt; line.split(<span class="string">"\\s"</span>))</span><br><span class="line">.map(w =&gt; (w,<span class="number">1</span>))</span><br><span class="line">.keyBy(<span class="number">0</span>)</span><br><span class="line">.sum(<span class="number">1</span>)</span><br><span class="line">.print</span><br></pre></td></tr></table></figure><p><img src="%E6%89%A7%E8%A1%8Cscala_Streaming_WordCount.png" alt><br><img src="%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9Cscala_Streaming_WordCount.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zeppelin.apache.org/docs/latest/quickstart/install.html#downloading-binary-package" target="_blank" rel="noopener">Zeppelin 官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zeppelin 是基于 Web 的交互式数据分析 notebook ，支持 SQL 、 Scala 、 Python 等语言。&lt;br&gt;Zeppelin 通过插件化的 Interpreter 来解析用户提交的代码，并将其转化到对应的后端（计算框架、数据库等）执行，支持 angular 、beam 、 bigquery 、cassandra 、es 、HBase 、 influxdb 、Flink 、Spark 等引擎。&lt;/p&gt;
&lt;p&gt;本机搭建一个 Zeppelin 环境，方便在界面上写简单的代码或 sql 进行测试任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-Hudi-构建流式数据湖平台</title>
    <link href="http://yoursite.com/2022/02/24/Flink-Hudi-%E6%9E%84%E5%BB%BA%E6%B5%81%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%B9%96%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2022/02/24/Flink-Hudi-构建流式数据湖平台/</id>
    <published>2022-02-24T11:49:18.000Z</published>
    <updated>2023-03-02T08:55:40.749Z</updated>
    
    <content type="html"><![CDATA[<p>Flink 和 Hudi 的集成使用。<br>在查询时确认数据的 Schema ，湖存储成本低、灵活性高，非常适用于各种查询场景的中心化存储；<br>基于云服务兴起及成熟的对象存储，在云上构建存算分离的架构；<br>通过快照隔离，实现基础的 ACID 事务；<br>对接不同的查询引擎，实现各自的查询分析场景，实现湖仓一体的架构；</p><a id="more"></a><h2 id="数据集成场景"><a href="#数据集成场景" class="headerlink" title="数据集成场景"></a>数据集成场景</h2><ul><li>Batch Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Batch_Mode.png" alt></p><ul><li>Streaming Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Streaming_Mode.png" alt></p><ul><li>Incremental Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Incremental_Mode.png" alt></p><ul><li>批流一体解决方案</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_%E6%89%B9%E6%B5%81%E4%B8%80%E4%BD%93%E6%A8%A1%E5%BC%8F.png" alt></p><p>可以看出，借助 Flink 引擎的批流统一，将增量模式合并到流式模式中，摆脱对 Spark 的依赖，数据集成平台可以逐步实现计算引擎层的批流统一，同时实现批式、流式、增量三种数据集成场景。</p><p>在增量模式上，提供和流模式相当的数据延迟，赋予用户近实时分析的能力，进一步提高效率和降低计算成本：<br>流处理管道面向行处理提供秒级处理延迟，增量管道中面向列处理应该也提供相同的延迟，支持高效的 upsert 和查询能力。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Hudi 是 Hadoop Updates and Incrementals 的简写，是由 Uber 开发并开源的 Data Lakes 解决方案。<br>它的设计目标是基于 Hadoop 兼容的文件系统（如 HDFS、S3 等），重度依赖 Spark 的数据处理能力来实现增量处理和丰富的查询能力。<br>Hudi 可以作为 Source、Sink ，它把数据存储到分布式文件系统（如 HDFS）中。<br>Hudi 有自己的数据表，从而具备将 Hudi 的 Bundle 整合进 Hive、Spark、Presto 等这类引擎中，<br>使得这些引擎可以查询 Hudi 表数据，从而具备 Hudi 所提供的 Snapshot Query 、Incremental Query 、Read Optimized Query 的能力。</p><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><p>Hudi 内部对每个表维护了一个 Timeline ，由一组作用在表上的 Instant 对象组成。Instant 表示在某个时间点对表进行操作达到某一个状态的表示，包含3部分内容：</p><p><img src="Timeline%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><ol><li>Instant Action ： 对 Hudi 表的执行操作类型</li></ol><ul><li>COMMITS ：将一批数据原子写入到表中</li><li>CLEANS ：后台清除表中不再需要的就版本文件</li><li>DELTA_COMMIT ：将一批数据原子写入到 Merge On Read 类型表中，其中部分或所有数据可能只写入到 delta 增量日志文件中</li><li>COMPACTION ：后台使用 Hudi 重组多种文件格式，例如：将更新操作的行式日志文件移动到列式，compaction 在 timeline 上表现为一种特殊的提交</li><li>ROLLBACK ：表示提交或增量提交未成功并回滚，删除写入期间生成的任何文件</li><li>SAVEPOINT ： 将某些文件组标记为”已保存”，cleaner 不会删除这些文件，也有助于恢复某一时间点上的数据表</li></ul><ol start="2"><li>Instant Time ： 表示一个时间戳，从 Instant Action 开始执行的时间顺序单调递增 ；</li></ol><ol start="3"><li>Instant State ：表示在指定的时间点（Instant Time）对 Hudi 表执行操作（Instant Action）后，表所处的状态</li></ol><ul><li>REQUESTED ：已调度但未初始化 </li><li>INFLIGHT ：当前正在执行 </li><li>COMPLETED ：操作执行完成</li></ul><p><img src="Timeline%E5%AE%9E%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子，展示了 Hudi 表上 10:00 至 12:00 之间发生的 upserts ，大约每5分钟一次 ，Hudi Timeline 会记录 COMMIT 元数据，以及在后台进行 CLEANING/COMPACTION 。</p><p>从数据生成到最终到达 Hudi 系统，可能存在延迟，如图中的 07:00、08:00、09:00 生成的数据，数据到达大约延迟了 3、2、1 小时，最终生成 COMIMIT 的时间才是 upsert 的时间。<br>对于数据到达时间（Arrival Time）和事件时间（Event Time）相关的数据延迟性（Latency）和完整性（Completeness）的权衡，Hudi 可以将数据 upsert 到更早时间的 buckets 或 folders 下。<br>通过使用 Timeline 管理，当增量查询 10:00 之后的最新数据时，可以高效的找到 10:00 之后发生过更新的文件，而不必根据延迟时间再去扫描更早时间的文件，比如这里，就不需要扫描 07:00、08:00、09:00 这些时刻对应的文件。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p><img src="Hudi%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>Hudi 采用 MVCC 设计，当执行 COMPACTION 操作时，会合并日志文件和 Base 文件，生成新的文件分片。<br>CLEAN 操作会清理掉不用的文件分片，释放存储空间。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Hudi 会通过记录 key 与分区 path 组成 Hoodie Key ，即 Record Key + Partition Path ， 通过将 Hoodie Key 映射到 file_group/file_id 。<br>一旦记录的第一个版本被写入文件中，对应的 Hoodie Key 就不会再改变了。</p><p>Hudi 提供多种索引来适配不同场景，需要根据具体的数据分布进行取舍，从而达到最佳的写入和查询效率。</p><h4 id="场景一：日志去重"><a href="#场景一：日志去重" class="headerlink" title="场景一：日志去重"></a>场景一：日志去重</h4><p>这种日志数据通常会有一个 create_time 时间戳，底表也是按照时间戳进行分区，最近几个小时或几天的数据需要频繁更新，更老的数据则不需要太多变化。</p><p>这种冷热分离的数据，推荐使用：</p><ol><li><p>Bloom index</p></li><li><p>State index with TTL</p></li><li><p>Hash index</p></li></ol><h4 id="场景二：数据库导出（CDC）"><a href="#场景二：数据库导出（CDC）" class="headerlink" title="场景二：数据库导出（CDC）"></a>场景二：数据库导出（CDC）</h4><p>更新的数据随机分布，没有规律可循，底表数据量通常比较大，新增数据量比较小。</p><ol><li><p>Hash index</p></li><li><p>State index</p></li><li><p>HBase index</p></li></ol><h3 id="Hudi-表类型"><a href="#Hudi-表类型" class="headerlink" title="Hudi 表类型"></a>Hudi 表类型</h3><h4 id="Copy-On-Write"><a href="#Copy-On-Write" class="headerlink" title="Copy On Write"></a>Copy On Write</h4><p>使用专门的列式文件格式存储数据，例如 parquet 格式，更新时保存多版本，并且在写的过程中通过异步的 Merge 来实现重写文件。Copy On Write 表只包含列式格式的 Base 文件，每次执行 COMMIT 操作会生成新版本的 Base 文件，最终执行 COMPACTION 操作时还是会生成列式格式的 Base 文件。所以，Copy On Write 表存在写放大的问题。</p><p><img src="Copy_On_Write_commit_%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子：</p><p>在写入数据时，对现有文件组的 UPDATE 操作会为该文件组生成一个新的文件分片，并标记提交时间。<br>INSERT 操作会分配一个新的文件组，并为该文件组写入其第一个文件分片。</p><p>写入的过程中也可以进行查询（例如：<code>select count(*)</code>），如果查询 COMMIT 为 10:10 之前的数据，<br>会首先检查最新提交的时间线，过滤出每个文件组中除了最新文件分片以外的所有文件分片，即把文件 ID 为 1、2、3 且版本为 10:05 的文件分片查询出来。<br>因此，查询不受任何写入失败/部分写入的影响，只查询已提交的数据。</p><h4 id="Merge-On-Read"><a href="#Merge-On-Read" class="headerlink" title="Merge On Read"></a>Merge On Read</h4><p>使用列式和行式混合存储，列式文件格式如 parquet ，行式文件格式如 avro ，所以 Merge On Read 表存在列式的 Base 文件，也存在行式的 Delta 文件。更新时写入到增量 Delta 文件中，之后通过同步或异步的 COMPACTION 操作，生成新版本的列式文件。</p><p>通常，需要有效的控制增量日志文件的大小，来平衡读放大和写方法的影响。</p><p><img src="Merge_On_Read_commit_%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子：</p><pre><code>每个文件分组都对应一个增量日志文件（Delta Log File），COMPACTION 操作在后台定时执行，会把对应的增量日志文件合并到文件分组的 Base 文件中，生成新版本的 Base 文件。</code></pre><p>使用 Read Optimized Query 模式查询 10:10 之后的数据，只能查询到包含版本为 10:05 ，文件 ID 为 1、2、3 的文件；<br>使用 Snapshot Query 模式是可以查询到 10:05 之后的数据的。</p><h2 id="Hudi-Flink-Writer"><a href="#Hudi-Flink-Writer" class="headerlink" title="Hudi Flink Writer"></a>Hudi Flink Writer</h2><ul><li>大致写入流程</li></ul><p><img src="Flink_Writer_%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B.png" alt></p><ul><li>Hudi_On_Flink写入问题及解决办法</li></ul><p><img src="Hudi_On_Flink%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" alt></p><ul><li>写入状态机</li></ul><p>在作业刚启动时， Coordinator 会尝试去文件系统上新建表，如果当前表不存在，会在文件目录上写一些 meta 信息，进行表构建。<br>在收到所有 task 的初始化 meta 信息后， Coordinator 会开启一个新的 transaction 。<br>    <img src="Write_State_Machine_%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%AF%E5%8A%A8.png" alt></p><p>当 write task 看到了事务的发起之后，就会解锁当前数据的 flush 操作，writer 是会先在内存中积攒一批数据。<br>当达到内存阈值时，刷盘：<br>    <img src="Write_State_Machine_%E8%BE%BE%E5%88%B0%E5%86%85%E5%AD%98%E9%98%88%E5%80%BC%E5%88%B7%E7%9B%98.png" alt></p><p>当上游的 checkpoint barrier 到达做快照时，刷盘：<br>    <img src="Write_State_Machine_Checkpoint_barrier%E5%88%B0%E8%BE%BE%E4%B9%8B%E6%97%B6%E5%88%B7%E7%9B%98.png" alt></p><p>write task 在每次 flush 之后，都会发送 meta 信息给 Coordinator ，当 Coordinator 收到 checkpoint 的 success 事件之后，会提交对应的事务，并发起新一轮事务。<br>write task 看到新事务后，会解锁下一轮事务的写入。</p><p>遇到错误时，取消刷盘：<br>    <img src="Write_State_Machine_%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E6%97%B6%E5%8F%96%E6%B6%88%E5%88%B7%E7%9B%98.png" alt></p><h2 id="使用用例"><a href="#使用用例" class="headerlink" title="使用用例"></a>使用用例</h2><p>创建 Hudi 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> h_table(</span><br><span class="line"><span class="keyword">uuid</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">ts <span class="built_in">timestamp</span>(<span class="number">3</span>),</span><br><span class="line"><span class="string">`partition`</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connetor'</span> = <span class="string">'hudi'</span>,</span><br><span class="line">    <span class="string">'path'</span> = <span class="string">'xxx/h_table'</span>,</span><br><span class="line">    <span class="string">'table.type'</span> = <span class="string">'MERGE_ON_READ'</span>,</span><br><span class="line">    <span class="string">'write.operation'</span> = <span class="string">'upsert'</span>,</span><br><span class="line">    <span class="string">'write.precombine.field'</span> = <span class="string">'ts'</span>,</span><br><span class="line">    <span class="string">'write.payload.class'</span> = <span class="string">'OverwriteWithLatestAvroPayload.class'</span>,</span><br><span class="line">    <span class="string">'write.insert.drop.duplicates'</span> = <span class="string">'false'</span>,</span><br><span class="line">    <span class="string">'write.ignore.failed'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'hoodie.datasource.write.recordkey.field'</span> = <span class="string">'uuid'</span>,</span><br><span class="line">    <span class="string">'hoodie.datasource.write.keygenerator.class'</span> = <span class="string">'SimpleAvroKeyGenerator.class'</span>,   </span><br><span class="line">    <span class="string">'write.bucket_assign.tasks'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'read.streaming.enabled'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'read.streaming.check-interval'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'write.tasks'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'write.batch.size.MB'</span> = <span class="string">'128'</span>,</span><br><span class="line">    <span class="string">'compaction.async.enabled'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'compaction.trigger.strategy'</span> = <span class="string">'num_commits'</span>,</span><br><span class="line">    <span class="string">'compaction.delta_commits'</span> = <span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'compaction.delta_seconds'</span> = <span class="string">'3600'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>更改 Hudi 表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> h0 <span class="keyword">rename</span> <span class="keyword">to</span> h0_1;</span><br></pre></td></tr></table></figure><p>插入 Hudi 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hudi_table </span><br><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br></pre></td></tr></table></figure><p>Flink-CDC 整库同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql catalog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">CATALOG</span> mysql</span><br><span class="line"><span class="keyword">WITH</span>(</span><br><span class="line"><span class="string">'type'</span> = <span class="string">'mysql'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'default-database'</span> = <span class="string">'benchmark_db'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- hudi catalog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">CATALOG</span> hudi</span><br><span class="line"><span class="keyword">WITH</span>(</span><br><span class="line"><span class="string">'type'</span> = <span class="string">'hudi'</span>,</span><br><span class="line"><span class="string">'catalog.path'</span> = <span class="string">'oss://hudi-ffa/'</span>,</span><br><span class="line"><span class="string">'default-database'</span> = <span class="string">'db1'</span>,</span><br><span class="line"><span class="string">'oss.endpoint'</span> = <span class="string">'xxx'</span>,</span><br><span class="line"><span class="string">'accessKeyId'</span> = <span class="string">'xxx'</span>,</span><br><span class="line"><span class="string">'accessKeySecret'</span> = <span class="string">'xxx'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行整库、多表同步作业，写入 Hudi, 过程中会自动创建 Hudi 目标表</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">STATEMENT</span> <span class="keyword">SET</span>;</span><br><span class="line">    <span class="comment">-- CDAS 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hudi.cdas_demo</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">DATABASE</span> <span class="string">`mysql`</span>.<span class="string">`benchmark1`</span> <span class="keyword">INCLUDING</span> <span class="keyword">ALL</span> <span class="keyword">TABLES</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- CTAS 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`hudi`</span>.<span class="string">`db1`</span>.<span class="string">`ctas_demo`</span></span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">TABLE</span> <span class="string">`mysql`</span>.<span class="string">`benchmark2`</span>.<span class="string">`sbtest.*`</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询hudi</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> hudi.cdas_demo.sbtest1;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>CDC 数据库数据入仓库，使用 Flink-CDC connector 一次性导入或者消费 Kafka 中的 changelog</li><li>对接 Presto 等 OLAP 引擎，满足近实时分析场景</li><li>增量 ETL ，Hudi 支持存储流计算过程中的行级别变更，通过流读消费变更，可以实现端到端的近实时 ETL 生产</li><li>双流 join 应用场景<br><img src="%E5%8F%8C%E6%B5%81join%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt></li></ol><p>Roadmap：</p><ol><li>流读语义增强</li><li>Record Level Index</li><li>二级索引</li><li>ID-based Schema Evolution</li><li>Metastore Catalog</li><li>支持 Trino Connector</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hudi.apache.org/cn/docs/overview" target="_blank" rel="noopener">Hudi 官网</a><br><a href="https://cloud.tencent.com/developer/article/1694530" target="_blank" rel="noopener">Apache Hudi 架构设计和基本概念</a><br>FFA 2021</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flink 和 Hudi 的集成使用。&lt;br&gt;在查询时确认数据的 Schema ，湖存储成本低、灵活性高，非常适用于各种查询场景的中心化存储；&lt;br&gt;基于云服务兴起及成熟的对象存储，在云上构建存算分离的架构；&lt;br&gt;通过快照隔离，实现基础的 ACID 事务；&lt;br&gt;对接不同的查询引擎，实现各自的查询分析场景，实现湖仓一体的架构；&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
      <category term="DataLake" scheme="http://yoursite.com/categories/BigData/DataLake/"/>
    
      <category term="Hudi" scheme="http://yoursite.com/categories/BigData/DataLake/Hudi/"/>
    
    
      <category term="Flink-CDC" scheme="http://yoursite.com/tags/Flink-CDC/"/>
    
  </entry>
  
  <entry>
    <title>Test: Docker 拉起 MySqlContainer 唯一数据库实例</title>
    <link href="http://yoursite.com/2022/02/20/Test-Docker-%E6%8B%89%E8%B5%B7-MySqlContainer-%E5%94%AF%E4%B8%80%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2022/02/20/Test-Docker-拉起-MySqlContainer-唯一数据库实例/</id>
    <published>2022-02-20T07:39:32.000Z</published>
    <updated>2023-03-02T08:46:22.218Z</updated>
    
    <content type="html"><![CDATA[<p>我们在进行大数据组件相关测试时，通常需要先在外部部署测试数据源，显得有些麻烦。在代码中拉起 docker container ，创建一个唯一干净的数据源环境，会方便许多。<br>本文以 MySql 数据源为例，说明下在单测中拉起 MySqlContainer ，创建唯一数据库实例，执行 sql 脚本等过程。</p><a id="more"></a><p><img src="MySqlContainer%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%AE%B9%E5%99%A8.png" alt></p><h2 id="MySqlContainer"><a href="#MySqlContainer" class="headerlink" title="MySqlContainer"></a>MySqlContainer</h2><p>需引入以下 maven 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testcontainers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testcontainers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlContainer</span> <span class="keyword">extends</span> <span class="title">JdbcDatabaseContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE = <span class="string">"mysql"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MYSQL_PORT = <span class="number">3306</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MY_CNF_CONFIG_OVERRIDE_PARAM_NAME = <span class="string">"MY_CNF"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SETUP_SQL_PARAM_NAME = <span class="string">"SETUP_SQL"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MYSQL_ROOT_USER = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlContainer</span><span class="params">(MySqlVersion version)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 docker 镜像</span></span><br><span class="line">        <span class="keyword">super</span>(DockerImageName.parse(IMAGE + <span class="string">":"</span> + version.getVersion()));</span><br><span class="line">        <span class="comment">// 设置容器暴露的端口</span></span><br><span class="line">        addExposedPort(MYSQL_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 docker 镜像时，</span></span><br><span class="line"><span class="comment">     * MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="comment">     * MYSQL_ALLOW_EMPTY_PASSWORD</span></span><br><span class="line"><span class="comment">     * MYSQL_RANDOM_ROOT_PASSWORD</span></span><br><span class="line"><span class="comment">     * 三者中必须指定一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// MY_CNF -&gt; docker/server-gtids/my.cnf</span></span><br><span class="line">        optionallyMapResourceParameterAsVolume(</span><br><span class="line">                MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, <span class="string">"/etc/mysql/"</span>, <span class="string">"mysql-default-conf"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SETUP_SQL -&gt; docker/setup.sql</span></span><br><span class="line">        <span class="keyword">if</span> (parameters.containsKey(SETUP_SQL_PARAM_NAME)) &#123;</span><br><span class="line">            optionallyMapResourceParameterAsVolume(</span><br><span class="line">                    SETUP_SQL_PARAM_NAME, <span class="string">"/docker-entrypoint-initdb.d/"</span>, <span class="string">"N/A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEnv(<span class="string">"MYSQL_DATABASE"</span>, databaseName);</span><br><span class="line">        addEnv(<span class="string">"MYSQL_USER"</span>, username);</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !password.isEmpty()) &#123;</span><br><span class="line">            addEnv(<span class="string">"MYSQL_PASSWORD"</span>, password);</span><br><span class="line">            addEnv(<span class="string">"MYSQL_ROOT_PASSWORD"</span>, password);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MYSQL_ROOT_USER.equalsIgnoreCase(username)) &#123;</span><br><span class="line">            addEnv(<span class="string">"MYSQL_ALLOW_EMPTY_PASSWORD"</span>, <span class="string">"yes"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ContainerLaunchException(</span><br><span class="line">                    <span class="string">"Empty password can be used only with the root user"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setStartupAttempts(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJdbcUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJdbcUrl(databaseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJdbcUrl</span><span class="params">(String databaseName)</span> </span>&#123;</span><br><span class="line">        String additionalUrlParams = constructUrlParameters(<span class="string">"?"</span>, <span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"jdbc:mysql://"</span></span><br><span class="line">                + getHost()</span><br><span class="line">                + <span class="string">":"</span></span><br><span class="line">                + getDatabasePort()</span><br><span class="line">                + <span class="string">"/"</span></span><br><span class="line">                + databaseName</span><br><span class="line">                + additionalUrlParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabaseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getTestQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SELECT 1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDatabasePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMappedPort(MYSQL_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">constructUrlForConnection</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">        String url = <span class="keyword">super</span>.constructUrlForConnection(queryString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">"useSSL="</span>)) &#123;</span><br><span class="line">            String separator = url.contains(<span class="string">"?"</span>) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>;</span><br><span class="line">            url = url + separator + <span class="string">"useSSL=false"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">"allowPublicKeyRetrieval="</span>)) &#123;</span><br><span class="line">            url = url + <span class="string">"&amp;allowPublicKeyRetrieval=true"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withConfigurationOverride</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        parameters.put(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withSetupSQL</span><span class="params">(String sqlPath)</span> </span>&#123;</span><br><span class="line">        parameters.put(SETUP_SQL_PARAM_NAME, sqlPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withDatabaseName</span><span class="params">(<span class="keyword">final</span> String databaseName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.databaseName = databaseName;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withUsername</span><span class="params">(<span class="keyword">final</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withPassword</span><span class="params">(<span class="keyword">final</span> String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UniqueDatabase"><a href="#UniqueDatabase" class="headerlink" title="UniqueDatabase"></a>UniqueDatabase</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CREATE_DATABASE_DDL =</span><br><span class="line">            <span class="keyword">new</span> String[]&#123;<span class="string">"CREATE DATABASE $DBNAME$;"</span>, <span class="string">"USE $DBNAME$;"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern COMMENT_PATTERN = Pattern.compile(<span class="string">"^(.*)--.*$"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlContainer container;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String templateName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniqueDatabase</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlContainer container,</span></span></span><br><span class="line"><span class="function"><span class="params">            String databaseName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">        String identifier = Integer.toUnsignedString(<span class="keyword">new</span> Random().nextInt(), <span class="number">36</span>);</span><br><span class="line">        <span class="keyword">this</span>.databaseName = databaseName + <span class="string">"_"</span> + identifier;</span><br><span class="line">        <span class="keyword">this</span>.templateName = databaseName;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行ddl脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAndInitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String ddlFile = String.format(<span class="string">"ddl/%s.sql"</span>, templateName);</span><br><span class="line">        <span class="keyword">final</span> URL ddlTestFile = UniqueDatabase.class.getClassLoader().getResource(ddlFile);</span><br><span class="line">        assertNotNull(<span class="string">"Cannot locate "</span> + ddlFile, ddlTestFile);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> (Connection connection =</span><br><span class="line">                         DriverManager.getConnection(</span><br><span class="line">                                 container.getJdbcUrl(), username, password);</span><br><span class="line">                 Statement statement = connection.createStatement()) &#123;</span><br><span class="line">                <span class="keyword">final</span> List&lt;String&gt; statements =</span><br><span class="line">                        Arrays.stream(</span><br><span class="line">                                Stream.concat(</span><br><span class="line">                                        Arrays.stream(CREATE_DATABASE_DDL),</span><br><span class="line">                                        Files.readAllLines(</span><br><span class="line">                                                Paths.get(ddlTestFile.toURI()))</span><br><span class="line">                                                .stream())</span><br><span class="line">                                        .map(String::trim)</span><br><span class="line">                                        .filter(x -&gt; !x.startsWith(<span class="string">"--"</span>) &amp;&amp; !x.isEmpty())</span><br><span class="line">                                        .map(</span><br><span class="line">                                                x -&gt; &#123;</span><br><span class="line">                                                    <span class="keyword">final</span> Matcher m =</span><br><span class="line">                                                            COMMENT_PATTERN.matcher(x);</span><br><span class="line">                                                    <span class="keyword">return</span> m.matches() ? m.group(<span class="number">1</span>) : x;</span><br><span class="line">                                                &#125;)</span><br><span class="line">                                        .map(<span class="keyword">this</span>::convertSQL)</span><br><span class="line">                                        .collect(Collectors.joining(<span class="string">"\n"</span>))</span><br><span class="line">                                        .split(<span class="string">";"</span>))</span><br><span class="line">                                .map(x -&gt; x.replace(<span class="string">"$$"</span>, <span class="string">";"</span>))</span><br><span class="line">                                .collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">for</span> (String stmt : statements) &#123;</span><br><span class="line">                    statement.execute(stmt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getJdbcConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(container.getJdbcUrl(databaseName), username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertSQL</span><span class="params">(<span class="keyword">final</span> String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sql.replace(<span class="string">"$DBNAME$"</span>, databaseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container.getHost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDatabasePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container.getDatabasePort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabaseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySqlVersion"><a href="#MySqlVersion" class="headerlink" title="MySqlVersion"></a>MySqlVersion</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * MySql version enum. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MySqlVersion &#123;</span><br><span class="line">    V5_5(<span class="string">"5.5"</span>),</span><br><span class="line">    V5_6(<span class="string">"5.6"</span>),</span><br><span class="line">    V5_7(<span class="string">"5.7"</span>),</span><br><span class="line">    V8_0(<span class="string">"8.0"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    MySqlVersion(String version) &#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MySqlVersion&#123;"</span> + <span class="string">"version='"</span> + version + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySqlSourceTest"><a href="#MySqlSourceTest" class="headerlink" title="MySqlSourceTest"></a>MySqlSourceTest</h2><p>首先，安装并启动 docker 服务进程，再执行以下单测用例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ververica.cdc.connectors.mysql.matty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.ververica.cdc.connectors.mysql.testutils.MySqlVersion;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.testcontainers.containers.output.Slf4jLogConsumer;</span><br><span class="line"><span class="keyword">import</span> org.testcontainers.lifecycle.Startables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(MySqlSourceTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String databaseNamePrefix = <span class="string">"customer"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String tableName = <span class="string">"customers"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String username = <span class="string">"mysqluser"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String password = <span class="string">"mysqlpw"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MySqlContainer MYSQL_CONTAINER = createMySqlContainer(MySqlVersion.V5_7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, databaseNamePrefix, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDdlAndDml</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"初始化数据库表，并插入21条数据："</span>);</span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        query();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"操作数据库表并查询："</span>);</span><br><span class="line">        dml();</span><br><span class="line">        query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 MySqlContainer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version MySql 版本枚举</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MySqlContainer 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MySqlContainer <span class="title">createMySqlContainer</span><span class="params">(MySqlVersion version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MySqlContainer)</span><br><span class="line">                <span class="keyword">new</span> MySqlContainer(version)</span><br><span class="line">                        .withConfigurationOverride(<span class="string">"docker/server-gtids/my.cnf"</span>)</span><br><span class="line">                        .withSetupSQL(<span class="string">"docker/setup.sql"</span>)</span><br><span class="line">                        .withDatabaseName(<span class="string">"flink-test"</span>)</span><br><span class="line">                        .withUsername(<span class="string">"flinkuser"</span>)</span><br><span class="line">                        .withPassword(<span class="string">"flinkpw"</span>)</span><br><span class="line">                        .withLogConsumer(<span class="keyword">new</span> Slf4jLogConsumer(LOG));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 MySqlContainer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startContainers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Starting containers..."</span>);</span><br><span class="line">        <span class="comment">// testcontainers 包中的启动类</span></span><br><span class="line">        Startables.deepStart(Stream.of(MYSQL_CONTAINER)).join();</span><br><span class="line">        LOG.info(<span class="string">"Containers are started."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dml</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = customerDatabase.getJdbcConnection();</span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        statement.addBatch(<span class="string">"UPDATE "</span> + tableName + <span class="string">" SET address = 'Hangzhou' where id = 103"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"DELETE FROM "</span> + tableName + <span class="string">" where id = 102"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"INSERT INTO "</span> + tableName + <span class="string">" VALUES(102, 'user_2','Beijing','123567891234')"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"UPDATE "</span> + tableName + <span class="string">" SET address = 'Nanjing' where id = 103"</span>);</span><br><span class="line">        statement.executeBatch();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = customerDatabase.getJdbcConnection();</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(</span><br><span class="line">                String.format(<span class="string">"SELECT * FROM %s"</span>, tableName));</span><br><span class="line">        JSONArray resultArray = resultSetToJson(resultSet);</span><br><span class="line">        System.out.println(resultArray);</span><br><span class="line"></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JSONArray <span class="title">resultSetToJson</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException, JSONException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JSONArray array = <span class="keyword">new</span> JSONArray();</span><br><span class="line"></span><br><span class="line">        ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">        <span class="keyword">int</span> columnCount = metaData.getColumnCount();</span><br><span class="line">        <span class="comment">// 遍历ResultSet中的每条数据</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            JSONObject jsonObj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="comment">// 遍历每一列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                String value;</span><br><span class="line">                String columnName = metaData.getColumnLabel(i);</span><br><span class="line">                <span class="keyword">if</span> (rs.getString(columnName) != <span class="keyword">null</span> &amp;&amp; !rs.getString(columnName).equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                    value = <span class="keyword">new</span> String(rs.getBytes(columnName), <span class="string">"UTF-8"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    value = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                jsonObj.put(columnName, value);</span><br><span class="line">            &#125;</span><br><span class="line">            array.add(jsonObj);</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">初始化数据库表，并插入21条数据：</span><br><span class="line">[</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_1"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"101"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_2"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"102"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_3"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"103"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_4"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"109"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_5"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"110"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_6"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"111"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_7"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"118"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_8"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"121"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_9"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"123"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_10"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1009"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_11"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1010"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_12"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1011"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_13"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1012"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_14"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1013"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_15"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1014"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_16"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1015"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_17"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1016"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_18"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1017"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_19"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1018"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_20"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1019"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_21"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"2000"</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">操作数据库表并查询：</span><br><span class="line">[</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_1"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"101"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Beijing"</span>,<span class="attr">"name"</span>:<span class="string">"user_2"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"102"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Nanjing"</span>,<span class="attr">"name"</span>:<span class="string">"user_3"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"103"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_4"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"109"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_5"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"110"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_6"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"111"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_7"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"118"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_8"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"121"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_9"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"123"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_10"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1009"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_11"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1010"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_12"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1011"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_13"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1012"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_14"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1013"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_15"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1014"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_16"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1015"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_17"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1016"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_18"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1017"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_19"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1018"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_20"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1019"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_21"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"2000"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以下文件需要作为 resource 加到测试类所在的 classpath 中。</p><ul><li><p>my.cnf :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">secure-file-priv=/var/lib/mysql</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"># ----------------------------------------------</span><br><span class="line"># Enable the binlog for replication &amp; CDC</span><br><span class="line"># ----------------------------------------------</span><br><span class="line">server-id         = 223344</span><br><span class="line">log_bin           = mysql-bin</span><br><span class="line">expire_logs_days  = 1</span><br><span class="line">binlog_format     = row</span><br><span class="line"></span><br><span class="line"># enable gtid mode</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br></pre></td></tr></table></figure></li><li><p>setup.sql :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1) 'flinkuser' - all privileges required by the snapshot reader AND binlog reader (used for testing) </span></span><br><span class="line"><span class="comment">-- 2) 'mysqluser' - all privileges</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, RELOAD, <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>, <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>, <span class="keyword">LOCK</span> <span class="keyword">TABLES</span>  <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'flinkuser'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'mysqluser'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mysqlpw'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'mysqluser'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- DATABASE:  emptydb</span></span><br><span class="line"><span class="comment">-- ----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> emptydb;</span><br></pre></td></tr></table></figure></li><li><p>customer.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'flink'</span>,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">"user_1"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">"user_2"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">"user_3"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">"user_4"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">"user_5"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">111</span>,<span class="string">"user_6"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">118</span>,<span class="string">"user_7"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">121</span>,<span class="string">"user_8"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">123</span>,<span class="string">"user_9"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1009</span>,<span class="string">"user_10"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1010</span>,<span class="string">"user_11"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1011</span>,<span class="string">"user_12"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1012</span>,<span class="string">"user_13"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1013</span>,<span class="string">"user_14"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1014</span>,<span class="string">"user_15"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1015</span>,<span class="string">"user_16"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1016</span>,<span class="string">"user_17"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1017</span>,<span class="string">"user_18"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1018</span>,<span class="string">"user_19"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1019</span>,<span class="string">"user_20"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">2000</span>,<span class="string">"user_21"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/ververica/flink-cdc-connectors.git" target="_blank" rel="noopener">flink-cdc-connector</a><br><code>com.ververica.cdc.connectors.mysql.testutils</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在进行大数据组件相关测试时，通常需要先在外部部署测试数据源，显得有些麻烦。在代码中拉起 docker container ，创建一个唯一干净的数据源环境，会方便许多。&lt;br&gt;本文以 MySql 数据源为例，说明下在单测中拉起 MySqlContainer ，创建唯一数据库实例，执行 sql 脚本等过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
      <category term="Test" scheme="http://yoursite.com/categories/Tools/Test/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-CDC-增量快照读取算法</title>
    <link href="http://yoursite.com/2022/02/17/Flink-CDC-%E5%A2%9E%E9%87%8F%E5%BF%AB%E7%85%A7%E8%AF%BB%E5%8F%96%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2022/02/17/Flink-CDC-增量快照读取算法/</id>
    <published>2022-02-17T05:51:03.000Z</published>
    <updated>2023-03-02T08:35:51.158Z</updated>
    
    <content type="html"><![CDATA[<p>Flink CDC 2.0 的设计方案，借鉴了 Netflix 的 DBLog paper 实现全程无锁，并基于 Flink FLIP-27 Source 实现水平扩展，并支持全量阶段 checkpoint 。</p><a id="more"></a><h2 id="1-x-集成-Debezium"><a href="#1-x-集成-Debezium" class="headerlink" title="1.x 集成 Debezium"></a>1.x 集成 Debezium</h2><p>Flink CDC 1.x 是通过集成 Debezium 引擎来采集数据，支持全量 + 增量的模式，保证所有数据的一致性。存在以下痛点：</p><ol><li>一致性通过加锁保证<br>Debezium 在保证数据一致性时，需要对读取的库或表加锁，全局锁可能导致数据库 hang 住，表级锁会锁住表读</li><li>不支持水平扩展<br>Debezium 为单机节点，在全量读取阶段，如果表非常大，读取时长可能达到小时级</li><li>全量读取阶段不支持 checkpoint<br>CDC 读取分为两个阶段，全量和增量，全量读取阶段不支持 checkpoint，fail 之后则需要重新读取。</li></ol><p><img src="Debezium%E5%85%A8%E5%B1%80%E9%94%81%E7%A4%BA%E4%BE%8B.png" alt></p><ul><li><p>全局锁<br>首先是获取一个锁，然后去开启可重复读事务。锁住操作是读取 binlog 的起始位置和当前表的 schema 。这样做的目的是保证 binlog 的起始位置和读取到的当前 schema 可以对应上，因为表的 schema 是会变的，比如增加列或删除列。在读取这两个信息后， SnapshotReader 会在可重复读事务里读取全量数据，在全量数据读取完成之后，会启动 BinlogReader 从读取的 binlog 起始位置开始增量读取，从而保证全量数据 + 增量数据的无缝衔接。</p></li><li><p>表锁<br>表锁是全局锁的退化版，因为全局锁的权限比较高，在某些场景下用户只能得到表锁。表锁锁的时间会更长，表锁提前释放了可重复读的事务默认会提交，所以锁需要等到全量数据读完之后才能释放。</p></li></ul><p><code>FLUSH TABLES WITH READ LOCK</code></p><ul><li>该命令等待所有正在进行的 update 完成，同时阻止所有新来的 update</li><li>该命令执行成功前必须等到所有正在运行的 select 完成，更换的情况是，在等待正在运行 select 完成时，DB 实际上处于不可用状态，即使是新加入的 select 也会被阻止，这是 MySQL Query Cache 机制</li><li>该命令阻止其他事务 commit</li></ul><h2 id="单-Chunk-读一致性"><a href="#单-Chunk-读一致性" class="headerlink" title="单 Chunk 读一致性"></a>单 Chunk 读一致性</h2><p>与 DBLog 不同，Flink CDC 2.0 没有维护额外的表，而是在 select 数据前后使用 <code>SHOW MASTER STATUS</code> 获取 binlog offset ，这种方式避免了侵入源端系统。</p><p>快照读取逻辑：<br><img src="Flink-CDC-Chunk%E5%86%85%E5%BF%AB%E7%85%A7%E8%AF%BB%E5%8F%96%E9%80%BB%E8%BE%91.png" alt></p><ol><li><code>SHOW MASTER STATUS</code> 获取 lw，插入队列</li><li>读取该分片内的记录，插入记录</li><li><code>SHOW MASTER STATUS</code> 获取 hw，插入队列</li><li>判断 lw 和 hw 之间是否有增量变更</li><li>如果没有变更，队列中插入 BINLOG_END 记录</li><li>否则读取 [lw,hw] 之间的 binlog 并插入队列，最后一条记录为 BINLOG_END</li></ol><p>修正队列里的数据，获取该分片 point-in-time 为 hw 的数据：<br><img src="Flink-CDC-Chunk_upsertBinlog%E9%80%BB%E8%BE%91.png" alt></p><ol><li>将 lw 加入到 normalizedBinlogRecords</li><li>遍历 binlogRecords 中的记录</li><li>对于删除记录，将其从 snapshotRecords 删除</li><li>对于更新记录，将记录中的 After 作为 READ 记录 map.put 到 snapshotRecords</li><li>对于创建记录，使用 map.put 到 snapshotRecords</li><li>将 snapshotRecords.values 加入到 normalizedBinlogRecords</li><li>将 hw 加入到 normalizedBinlogRecords</li></ol><h2 id="增量阶段"><a href="#增量阶段" class="headerlink" title="增量阶段"></a>增量阶段</h2><p>单 Chunk 读取是在多个 <code>SourceReader</code> 上并发执行，互不影响。假设一个任务同步的三张表 t1/t2/t3 被切分成 6 个分片，由于并发执行，其高低水位在 binlog 上的位置可能如下：</p><p><img src="Flink-CDC-%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%8F%96Chunk.png" alt></p><p>可以看出，t1.split1 和 t2.split1 读取的 binlog 范围有交叉，都读取了 [lw2.1,hw1.1] 之间的 binlog，t3.split2 可以早于 t3.split1 执行。这些交叉或者乱序并不影响正确性，因为全量阶段 MysqlSourceReader 会将每个 split 的 hw 汇报给 MysqlSourceEnumerator ，在增量阶段通过这些 hw 信息来保证 binlog 处理不丢失。</p><p>当 MysqlSourceEnumerator 把所有 split 的 hw 收集齐之后，会创建一个 binlog split ， 该分片包含了需要读取 binlog 的起始位置（所有分片 hw 的最小值）和所有分片的 hw 信息。MysqlSourceEnumerator 把该 binlog 分片 assign 给一个 MysqlSourceReader ，任务从全量阶段转为增量阶段。</p><p>MysqlSourceReader 在读取 binlog 数据之后，通过以下条件判断记录是否应该发送给下游：</p><ol><li>判断当前记录已经处于所在表的最大 hw ，即该表已经进入 Pure Binlog Phase ，对于这样的 binlog 记录，不需要进行比较，直接发送给下游</li><li>当一个 binlog 记录属于一个分片的主键范围时，如果该记录在这个分片的 hw 之后，则该记录应该发送给下游</li></ol><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p>MySql cdc 类图关系如下：</p><p><img src="MySql-cdc%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB.png" alt></p><h3 id="MySqlSourceReader"><a href="#MySqlSourceReader" class="headerlink" title="MySqlSourceReader"></a>MySqlSourceReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceReader</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">SingleThreadMultiplexSourceReaderBase</span>&lt;</span></span><br><span class="line"><span class="class">                <span class="title">SourceRecord</span>, <span class="title">T</span>, <span class="title">MySqlSplit</span>, <span class="title">MySqlSplitState</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MySqlSource 配置类，</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlSourceConfig sourceConfig;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 存放结束未确认的 snapshot splits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MySqlSnapshotSplit&gt; finishedUnackedSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放未完成的 binlog splits</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MySqlBinlogSplit&gt; uncompletedBinlogSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tm 中对应的 sub task id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> subtaskId;           </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 启动 SourceReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getNumberOfCurrentlyAssignedSplits() == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 当前状态后端里存储的 Splits 为空，则通过 SourceOperator 中的方法向 SourceCoordinator 的 SplitEnumerator 组件发送 RequestSplitEvent 事件</span></span><br><span class="line">            context.sendSplitRequest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询当前状态后端里存储的 Splits</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfCurrentlyAssignedSplits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.splitStates.size();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * addSplits -&gt; initializedState -&gt; super.addSplits -&gt; </span></span><br><span class="line"><span class="comment">     * createSplitFetcher -&gt; fetcher.addSplits() 加入任务双端队列中 -&gt; fetcher.start() 提交 fetcher 线程到线程池     </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;MySqlSplit&gt; splits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// restore for finishedUnackedSplits， 循环处理，查找出还没有完成处理的 splits</span></span><br><span class="line">        List&lt;MySqlSplit&gt; unfinishedSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MySqlSplit split : splits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (split.isSnapshotSplit()) &#123;</span><br><span class="line">                MySqlSnapshotSplit snapshotSplit = split.asSnapshotSplit();</span><br><span class="line">                <span class="keyword">if</span> (snapshotSplit.isSnapshotReadFinished()) &#123;</span><br><span class="line">                    finishedUnackedSplits.put(snapshotSplit.splitId(), snapshotSplit);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    unfinishedSplits.add(split);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// the binlog split is uncompleted</span></span><br><span class="line">                <span class="keyword">if</span> (!split.asBinlogSplit().isCompletedSplit()) &#123;</span><br><span class="line">                    uncompletedBinlogSplits.put(split.splitId(), split.asBinlogSplit());</span><br><span class="line">                    requestBinlogSplitMetaIfNeeded(split.asBinlogSplit());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    uncompletedBinlogSplits.remove(split.splitId());</span><br><span class="line">                    MySqlBinlogSplit mySqlBinlogSplit =</span><br><span class="line">                            discoverTableSchemasForBinlogSplit(split.asBinlogSplit());</span><br><span class="line">                    unfinishedSplits.add(mySqlBinlogSplit);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// notify split enumerator again about the finished unacked snapshot splits</span></span><br><span class="line">        reportFinishedSnapshotSplitsIfNeed();</span><br><span class="line">        <span class="comment">// add all un-finished splits (including binlog split) to SourceReaderBase</span></span><br><span class="line">        <span class="keyword">super</span>.addSplits(unfinishedSplits);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 构建 MySqlSplit 对应的 MySqlSplitState</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MySqlSplitState <span class="title">initializedState</span><span class="params">(MySqlSplit split)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (split.isSnapshotSplit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlSnapshotSplitState(split.asSnapshotSplit());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlBinlogSplitState(split.asBinlogSplit());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每次做 checkpoint 时，记录 MySqlSplit 列表状态后端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MySqlSplit&gt; <span class="title">snapshotState</span><span class="params">(<span class="keyword">long</span> checkpointId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// unfinished splits</span></span><br><span class="line">        List&lt;MySqlSplit&gt; stateSplits = <span class="keyword">super</span>.snapshotState(checkpointId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add finished snapshot splits that didn't receive ack yet</span></span><br><span class="line">        stateSplits.addAll(finishedUnackedSplits.values());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add binlog splits who are uncompleted</span></span><br><span class="line">        stateSplits.addAll(uncompletedBinlogSplits.values());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stateSplits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SourceReaderBase：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceReaderBase</span>&lt;<span class="title">E</span>, <span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">SplitStateT</span>&gt; <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父类 SourceReaderBase 中的拉取数据方法</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput&lt;T&gt; output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        RecordsWithSplitIds&lt;E&gt; recordsWithSplitId = <span class="keyword">this</span>.currentFetch;</span><br><span class="line">        <span class="keyword">if</span> (recordsWithSplitId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            recordsWithSplitId = <span class="keyword">this</span>.getNextFetch(output);</span><br><span class="line">            <span class="keyword">if</span> (recordsWithSplitId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.trace(<span class="keyword">this</span>.finishedOrAvailableLater());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 从 split 中读取出 record</span></span><br><span class="line">            E record = recordsWithSplitId.nextRecordFromSplit();</span><br><span class="line">            <span class="keyword">if</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过 MySqlRecordEmitter 将数据传递到外部 SourceOutput ，从 output.collect 中获取 SourceRecord，写入下游存储系统</span></span><br><span class="line">                <span class="keyword">this</span>.recordEmitter.emitRecord(record, <span class="keyword">this</span>.currentSplitOutput, <span class="keyword">this</span>.currentSplitContext.state);</span><br><span class="line">                LOG.trace(<span class="string">"Emitted record: &#123;&#125;"</span>, record);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.trace(InputStatus.MORE_AVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.moveToNextSplit(recordsWithSplitId, output));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pollNext(output);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父类 SourceReaderBase 中 addSplits 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;SplitT&gt; splits)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Adding split(s) to reader: &#123;&#125;"</span>, splits);</span><br><span class="line">        splits.forEach((s) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录每一个 splitId 对应的 SplitState ，调用子类的 initializedState(s) 构建 SplitState ，存储在 splitStates map 中</span></span><br><span class="line">            SourceReaderBase.SplitContext var10000 = (SourceReaderBase.SplitContext)<span class="keyword">this</span>.splitStates.put(s.splitId(), <span class="keyword">new</span> SourceReaderBase.SplitContext(s.splitId(), <span class="keyword">this</span>.initializedState(s)));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.splitFetcherManager.addSplits(splits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 关闭 reader 操作，即关掉 splitFetcherManager 中线程池管理的 SplitFetcher 线程及关闭该线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Closing Source Reader."</span>);</span><br><span class="line">        <span class="keyword">this</span>.splitFetcherManager.close(<span class="keyword">this</span>.options.sourceReaderCloseTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MySqlSourceReaderTest"><a href="#MySqlSourceReaderTest" class="headerlink" title="MySqlSourceReaderTest"></a>MySqlSourceReaderTest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceReaderTest</span> <span class="keyword">extends</span> <span class="title">MySqlSourceTestBase</span> </span>&#123;</span><br><span class="line"><span class="comment">// 为每次运行JUnit测试创建并填充MySQL数据库的唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, <span class="string">"customer"</span>, <span class="string">"mysqluser"</span>, <span class="string">"mysqlpw"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试binlog读取故障恢复流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBinlogReadFailoverCrossTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建数据库，并执行 sql 脚本</span></span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        <span class="comment">// MySqlSource 相关配置项，读表 customers</span></span><br><span class="line">        <span class="keyword">final</span> MySqlSourceConfig sourceConfig = getConfig(<span class="keyword">new</span> String[] &#123;<span class="string">"customers"</span>&#125;);</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">final</span> DataType dataType =</span><br><span class="line">                DataTypes.ROW(</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"id"</span>, DataTypes.BIGINT()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"name"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"address"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"phone_number"</span>, DataTypes.STRING()));</span><br><span class="line">        MySqlSplit binlogSplit;</span><br><span class="line">        <span class="keyword">try</span> (MySqlConnection jdbc =</span><br><span class="line">                DebeziumUtils.createMySqlConnection(sourceConfig.getDbzConfiguration())) &#123;</span><br><span class="line">            Map&lt;TableId, TableChanges.TableChange&gt; tableSchemas =</span><br><span class="line">                    TableDiscoveryUtils.discoverCapturedTableSchemas(sourceConfig, jdbc);</span><br><span class="line">            <span class="comment">// 创建一个 MySqlBinlogSplit ，`SHOW MASTER STATUS` 查询出 binlog offset ，并设置 tableSchema</span></span><br><span class="line">            binlogSplit =</span><br><span class="line">                    MySqlBinlogSplit.fillTableSchemas(</span><br><span class="line">                            createBinlogSplit(sourceConfig).asBinlogSplit(), tableSchemas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MysqlSourceReader ，分别创建 elementsQueue、MySqlRecordEmitter 、MySqlSplitReader</span></span><br><span class="line">        MySqlSourceReader&lt;SourceRecord&gt; reader = createReader(sourceConfig);</span><br><span class="line">        reader.start();</span><br><span class="line">        <span class="comment">// 模拟分配 MySqlBinlogSplit 给 MysqlSourceReader -&gt; SplitFetcherManager -&gt; MySqlSplitReader</span></span><br><span class="line">        reader.addSplits(Arrays.asList(binlogSplit));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-1: make 6 change events in one MySQL transaction</span></span><br><span class="line">        TableId tableId = binlogSplit.getTableSchemas().keySet().iterator().next();</span><br><span class="line">        makeBinlogEventsInOneTransaction(sourceConfig, tableId.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-2: fetch the first 2 records belong to the MySQL transaction</span></span><br><span class="line">        String[] expectedRecords =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"-U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Hangzhou, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="comment">// the 2 records are produced by 1 operations</span></span><br><span class="line">        List&lt;String&gt; actualRecords = consumeRecords(reader, dataType, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        assertEqualsInOrder(Arrays.asList(expectedRecords), actualRecords);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储 binlog split state ，将 MySqlBinlogSplit 整体序列化写入 state</span></span><br><span class="line">        List&lt;MySqlSplit&gt; splitsState = reader.snapshotState(<span class="number">1L</span>);</span><br><span class="line">        <span class="comment">// check the binlog split state</span></span><br><span class="line">        assertEquals(<span class="number">1</span>, splitsState.size());</span><br><span class="line">        <span class="comment">// 关闭 reader</span></span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-3: mock failover from a restored state</span></span><br><span class="line">        MySqlSourceReader&lt;SourceRecord&gt; restartReader = createReader(sourceConfig);</span><br><span class="line">        restartReader.start();</span><br><span class="line">        <span class="comment">// 模拟从 splitsState 恢复，读取存储的 split</span></span><br><span class="line">        restartReader.addSplits(splitsState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-4: fetch the rest 4 records belong to the MySQL transaction</span></span><br><span class="line">        String[] expectedRestRecords =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"-D[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Shanghai, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="comment">// the 4 records are produced by 3 operations</span></span><br><span class="line">        List&lt;String&gt; restRecords = consumeRecords(restartReader, dataType, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        assertEqualsInOrder(Arrays.asList(expectedRestRecords), restRecords);</span><br><span class="line">        restartReader.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 binlog split</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSplit <span class="title">createBinlogSplit</span><span class="params">(MySqlSourceConfig sourceConfig)</span> </span>&#123;</span><br><span class="line">        MySqlBinlogSplitAssigner binlogSplitAssigner = <span class="keyword">new</span> MySqlBinlogSplitAssigner(sourceConfig);</span><br><span class="line">        binlogSplitAssigner.open();</span><br><span class="line">        <span class="keyword">return</span> binlogSplitAssigner.getNext().get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建 MysqlSourceReader ，分别创建阻塞队列、MySqlRecordEmitter、MySqlSplitReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSourceReader&lt;SourceRecord&gt; <span class="title">createReader</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceConfig configuration, SourceReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FutureCompletingBlockingQueue&lt;RecordsWithSplitIds&lt;SourceRecord&gt;&gt; elementsQueue =</span><br><span class="line">                <span class="keyword">new</span> FutureCompletingBlockingQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> MySqlRecordEmitter&lt;SourceRecord&gt; recordEmitter =</span><br><span class="line">                <span class="keyword">new</span> MySqlRecordEmitter&lt;&gt;(</span><br><span class="line">                        <span class="keyword">new</span> ForwardDeserializeSchema(),</span><br><span class="line">                        <span class="keyword">new</span> MySqlSourceReaderMetrics(readerContext.metricGroup()),</span><br><span class="line">                        configuration.isIncludeSchemaChanges());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlSourceReader&lt;&gt;(</span><br><span class="line">                elementsQueue,</span><br><span class="line">                () -&gt; createSplitReader(configuration),</span><br><span class="line">                recordEmitter,</span><br><span class="line">                readerContext.getConfiguration(),</span><br><span class="line">                readerContext,</span><br><span class="line">                configuration);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在一个事务中，进行4笔数据库操作</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeBinlogEventsInOneTransaction</span><span class="params">(MySqlSourceConfig sourceConfig, String tableId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        JdbcConnection connection = DebeziumUtils.openJdbcConnection(sourceConfig);</span><br><span class="line">        <span class="comment">// make 6 binlog events by 4 operations</span></span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        connection.execute(</span><br><span class="line">                <span class="string">"UPDATE "</span> + tableId + <span class="string">" SET address = 'Hangzhou' where id = 103"</span>,</span><br><span class="line">                <span class="string">"DELETE FROM "</span> + tableId + <span class="string">" where id = 102"</span>,</span><br><span class="line">                <span class="string">"INSERT INTO "</span> + tableId + <span class="string">" VALUES(102, 'user_2','Shanghai','123567891234')"</span>,</span><br><span class="line">                <span class="string">"UPDATE "</span> + tableId + <span class="string">" SET address = 'Shanghai' where id = 103"</span>);</span><br><span class="line">        connection.commit();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 elementQueues 中拉取下一批数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">consumeRecords</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceReader&lt;SourceRecord&gt; sourceReader, DataType recordType, <span class="keyword">int</span> changeEventNum)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Poll all the n records of the single split.</span></span><br><span class="line">        <span class="comment">// 创建 ReaderOutput</span></span><br><span class="line">        <span class="keyword">final</span> SimpleReaderOutput output = <span class="keyword">new</span> SimpleReaderOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ReaderOutput 的取出结果小于指定个数，则继续执行 sourceReader.pollNext()</span></span><br><span class="line">        <span class="keyword">while</span> (output.getResults().size() &lt; changeEventNum) &#123;</span><br><span class="line">            sourceReader.pollNext(output);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> RecordsFormatter formatter = <span class="keyword">new</span> RecordsFormatter(recordType);</span><br><span class="line">        <span class="keyword">return</span> formatter.format(output.getResults());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类中执行的 sql 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'flink'</span>,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">"user_1"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">"user_2"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">"user_3"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">"user_4"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">"user_5"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">111</span>,<span class="string">"user_6"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">118</span>,<span class="string">"user_7"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">121</span>,<span class="string">"user_8"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">123</span>,<span class="string">"user_9"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1009</span>,<span class="string">"user_10"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1010</span>,<span class="string">"user_11"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1011</span>,<span class="string">"user_12"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1012</span>,<span class="string">"user_13"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1013</span>,<span class="string">"user_14"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1014</span>,<span class="string">"user_15"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1015</span>,<span class="string">"user_16"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1016</span>,<span class="string">"user_17"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1017</span>,<span class="string">"user_18"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1018</span>,<span class="string">"user_19"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1019</span>,<span class="string">"user_20"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">2000</span>,<span class="string">"user_21"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>);</span><br></pre></td></tr></table></figure><p>下面来监测一下数据变化：</p><ol><li><p>创建的 MySqlBinlogSplit 格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"splitId"</span>:<span class="string">"binlog-split"</span>,</span><br><span class="line">    <span class="attr">"binlogSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    "completedSplit":true,  // totalFinishedSplitSize == finishedSnapshotSplitInfos</span><br><span class="line">    "finishedSnapshotSplitInfos":[</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    "snapshotSplit":false,</span><br><span class="line">    "startingOffset":&#123;</span><br><span class="line">        "filename":"mysql-bin.000003",</span><br><span class="line">        "gtidSet":"fb8daa95-9602-11ec-9adb-0242ac110003:1-35",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"mysql-bin.000003",</span><br><span class="line">            "pos":"11790",</span><br><span class="line">            "gtids":"fb8daa95-9602-11ec-9adb-0242ac110003:1-35",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":11790,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "endingOffset":&#123;</span><br><span class="line">        "filename":"",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"",</span><br><span class="line">            "pos":"-9223372036854775808",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":-9223372036854775808,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "totalFinishedSplitSize":0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取的 SourceRecord 格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SourceRecord&#123;</span><br><span class="line">sourcePartition=&#123;server=mysql_binlog_source&#125;,</span><br><span class="line">sourceOffset=&#123;transaction_id=null, ts_sec=1645771455, file=mysql-bin.000003, pos=11855, gtids=a5adbd99-9603-11ec-a0a1-0242ac110003:1-35, row=1, server_id=223344, event=2&#125;</span><br><span class="line">&#125; </span><br><span class="line">ConnectRecord&#123;</span><br><span class="line">topic=&apos;mysql_binlog_source.customer_va47fu.customers&apos;, </span><br><span class="line">kafkaPartition=null, </span><br><span class="line">key=Struct&#123;id=103&#125;, </span><br><span class="line">keySchema=Schema&#123;mysql_binlog_source.customer_va47fu.customers.Key:STRUCT&#125;, </span><br><span class="line">value=Struct&#123;</span><br><span class="line">before=Struct&#123;id=103,name=user_3,address=Shanghai,phone_number=123567891234&#125;,</span><br><span class="line">after=Struct&#123;id=103,name=user_3,address=Hangzhou,phone_number=123567891234&#125;,</span><br><span class="line">source=Struct&#123;</span><br><span class="line">version=1.5.4.Final,</span><br><span class="line">connector=mysql,</span><br><span class="line">name=mysql_binlog_source,</span><br><span class="line">ts_ms=1645771455000,</span><br><span class="line">db=customer_va47fu,</span><br><span class="line">table=customers,</span><br><span class="line">server_id=223344,</span><br><span class="line">gtid=a5adbd99-9603-11ec-a0a1-0242ac110003:36,</span><br><span class="line">file=mysql-bin.000003,pos=11995,</span><br><span class="line">row=0</span><br><span class="line">&#125;,</span><br><span class="line">op=u,</span><br><span class="line">ts_ms=1645771666855</span><br><span class="line">&#125;, </span><br><span class="line">valueSchema=Schema&#123;mysql_binlog_source.customer_va47fu.customers.Envelope:STRUCT&#125;, timestamp=null, headers=ConnectHeaders(headers=)&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取一个事件数据之后，MySqlBinlogSplit 数据变化如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"binlogSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"completedSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"startingOffset"</span>:&#123;</span><br><span class="line">        <span class="attr">"filename"</span>:<span class="string">"mysql-bin.000003"</span>,</span><br><span class="line">        <span class="attr">"gtidSet"</span>:<span class="string">"a5adbd99-9603-11ec-a0a1-0242ac110003:1-35"</span>,</span><br><span class="line">        <span class="attr">"offset"</span>:&#123;</span><br><span class="line">            <span class="attr">"ts_sec"</span>:<span class="string">"1645771455"</span>,</span><br><span class="line">            <span class="attr">"file"</span>:<span class="string">"mysql-bin.000003"</span>,</span><br><span class="line">            "pos":"11855",    // 起始位置由原来的 11790 变成了 11855</span><br><span class="line">            "gtids":"a5adbd99-9603-11ec-a0a1-0242ac110003:1-35",</span><br><span class="line">            "row":"1",</span><br><span class="line">            "server_id":"223344",</span><br><span class="line">            "event":"2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":11855,</span><br><span class="line">        "restartSkipEvents":2,</span><br><span class="line">        "restartSkipRows":1,</span><br><span class="line">        "serverId":223344,</span><br><span class="line">        "timestamp":1645771455</span><br><span class="line">    &#125;,</span><br><span class="line">    "endingOffset":&#123;</span><br><span class="line">        "filename":"",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"",</span><br><span class="line">            "pos":"-9223372036854775808",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":-9223372036854775808,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "finishedSnapshotSplitInfos":[</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    "snapshotSplit":false,</span><br><span class="line">    "totalFinishedSplitSize":0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MysqlSplitReader"><a href="#MysqlSplitReader" class="headerlink" title="MysqlSplitReader"></a>MysqlSplitReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSplitReader</span> <span class="keyword">implements</span> <span class="title">SplitReader</span>&lt;<span class="title">SourceRecord</span>, <span class="title">MySqlSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被分配到的 split</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;MySqlSplit&gt; splits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlSourceConfig sourceConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> subtaskId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前处理的 MySqlSplit 类型确定 Reader 类型：</span></span><br><span class="line"><span class="comment">     * MySqlBinlogSplit -&gt; SnapshotSplitReader</span></span><br><span class="line"><span class="comment">     * MySqlSnapshotSplit -&gt;  BinlogSplitReader</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这两个类都实现了 DebeziumReader ，复用 1.x 中的 reader 能力</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> DebeziumReader&lt;SourceRecord, MySqlSplit&gt; currentReader;</span><br><span class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> String currentSplitId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlSplitReader</span><span class="params">(MySqlSourceConfig sourceConfig, <span class="keyword">int</span> subtaskId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceConfig = sourceConfig;</span><br><span class="line">        <span class="keyword">this</span>.subtaskId = subtaskId;</span><br><span class="line">        <span class="keyword">this</span>.splits = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordsWithSplitIds&lt;SourceRecord&gt; <span class="title">fetch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同的 MySqlSplit 类型创建不同的 DebeziumReader</span></span><br><span class="line">        checkSplitOrStartNext();</span><br><span class="line">        Iterator&lt;SourceRecord&gt; dataIt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataIt = currentReader.pollSplitRecords();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"fetch data failed."</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataIt == <span class="keyword">null</span></span><br><span class="line">                ? finishedSnapshotSplit()</span><br><span class="line">                : MySqlRecords.forRecords(currentSplitId, dataIt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BinlogSplitReaderTest"><a href="#BinlogSplitReaderTest" class="headerlink" title="BinlogSplitReaderTest"></a>BinlogSplitReaderTest</h4><p>先 SnapshotSplitReader ，再 BinlogSplitReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinlogSplitReaderTest</span> <span class="keyword">extends</span> <span class="title">MySqlSourceTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个单独的数据库实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, <span class="string">"customer"</span>, <span class="string">"mysqluser"</span>, <span class="string">"mysqlpw"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BinaryLogClient binaryLogClient;</span><br><span class="line">    <span class="keyword">private</span> MySqlConnection mySqlConnection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadSingleBinlogSplit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化创建数据库，并执行 sql 脚本</span></span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        MySqlSourceConfig sourceConfig = getConfig(<span class="keyword">new</span> String[] &#123;<span class="string">"customers_even_dist"</span>&#125;);</span><br><span class="line">        binaryLogClient = DebeziumUtils.createBinaryClient(sourceConfig.getDbzConfiguration());</span><br><span class="line">        mySqlConnection = DebeziumUtils.createMySqlConnection(sourceConfig.getDbzConfiguration());</span><br><span class="line">        <span class="keyword">final</span> DataType dataType =</span><br><span class="line">                DataTypes.ROW(</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"id"</span>, DataTypes.BIGINT()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"name"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"address"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"phone_number"</span>, DataTypes.STRING()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 根据当前 customers_even_dist 表中记录，获取 MySqlSnapshotSplit 列表</span></span><br><span class="line"><span class="comment">         * 1. (null,105)</span></span><br><span class="line"><span class="comment">         * 2. (105,109)</span></span><br><span class="line"><span class="comment">         * 3. (109,null)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;MySqlSnapshotSplit&gt; splits =</span><br><span class="line">                getMySqlSplits(<span class="keyword">new</span> String[] &#123;<span class="string">"customers_even_dist"</span>&#125;, sourceConfig);</span><br><span class="line"></span><br><span class="line">        String[] expected =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"+I[101, user_1, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-D[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[104, user_4, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[103, user_3, Shanghai, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; actual =</span><br><span class="line">                readBinlogSplits(</span><br><span class="line">                        splits,</span><br><span class="line">                        dataType,</span><br><span class="line">                        sourceConfig,</span><br><span class="line">                        <span class="comment">// scanSplitsNum 设置为1，因此只处理第一个 split 区间 (null,105)</span></span><br><span class="line">                        <span class="number">1</span>,</span><br><span class="line">                        expected.length,</span><br><span class="line">                        splits.get(splits.size() - <span class="number">1</span>).getTableId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In any order </span></span><br><span class="line">        assertEqualsInAnyOrder(Arrays.asList(expected), actual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前 customers_even_dist 表中记录，获取 MySqlSnapshotSplit 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;MySqlSnapshotSplit&gt; <span class="title">getMySqlSplits</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] captureTables, MySqlSourceConfig sourceConfig)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; captureTableIds =</span><br><span class="line">                Arrays.stream(captureTables)</span><br><span class="line">                        .map(tableName -&gt; customerDatabase.getDatabaseName() + <span class="string">"."</span> + tableName)</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">        List&lt;TableId&gt; remainingTables =</span><br><span class="line">                captureTableIds.stream().map(TableId::parse).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MySqlSnapshotSplitAssigner assigner =</span><br><span class="line">                <span class="keyword">new</span> MySqlSnapshotSplitAssigner(</span><br><span class="line">                        sourceConfig, DEFAULT_PARALLELISM, remainingTables, <span class="keyword">false</span>);</span><br><span class="line">        assigner.open();</span><br><span class="line">        List&lt;MySqlSnapshotSplit&gt; mySqlSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Optional&lt;MySqlSplit&gt; mySqlSplit = assigner.getNext();</span><br><span class="line">            <span class="keyword">if</span> (mySqlSplit.isPresent()) &#123;</span><br><span class="line">                mySqlSplits.add(mySqlSplit.get().asSnapshotSplit());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        assigner.close();</span><br><span class="line">        <span class="keyword">return</span> mySqlSplits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SplitReader 读取分片数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">readBinlogSplits</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;MySqlSnapshotSplit&gt; sqlSplits,</span></span></span><br><span class="line"><span class="function"><span class="params">            DataType dataType,</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceConfig sourceConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> scanSplitsNum,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> expectedSize,</span></span></span><br><span class="line"><span class="function"><span class="params">            TableId binlogChangeTableId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StatefulTaskContext statefulTaskContext =</span><br><span class="line">                <span class="keyword">new</span> StatefulTaskContext(sourceConfig, binaryLogClient, mySqlConnection);</span><br><span class="line">        <span class="keyword">final</span> SnapshotSplitReader snapshotSplitReader =</span><br><span class="line">                <span class="keyword">new</span> SnapshotSplitReader(statefulTaskContext, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-1: read snapshot splits firstly</span></span><br><span class="line">        <span class="comment">// 先读取 snapshot split 分片中的数据</span></span><br><span class="line">        List&lt;SourceRecord&gt; fetchedRecords = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scanSplitsNum; i++) &#123;</span><br><span class="line">            MySqlSplit sqlSplit = sqlSplits.get(i);</span><br><span class="line">            <span class="keyword">if</span> (snapshotSplitReader.isFinished()) &#123;</span><br><span class="line">                snapshotSplitReader.submitSplit(sqlSplit);</span><br><span class="line">            &#125;</span><br><span class="line">            Iterator&lt;SourceRecord&gt; res;</span><br><span class="line">            <span class="keyword">while</span> ((res = snapshotSplitReader.pollSplitRecords()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (res.hasNext()) &#123;</span><br><span class="line">                    SourceRecord sourceRecord = res.next();</span><br><span class="line">                    fetchedRecords.add(sourceRecord);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 读取数据结果如下，包括lw、hw、4条分区数据：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;split_id=customer_1bioqsl.customers_even_dist:0,watermark_kind=LOW&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=101,name=user_1,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411405&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=104,name=user_4,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411412&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=102,name=user_2,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411411&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=103,name=user_3,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411412&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;split_id=customer_1bioqsl.customers_even_dist:0,watermark_kind=HIGH&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-2: create binlog split according the finished snapshot splits</span></span><br><span class="line">        <span class="comment">// 获取已读取完成的 snapshot split 相关信息，FinishedSnapshotSplitInfo.highwatermark.offset 为 11837</span></span><br><span class="line">        List&lt;FinishedSnapshotSplitInfo&gt; finishedSplitsInfo =</span><br><span class="line">                getFinishedSplitsInfo(sqlSplits, fetchedRecords);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取已完成的 snapshot split 的最大 hw offset ，作为 binlog split 的起点     </span></span><br><span class="line">        BinlogOffset startingOffset = getStartingOffsetOfBinlogSplit(finishedSplitsInfo);</span><br><span class="line">        Map&lt;TableId, TableChange&gt; tableSchemas = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MySqlSplit mySqlSplit : sqlSplits) &#123;</span><br><span class="line">            tableSchemas.putAll(mySqlSplit.getTableSchemas());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 binlog split</span></span><br><span class="line">        MySqlSplit binlogSplit =</span><br><span class="line">                <span class="keyword">new</span> MySqlBinlogSplit(</span><br><span class="line">                        <span class="string">"binlog-split"</span>,</span><br><span class="line">                        startingOffset,</span><br><span class="line">                        <span class="comment">// end offset 设置为 Long 的最大值</span></span><br><span class="line">                        BinlogOffset.NO_STOPPING_OFFSET,</span><br><span class="line">                        finishedSplitsInfo,</span><br><span class="line">                        tableSchemas,</span><br><span class="line">                        finishedSplitsInfo.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-3: test read binlog split</span></span><br><span class="line">        BinlogSplitReader binlogReader = <span class="keyword">new</span> BinlogSplitReader(statefulTaskContext, <span class="number">0</span>);</span><br><span class="line">        binlogReader.submitSplit(binlogSplit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-4: make some binlog events</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * "UPDATE " + tableId + " SET address = 'Hangzhou' where id = 103"</span></span><br><span class="line"><span class="comment">         * "DELETE FROM " + tableId + " where id = 102"</span></span><br><span class="line"><span class="comment">         * "INSERT INTO " + tableId + " VALUES(102, 'user_2','Shanghai','123567891234')"</span></span><br><span class="line"><span class="comment">         * "UPDATE " + tableId + " SET address = 'Shanghai' where id = 103"</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 103、after 103&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 102&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;after 102&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 103、after 103&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (binlogChangeTableId.table().contains(<span class="string">"customers"</span>)) &#123;</span><br><span class="line">            makeCustomersBinlogEvents(</span><br><span class="line">                    statefulTaskContext.getConnection(),</span><br><span class="line">                    binlogChangeTableId.toString(),</span><br><span class="line">                    scanSplitsNum == <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            makeCustomerCardsBinlogEvents(</span><br><span class="line">                    statefulTaskContext.getConnection(), binlogChangeTableId.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-5: fetched all produced binlog data and format them</span></span><br><span class="line">        List&lt;String&gt; actual = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator&lt;SourceRecord&gt; recordIterator;</span><br><span class="line">        <span class="keyword">while</span> ((recordIterator = binlogReader.pollSplitRecords()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (recordIterator.hasNext()) &#123;</span><br><span class="line">                fetchedRecords.add(recordIterator.next());</span><br><span class="line">            &#125;</span><br><span class="line">            actual.addAll(formatResult(fetchedRecords, dataType));</span><br><span class="line">            fetchedRecords.clear();</span><br><span class="line">            <span class="keyword">if</span> (actual.size() &gt;= expectedSize) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> actual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前测试用例构建最上层的 MySqlSource 配置类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSourceConfig <span class="title">getConfig</span><span class="params">(String[] captureTables)</span> </span>&#123;</span><br><span class="line">        String[] captureTableIds =</span><br><span class="line">                Arrays.stream(captureTables)</span><br><span class="line">                        .map(tableName -&gt; customerDatabase.getDatabaseName() + <span class="string">"."</span> + tableName)</span><br><span class="line">                        .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlSourceConfigFactory()</span><br><span class="line">                .databaseList(customerDatabase.getDatabaseName())</span><br><span class="line">                .tableList(captureTableIds)</span><br><span class="line">                .hostname(MYSQL_CONTAINER.getHost())</span><br><span class="line">                .port(MYSQL_CONTAINER.getDatabasePort())</span><br><span class="line">                .username(customerDatabase.getUsername())</span><br><span class="line">                <span class="comment">// snapshot 分片大小设置为 4</span></span><br><span class="line">                .splitSize(<span class="number">4</span>)</span><br><span class="line">                <span class="comment">// 每次取数范围为 2 条</span></span><br><span class="line">                .fetchSize(<span class="number">2</span>)</span><br><span class="line">                .password(customerDatabase.getPassword())</span><br><span class="line">                .createConfig(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类中执行的 sql 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create table whose split key is evenly distributed</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers_even_dist (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- splitSize 设置为 4，划分成左闭右开的区间，所以已经插入的 10 条数据会被分成 3 个 SnapshotSplit:</span></span><br><span class="line"><span class="comment">-- （null,105）101、102、103、104</span></span><br><span class="line"><span class="comment">-- [105,109)  105、106、107、108</span></span><br><span class="line"><span class="comment">-- [109,null) 109、110</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers_even_dist</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'user_1'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">'user_2'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">'user_3'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">104</span>,<span class="string">'user_4'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">105</span>,<span class="string">'user_5'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">106</span>,<span class="string">'user_6'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">107</span>,<span class="string">'user_7'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">108</span>,<span class="string">'user_8'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">'user_9'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">'user_10'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.percona.com/blog/2014/03/11/introducing-backup-locks-percona-server-2/" target="_blank" rel="noopener">Percona文章- FLUSH TABLES WITH READ LOCK 命令行影响</a><br><a href="https://zhjwpku.com/2022/01/16/flink-cdc-2-0-analysis.html" target="_blank" rel="noopener">Flink CDC 2.0实现原理剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flink CDC 2.0 的设计方案，借鉴了 Netflix 的 DBLog paper 实现全程无锁，并基于 Flink FLIP-27 Source 实现水平扩展，并支持全量阶段 checkpoint 。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink/Flink-CDC/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-27: Refactor Source Interface</title>
    <link href="http://yoursite.com/2022/02/16/Flink-FLIP-27-Refactor-Source-Interface/"/>
    <id>http://yoursite.com/2022/02/16/Flink-FLIP-27-Refactor-Source-Interface/</id>
    <published>2022-02-16T03:30:05.000Z</published>
    <updated>2022-03-29T18:24:19.181Z</updated>
    
    <content type="html"><![CDATA[<p>FLIP-27: Refactor Source Interface ，是对 SourceFunction 的重构，旨在解决 <code>SourceFunction</code> 中存在的几个痛点。<code>SplitEnumerator</code> 负责发现并 split，<code>SourceReader</code> 负责读取 split 的实际数据。也是批流一体 API 推进的产物。</p><a id="more"></a><h2 id="重构动机"><a href="#重构动机" class="headerlink" title="重构动机"></a>重构动机</h2><p>先前的 SourceFunction 存在以下几个痛点：</p><ul><li>split 的发现逻辑（work discovery）和实际读取数据的逻辑耦合在 SourceFunction 和 DataStream 接口中，导致 sourcce 实现的复杂度</li><li>批处理和流处理需要实现不同的 source</li><li>partitions/shards/splits 等概念没有在接口中显示定义，使得很难以独立于源的方式实现事件时间对齐、分区 watermark 、动态 split 分配 、work stealing 等功能</li><li>checkpoint 锁由 SourceFunction 占有，导致框架难以优化</li><li>没有通用框架，意味着每个 source 都要实现一个复杂的线程模型，增加了新 source 实现及测试的难度</li></ul><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="发现读取分离"><a href="#发现读取分离" class="headerlink" title="发现读取分离"></a>发现读取分离</h3><p>Source 端有两个主要组件：</p><ul><li>SplitEnumerator: 发现并分配 split (files, partitions 等)<br>SplitEnumerator 仅运行一次，非并行的，未来可以考虑并行化。通常运行在 JobManager 上，或者作为 TaskManager 上的单任务。<br>在 File Source 中， SplitEnumerator 列举出所有文件；<br>在 Kafka Source 中，SplitEnumerator 查询出 kafka 需要读取的所有分区；</li><li>Reader: 读取 splits 中的真实数据<br>从分配到的 splits 中读取数据。可以一个接一个的读取有界 splits ，也可以并发读取多个 splits。</li></ul><p>这两个组件组成了核心功能，主要的 Source 接口是一个创建 split enumerators 和 readers 的工厂：</p><p><img src="FLIP-27_Refactor-Source-Interface%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt></p><h3 id="统一批流-API"><a href="#统一批流-API" class="headerlink" title="统一批流 API"></a>统一批流 API</h3><p>任意 source 都应该既能作为 batch source ，也能作为 streaming source 。有界性是 source 接口的内在属性，大多数情况下，仅 SplitEnumerator 需要识别有界性属性，而 SplitReaders 不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setRuntimeMode(RuntimeMode.BATCH);</span><br></pre></td></tr></table></figure><h3 id="通用-enumerator-reader-通信机制"><a href="#通用-enumerator-reader-通信机制" class="headerlink" title="通用 enumerator-reader 通信机制"></a>通用 enumerator-reader 通信机制</h3><p>SplitEnumerator 和 SourceReader 都有各自的实现类，两个组件之间需要通信，在二者之间引入了一种通用的消息传递机制。<br>需要在 JobMasterGateway 和 TaskExecutorGateway 中分别实现 RPC 方法。消息传递栈如下图：<br><img src="SplitEnumerator%E5%92%8CSourceReader%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%A0%88.png" alt></p><p>SourceCoordinator 和 SourceOperator 作为上图中 OperatorCoordinator 和 Operator 针对 FLIP-27 的实现，其类图和时序图如下：</p><p><code>SourceEvent</code> 是在 SplitEnumerator 和 SourceReader 之间传递消息的接口，<code>OperatorEvent</code> 是在 OperatorCoordinator 和 Operator 之间传递消息的接口。<br>在这个 FLIP 中，SourceCoordinator 将是封装 SplitEnumerator 的 OperatorCoordinator 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobMasterGateway</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">CompletableFuture&lt;Acknowledge&gt; <span class="title">sendOperatorEventToCoordinator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ExecutionAttemptID task,</span></span></span><br><span class="line"><span class="function"><span class="params">            OperatorID operatorID,</span></span></span><br><span class="line"><span class="function"><span class="params">            SerializedValue&lt;OperatorEvent&gt; event)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskExecutorGateway</span> <span class="keyword">extends</span> <span class="title">RpcGateway</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="function">CompletableFuture&lt;Acknowledge&gt; <span class="title">sendOperatorEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ExecutionAttemptID task,</span></span></span><br><span class="line"><span class="function"><span class="params">            OperatorID operator,</span></span></span><br><span class="line"><span class="function"><span class="params">            SerializedValue&lt;OperatorEvent&gt; evt)</span></span>;</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SplitEnumerator"><a href="#SplitEnumerator" class="headerlink" title="SplitEnumerator"></a>SplitEnumerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitEnumerator</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">CheckpointT</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AutoCloseable</span>, <span class="title">CheckpointListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleSplitRequest</span><span class="params">(<span class="keyword">int</span> subtaskId, @Nullable String requesterHostname)</span></span>;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addSplitsBack</span><span class="params">(List&lt;SplitT&gt; splits, <span class="keyword">int</span> subtaskId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 subTaskId 添加一个新的 source reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addReader</span><span class="params">(<span class="keyword">int</span> subtaskId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitEnumeratorContext</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 source event 到 source reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendEventToSourceReader</span><span class="params">(<span class="keyword">int</span> subtaskId, SourceEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已经注册的 source reader 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Integer, ReaderInfo&gt; <span class="title">registeredReaders</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分配 splits</span></span><br><span class="line"><span class="comment">     * 根据 subTaskId 构建 gateway ，并下发 SourceSplits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">assignSplits</span><span class="params">(SplitsAssignment&lt;SplitT&gt; newSplitAssignments)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitsAssignment</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * subTaskId, SourceSplit 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, List&lt;SplitT&gt;&gt; assignment;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SourceReader-抽象"><a href="#SourceReader-抽象" class="headerlink" title="SourceReader 抽象"></a>SourceReader 抽象</h3><p>首先，看下 Flink 的 Source 核心接口被设计地非常通用，但是 Reader 的实现复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Source</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">EnumChkT</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 source 的有界性，BOUNDED ｜ CONTINUOUS_UNBOUNDED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boundedness <span class="title">getBoundedness</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SourceReader&lt;T, SplitT&gt; <span class="title">createReader</span><span class="params">(SourceReaderContext readerContext)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 enumerator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SplitEnumerator&lt;SplitT, EnumChkT&gt; <span class="title">createEnumerator</span><span class="params">(SplitEnumeratorContext&lt;SplitT&gt; enumContext)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在 FLIP-27 中封装了一个抽象类来提供更简单的接口以允许阻塞调用，SourceReaderBase 作为 SourceReader 的一个抽象实现，基于生产者消费者模式，提供了主线程和内部读取线程之间的同步机制。用户只需专注于：</p><ul><li>自定义 SourceReader (继承 SourceReaderBase)</li><li>从外部系统获取记录（实现 SplitReader 接口）</li><li>发送数据到下游 (实现 RecordEmitter 接口)</li><li>watermark 相关处理</li></ul><h4 id="SourceReaderBase"><a href="#SourceReaderBase" class="headerlink" title="SourceReaderBase"></a>SourceReaderBase</h4><p>SourceReaderBase 的工作流程如下图：<br><img src="SourceReaderBase%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91.png" alt></p><ol><li>当 SplitEnumerator 将一个新的 split 分配给 SourceReader ，SourceReader 先为该 split 初始化 state ，再经过 SplitFetcherManager -&gt; SplitFetcher -&gt; SplitReader 分配到指定的 SplitReader</li><li>外部数据经过 SplitReader -&gt; SplitFetcher.elementQueues -&gt; SourceReaderBase.elementQueues -&gt; RecordsWithSplitIds<e> -&gt; RecordEmitter ，数据批形式地入队列出队列，性能更好</e></li><li>SourceReaderBase 遍历每一条数据，并查询数据对应的 split state ，二者会通过 RecordEmitter 发送到下游</li></ol><p>SourceReaderBase 类的关键属性和方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceReaderBase</span>&lt;<span class="title">E</span>, <span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">SplitStateT</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================================================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者消费者模式的阻塞队列，存放 SplitFetcher 线程从外部系统读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureCompletingBlockingQueue&lt;RecordsWithSplitIds&lt;E&gt;&gt; elementsQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SplitFetcher 线程池管理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> SplitFetcherManager&lt;E, SplitT&gt; splitFetcherManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SplitReader最新读取的records-by-split批</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RecordsWithSplitIds&lt;E&gt; currentFetch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前遍历处理到的 Output</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SourceOutput&lt;T&gt; currentSplitOutput;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 SplitReaders 读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> RecordEmitter&lt;E, T, SplitStateT&gt; recordEmitter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * source reader 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> SourceReaderContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * splits 的状态后端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SplitContext&lt;T, SplitStateT&gt;&gt; splitStates;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拉取下一批数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput&lt;T&gt; output)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被分配到新一批 splits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;SplitT&gt; splits)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SplitReader"><a href="#SplitReader" class="headerlink" title="SplitReader"></a>SplitReader</h4><p>大多数 readers 可以分为以下几类：</p><ul><li>顺序单 split （file，数据库查询，大多数有界 splits）<br><img src="Sequential_Single_Split.png" alt></li><li>多 split 多路 （Kafka，Pulsar，Pravega…）<br><img src="Multi-split_Multiplexed.png" alt></li><li>多 split 多线程 (Kinesis…)<br><img src="Multi-split_Multi-threaded.png" alt></li></ul><p>SourceReader 实现如下接口中的方法，fetch 和 handleSplitsChanges 需要在相同线程中执行，无需在 connector 中进行任何并发处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitReader</span>&lt;<span class="title">E</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从外部系统读取记录，转换数据格式，写入到 blocking queue，传递给 &#123;<span class="doctag">@link</span> RecordEmitter&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RecordsWithSplitIds&lt;E&gt; <span class="title">fetch</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 split change</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleSplitsChanges</span><span class="params">(Queue&lt;SplitsChange&lt;SplitT&gt;&gt; splitsChanges)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * fetcher 线程阻塞时唤醒 split reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface" target="_blank" rel="noopener">FLIP-27: Refactor Source Interface</a><br><a href="https://zhjwpku.com/2022/01/16/flink-cdc-2-0-analysis.html" target="_blank" rel="noopener">Flink CDC 2.0实现原理剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FLIP-27: Refactor Source Interface ，是对 SourceFunction 的重构，旨在解决 &lt;code&gt;SourceFunction&lt;/code&gt; 中存在的几个痛点。&lt;code&gt;SplitEnumerator&lt;/code&gt; 负责发现并 split，&lt;code&gt;SourceReader&lt;/code&gt; 负责读取 split 的实际数据。也是批流一体 API 推进的产物。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
      <category term="Flink-CDC" scheme="http://yoursite.com/tags/Flink-CDC/"/>
    
  </entry>
  
  <entry>
    <title>Flink-CDC-DBLog无锁算法</title>
    <link href="http://yoursite.com/2022/02/15/Flink-CDC-DBLog%E6%97%A0%E9%94%81%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2022/02/15/Flink-CDC-DBLog无锁算法/</id>
    <published>2022-02-15T05:50:40.000Z</published>
    <updated>2023-03-02T08:36:01.857Z</updated>
    
    <content type="html"><![CDATA[<p>DBLog 是一个 java 框架，可以从数据库的事务日志中捕获变更行，也可以通过执行表 select 语句获得数据库的全量数据。</p><a id="more"></a><h2 id="MySQL-主从同步原理"><a href="#MySQL-主从同步原理" class="headerlink" title="MySQL 主从同步原理"></a>MySQL 主从同步原理</h2><p><img src="MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt></p><ol><li>Master 主库，启动 binlog 机制，将变更数据写入 binlog 文件。（binary log，记录的是二进制日志事件 log events，可以通过 <code>show binlog events</code> 命令查看）</li><li>Slave (I/O thread)，从 Master 主库拉取 binlog 数据，将它拷贝到 Slave 的中继日志（relay log）中</li><li>Slave (SQL thread)， 回放 relay log，更新从数据库以此来达到数据一致</li></ol><p>注意，Master 主库一般会有多台 Slave 订阅，且 Master 主库要支持业务系统实时变更操作，服务器资源会有瓶颈。</p><h2 id="CDC-工具比较"><a href="#CDC-工具比较" class="headerlink" title="CDC 工具比较"></a>CDC 工具比较</h2><p>全量同步：</p><table><thead><tr><th>需求点</th><th>Databus</th><th>Debezium</th><th>MaxWell</th><th>MySQLStreamer</th><th>DBLog</th></tr></thead><tbody><tr><td>任何时间点触发</td><td>Yes</td><td>No</td><td>Yes</td><td>Unknown</td><td>Yes</td></tr><tr><td>暂停与恢复</td><td>Yes</td><td>No</td><td>No</td><td>Unknown</td><td>Yes</td></tr><tr><td>日志事件处理不暂缓</td><td>No</td><td>No</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>保证历史数据顺序</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>不使用锁</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>无厂商定制化</td><td>No</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr></tbody></table><h2 id="DBLog"><a href="#DBLog" class="headerlink" title="DBLog"></a>DBLog</h2><p><img src="DBLog_Architecture.png" alt></p><h3 id="全量状态捕获"><a href="#全量状态捕获" class="headerlink" title="全量状态捕获"></a>全量状态捕获</h3><p><img src="Chunk%E5%88%87%E5%88%86.png" alt><br>通过表的主键对表中的数据进行分片。假设每个 Chunk 的步长为 3 ，按照这个规则进行切分，只需要把这些 Chunk 的区间做成左开右闭或者左闭右开的区间，保证衔接后的区间能够等于表的主键区间即可。<br>Chunk2 的查询条件为 <code>c1 &gt; 4</code>。</p><p>在 Zookeeper 中存储最新 Chunk 的最后一行，以便从最新的 Chunk 中暂停和恢复读取。</p><p>针对全量读取，DBLog 提出的算法叫做 <code>Watermark-based Chunk Selection</code>，通过在源数据库中维护一个单行单列的表作为信号表，在查询每个 chunk 数据前后分别更新该记录使得在事务日志中生产两个事件<br>lw（低水位）和 hw（高水位），然后将 select 数据和 [lw,hw] 之间的日志进行处理，获得该 chunk 的 point-in-time 为 hw 的一组数据。</p><p>Chunk 读取算法步骤：<br><img src="Watermar-based_Chunk_Selection%E7%AE%97%E6%B3%95%E4%BC%AA%E4%BB%A3%E7%A0%81.png" alt></p><ol><li>暂停日志事件处理</li><li>更新 watermark 表的 uuid，生成 lw</li><li>select chunk ，存储在内存中</li><li>更新 watermark 表的 uuid，生成 hw</li><li>恢复日志事件处理，输出接收到的日志事件，监听 low watermark event 到来</li></ol><p>当接收到 low watermark event 时，去除内存中发生变化的数据主键。当接收到 high watermark event 时，拼接 chunk 中的剩余数据主键并输出。<br>定义一个 window 来处理 chunk 数据，写入 lw 时打开 window，写入 hw 时关闭 window。</p><p>举例一张表中包含主键 K1、k2、k3、k4、k5、k6，每一个 change log entry 都代表对主键的一个 create、update 或 delete 事件。</p><ol><li><p>首先通过 <code>SHOW MASTER STATUS</code> 获取当前 binlog 文件的偏移量当作 lw；</p></li><li><p>然后通过 SELECT 读取全量数据的快照 snapshot ，在读取的过程中无锁操作，允许数据的插入和更新；</p></li><li><p>读取完快照 Snapshot ，再通过 <code>SHOW MASTER STATUS</code> 获取当前 binlog 文件的偏移量当作 hw；<br>更新信号表分别生成 lw 和 hw，并通过 change log 接收到：<br><img src="Watermar-based_Chunk_Selection%E7%94%9F%E6%88%90%E4%BD%8E%E9%AB%98%E7%82%B9%E4%BD%8D.png" alt></p></li><li><p>读取 lw ～ hw 中的数据集 delta，设置 Snapshot = Snapshot - delta；<br>窗口中发生变更的数据将被移除出内存，没有变更的数据将被拼接到 output buffer 中：<br><img src="Watermar-based_Chunk_Selection%E5%90%88%E5%B9%B6%E5%A2%9E%E9%87%8F%E5%88%B0%E5%85%A8%E9%87%8F.png" alt></p></li><li><p>基于最新的 snapshot ，从 lw 开始消费 binlog ，执行 binlog 回放；<br>全量同步与增量同步交叉合并输出结果：<br><img src="%E5%85%A8%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E4%BA%A4%E5%8F%89%E8%BE%93%E5%87%BA.png" alt></p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_replication.html" target="_blank" rel="noopener">MySQL Replication Protocol</a><br><a href="https://netflixtechblog.com/dblog-a-generic-change-data-capture-framework-69351fb9099b" target="_blank" rel="noopener">DBLog: A Generic Change-Data-Capture Framework</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DBLog 是一个 java 框架，可以从数据库的事务日志中捕获变更行，也可以通过执行表 select 语句获得数据库的全量数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink/Flink-CDC/"/>
    
    
  </entry>
  
</feed>
