<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matty&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-25T05:10:44.835Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miaowenting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Pulsar</title>
    <link href="http://yoursite.com/2021/05/25/Apache-Pulsar/"/>
    <id>http://yoursite.com/2021/05/25/Apache-Pulsar/</id>
    <published>2021-05-25T05:09:47.000Z</published>
    <updated>2021-05-25T05:10:44.835Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d86f7dbf17f1668745815bfb46f16a685e09e6d364195037659f61199612e210">09eee18b405207af8c1b71039cebd149</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Pulsar" scheme="http://yoursite.com/categories/Pulsar/"/>
    
    
  </entry>
  
  <entry>
    <title>Hologres</title>
    <link href="http://yoursite.com/2021/05/25/Hologres/"/>
    <id>http://yoursite.com/2021/05/25/Hologres/</id>
    <published>2021-05-25T04:56:14.000Z</published>
    <updated>2021-05-25T04:56:49.044Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d86f7dbf17f1668745815bfb46f16a685e09e6d364195037659f61199612e210">09eee18b405207af8c1b71039cebd149</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Hologres" scheme="http://yoursite.com/categories/Hologres/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据发展趋势</title>
    <link href="http://yoursite.com/2021/05/24/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/"/>
    <id>http://yoursite.com/2021/05/24/大数据发展趋势/</id>
    <published>2021-05-24T07:30:57.000Z</published>
    <updated>2021-05-25T05:06:53.186Z</updated>
    
    <content type="html"><![CDATA[<p>现代企业的大数据平台大多是基于 Hadoop 构建的”一存多算”的多元化架构，以 HDFS 为统一存储，通过 Spark、HBase、Flink、Presto 等多种计算引擎满足不同场景的处理需求。<br>如今，高弹性和可扩展的计算与存储俨然已经非常成熟了，未来云原生、一体化将是大数据的技术发展趋势，并且依附于小程序IoT等业务载体，以 Saas 带动 IaaS 必将成为大势所趋。</p><a id="more"></a><h2 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h2><p>上云已经成为企业数字化的共识，上云之后如何用好云是当前大家的重点讨论和思考，如果仍然按照过去线下机房的模式去部署和使用大数据，不仅无法获得云计算的红利，甚至在成本效率上可能面临诸多不适。所以，以”存储计算分离+弹性Serverless”为代表的云原生大数据架构，实现存储的计算伸缩、资源弹性按需使用，大幅提升资源利用率、系统运维灵活性，成为接下来的主要趋势。在阿里云平台，以 Lindorm (兼容HDFS、HBase等多摸的 Serverless 存储) + DLA (提供 Spark、Presto等多模态的 Serverless 计算)向企业提供了云原生的大数据最佳实践。</p><h2 id="一体化"><a href="#一体化" class="headerlink" title="一体化"></a>一体化</h2><p>开源大数据技术在经过十多年的快速发展，在采集、存储、计算、调度、管理等各个方面的整体版图已经相当完善，同时面向各个场景的存储计算引擎也呈现百花齐放的景象，但这也加大了用户的使用门槛和维护复杂度，多种系统的一体化也越来越成为下一个大的发展趋势，比如多种模型数据库的一体化、大数据与数据库的一体化、批计算与流计算的一体化、数据湖与数据仓库的一体化等，这些技术上的整合，可以帮助企业更加经济高效的用好数据。</p><ul><li><p>结果的批流一体<br>用户不需要关心批或者流，在用户提交查询的时候得到的结果就是截止那一刻的统计结果。</p></li><li><p>存储的批流一体：统计场景<br>如 Hologres<br>高性能的实时/批量 append 和 update 的能力，读写互不影响，比如目前比较火的数据湖的概念<br>增量订阅读取、批量读取的能力，类似 Apache Pulsar<br>和 OLAP 引擎（impala、presto、clickhouse）对接的能力，列式存储具备较强 SCAN 和 filter 的能力</p></li><li><p>计算引擎的批流一体<br>一套代码搞定批流统计场景，降低开发运维成本</p></li></ul><h2 id="SaaS-带动-IaaS"><a href="#SaaS-带动-IaaS" class="headerlink" title="SaaS 带动 IaaS"></a>SaaS 带动 IaaS</h2><p>与美国相比，中国的云计算市场是”本末倒置”的。美国是以 SaaS 为主，中国现在还是以 IaaS 为主，处于大建数据中心阶段。</p><p>但数据中心里躺着的那些服务器是需要用户买单的，而 SaaS 应用是消耗这些服务器的不二法门。用 SaaS 带动 IaaS，是主流云厂商非常重要的竞争策略。阿里云力推的”云钉一体”就是一个典型案例，可以预见，腾讯云、华为云都将走这一条路。</p><p>要有足够繁荣的生态，才能消耗那些躺在数据中心里的上百万台云服务器。不然，服务器利用率上不去，盲目上规模无异于自杀。</p><p>虽然业内对阿里云+钉钉、腾讯云+企业微信的组合介绍已经很多了，但他们的手里还有第二张王牌。支付宝是阿里云手里的第二张王牌，微信是腾讯云手里的第二张王牌。</p><p>在 PC 时代，大一点的企业以及政府、学校等机构都有一个官方网站，是这些机构对外进行品牌展示、办理业务的窗口。在移动互联网时代，手机替换了电脑。人们越来越多用手机来了解信息和办理业务，网页端的官方网站日渐式微。</p><p>随着 5G 网络的建设普及，小程序将成为 PC 时代”官网”一样的存在。并且，小程序的互动性、及时性会更强。大量的企业和政府单位，将通过小程序的方式来进行信息传递、业务办理，并与用户进行直接、实时的沟通。</p><p>一旦小程序更多地承载业务场景，那其承载的信息流和业务流将出现指数级增长，这需要消耗大量的计算、网络资源，也将成为消耗云计算的关键渠道。</p><p>届时，得小程序者得云计算天下。</p><p>谁会是小程序的赢家，第一是微信，第二是支付宝。百度、华为、字节跳动都得靠边站，UCloud、青云这些云计算小巨头更没戏，而支付宝将成为政府服务的主要渠道，越来越多的政府事务将会可以通过支付宝办理。</p><p>通过手机办理政府业务，将成为大势所趋。并且，没必要每个政府部门都开发一款 App。比如个人所得税 APP，一年也就用一两次。像这类应用，本身业务场景不复杂，通过小程序来实现完全可以。随着 5G 网络的成熟，小程序的流畅度会进一步提升，能够承载的业务场景也会更多。</p><p>支付宝很可能会垄断政府对外业务，随之而来的，阿里云则可能会垄断政务云市场。政府不仅要关注内部系统，更重要的是要与公民进行交互，而这需要一个国民级的 APP 来进行承载。<br>这个国民级 APP，主要是支付宝，其次是微信。</p><p>前端通过支付宝来作为政府服务窗口，后端通过阿里云承载政务云系统，并且实现不同政府部门业务系统和数据的打通，将是未来的发展趋势。因此，阿里云在政务云的市场份额会进一步扩大，这对 UCloud 这样的小巨头而言不是个好消息。</p><p>另一方面，微信小程序的发展空间则更大，并且不局限于政务领域。将来，大部分企业对外服务的主阵地都将由官网转移到微信小程序上。与之配套的，腾讯云很可能会成为最大的赢家。</p><p>以这个角度来看，阿里云可以通过钉钉+支付宝来构建应用生态，腾讯云可以借助微信+企业微信来构建应用生态，以 SaaS 带动 IaaS 消耗。这是横跨C端和B端的顶级巨头玩法，UCloud完全没有可能建立这样的生态系统。未来，UCloud面临阿里云、腾讯云的生态战压力会越来越大。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.infoq.cn/article/0vipwxcltrcc85xojnxe" target="_blank" rel="noopener">阿里为什么要做多模数据库？</a><br><a href="http://www.woshipm.com/it/2795621.html" target="_blank" rel="noopener">小程序生态之路：阿里向左，腾讯向右 – 行业深度战略分析报告</a><br><a href="https://mp.weixin.qq.com/s/1sn6zkNUa7lkR4H_Cij0yw" target="_blank" rel="noopener">UCloud，创业公司死磕公有云的悲壮</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现代企业的大数据平台大多是基于 Hadoop 构建的”一存多算”的多元化架构，以 HDFS 为统一存储，通过 Spark、HBase、Flink、Presto 等多种计算引擎满足不同场景的处理需求。&lt;br&gt;如今，高弹性和可扩展的计算与存储俨然已经非常成熟了，未来云原生、一体化将是大数据的技术发展趋势，并且依附于小程序IoT等业务载体，以 Saas 带动 IaaS 必将成为大势所趋。&lt;/p&gt;
    
    </summary>
    
      <category term="思考总结" scheme="http://yoursite.com/categories/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache Iceberg</title>
    <link href="http://yoursite.com/2021/02/20/Apache-Iceberg/"/>
    <id>http://yoursite.com/2021/02/20/Apache-Iceberg/</id>
    <published>2021-02-20T08:19:22.000Z</published>
    <updated>2021-05-31T12:36:41.863Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="042017232bddaa94e2188354b76cb0341d3a10516fecc7032f4ccfaa0efa19d2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="DataLake" scheme="http://yoursite.com/categories/DataLake/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年终个人总结</title>
    <link href="http://yoursite.com/2021/02/01/2020%E5%B9%B4%E7%BB%88%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2021/02/01/2020年终个人总结/</id>
    <published>2021-02-01T06:00:40.000Z</published>
    <updated>2021-05-24T06:03:41.127Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e8cb66f1889d332bb7f8280f899753257c5a0c67d437076bd79091327dff4dee">49f7eb9bea6cd6a47e660ee8aad95e5f339e339538ece7d1e61ba075caa7780d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>晚熟的人</title>
    <link href="http://yoursite.com/2021/01/10/%E6%99%9A%E7%86%9F%E7%9A%84%E4%BA%BA/"/>
    <id>http://yoursite.com/2021/01/10/晚熟的人/</id>
    <published>2021-01-10T05:58:40.000Z</published>
    <updated>2021-05-25T03:58:10.703Z</updated>
    
    <content type="html"><![CDATA[<p>就一直晚熟下去… 没有什么不好</p><a id="more"></a><p>于创作来说，不能过早地固步自封，不能过早的使自己的风格固化，<br>就是要不断地求新求变，努力试图突破自己，要不断的成长。<br>工作中，不必急功急利，保持学习热情，所有好运都会如期而至。<br>你成熟的越晚，说明创作创新的过程延续的越长。</p><p>于人性来说，本性善良的人都晚熟，并且是被”劣人”催熟的，后来虽然开窍了，<br>但也仍然善良与赤诚，不断地寻找同类，最后却成了最孤独的一个。<br>开窍了，就不能啥事都往外喷了，积蓄能量，厚积薄发。<br>你成熟的越晚，善良延续的越长，孤独而自省。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就一直晚熟下去… 没有什么不好&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink源码剖析-flink-table-runtime-blink_TopN</title>
    <link href="http://yoursite.com/2020/09/30/Flink%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-flink-table-runtime-blink-TopN/"/>
    <id>http://yoursite.com/2020/09/30/Flink源码剖析-flink-table-runtime-blink-TopN/</id>
    <published>2020-09-30T08:35:54.000Z</published>
    <updated>2020-10-10T05:58:06.371Z</updated>
    
    <content type="html"><![CDATA[<p>本文将基于 flink <code>release-1.11</code> 源码，简单分析下 TopN function 的实现。</p><a id="more"></a><p><img src="TopNFunction%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt></p><h2 id="AbstractTopNFunction"><a href="#AbstractTopNFunction" class="headerlink" title="AbstractTopNFunction"></a>AbstractTopNFunction</h2><p>AbstractTopNFunction 中有如下属性，定义 sortKey selector 和 comparator，rankEnd 相关参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// we set default topN size to 100</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_TOPN_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The util to compare two sortKey equals to each other.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 sortKey 比较器实例类的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> GeneratedRecordComparator generatedSortKeyComparator;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sortKey 比较器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Comparator&lt;RowData&gt; sortKeyComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> generateUpdateBefore;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否输出排序序号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> outputRankNumber;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入的数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> RowDataTypeInfo inputRowType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key selector，选择 RowData 中的哪一个字段来排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> KeySelector&lt;RowData, RowData&gt; sortKeySelector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key 上下文，获取当前处理数据的 key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> KeyContext keyContext;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是固定的 TopN 集合大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isConstantRankEnd;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rankStart 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> rankStart;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rankEnd 在 RowData 中的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rankEndIndex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rankEnd 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span> rankEnd;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java.util.Function，从 RowData 的某一个位置获取 rankEnd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Function&lt;RowData, Long&gt; rankEndFetcher;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记录 rankEnd，可能随着输入数据动态变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ValueState&lt;Long&gt; rankEndState;</span><br><span class="line"><span class="keyword">private</span> Counter invalidCounter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当 TopN 需要输出排位序号时，会用到这个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JoinedRowData outputRow;</span><br><span class="line"></span><br><span class="line"><span class="comment">// metrics</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span> hitCount = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span> requestCount = <span class="number">0L</span>;</span><br></pre></td></tr></table></figure><p>AbstractTopNFunction 的 <code>open()</code> 方法主要从状态后端获取 rankEndState，并初始化类属性： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open(parameters);</span><br><span class="line">initCleanupTimeState(<span class="string">"RankFunctionCleanupTime"</span>);</span><br><span class="line">outputRow = <span class="keyword">new</span> JoinedRowData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isConstantRankEnd) &#123;</span><br><span class="line"><span class="comment">// 从状态后端读取当前 rankEnd 值</span></span><br><span class="line">ValueStateDescriptor&lt;Long&gt; rankStateDesc = <span class="keyword">new</span> ValueStateDescriptor&lt;&gt;(<span class="string">"rankEnd"</span>, Types.LONG);</span><br><span class="line">rankEndState = getRuntimeContext().getState(rankStateDesc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compile comparator</span></span><br><span class="line"><span class="comment">// classLoader 加载 key comparator 类</span></span><br><span class="line">sortKeyComparator = generatedSortKeyComparator.newInstance(getRuntimeContext().getUserCodeClassLoader());</span><br><span class="line"><span class="comment">// 把确定不需要的对象直接赋值为 null</span></span><br><span class="line">generatedSortKeyComparator = <span class="keyword">null</span>;</span><br><span class="line">invalidCounter = getRuntimeContext().getMetricGroup().counter(<span class="string">"topn.invalidTopSize"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize rankEndFetcher</span></span><br><span class="line"><span class="keyword">if</span> (!isConstantRankEnd) &#123;</span><br><span class="line">LogicalType rankEndIdxType = inputRowType.getLogicalTypes()[rankEndIndex];</span><br><span class="line"><span class="keyword">switch</span> (rankEndIdxType.getTypeRoot()) &#123;</span><br><span class="line"><span class="keyword">case</span> BIGINT:</span><br><span class="line">rankEndFetcher = (RowData row) -&gt; row.getLong(rankEndIndex);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line">rankEndFetcher = (RowData row) -&gt; (<span class="keyword">long</span>) row.getInt(rankEndIndex);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SMALLINT:</span><br><span class="line">rankEndFetcher = (RowData row) -&gt; (<span class="keyword">long</span>) row.getShort(rankEndIndex);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">LOG.error(<span class="string">"variable rank index column must be long, short or int type, while input type is &#123;&#125;"</span>,</span><br><span class="line">rankEndIdxType.getClass().getName());</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line"><span class="string">"variable rank index column must be long type, while input type is "</span> +</span><br><span class="line">rankEndIdxType.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractTopNFunction 的 <code>initRankEnd()</code> 方法根据 input row 来动态获取 rankEnd ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize rank end.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> row input record</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> rank end</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">initRankEnd</span><span class="params">(RowData row)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isConstantRankEnd) &#123;</span><br><span class="line"><span class="keyword">return</span> rankEnd;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Long rankEndValue = rankEndState.value();</span><br><span class="line"><span class="keyword">long</span> curRankEnd = rankEndFetcher.apply(row);</span><br><span class="line"><span class="keyword">if</span> (rankEndValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">rankEnd = curRankEnd;</span><br><span class="line"><span class="comment">// 同步更新到状态后端</span></span><br><span class="line">rankEndState.update(rankEnd);</span><br><span class="line"><span class="keyword">return</span> rankEnd;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rankEnd = rankEndValue;</span><br><span class="line"><span class="keyword">if</span> (rankEnd != curRankEnd) &#123;</span><br><span class="line"><span class="comment">// increment the invalid counter when the current rank end not equal to previous rank end</span></span><br><span class="line">invalidCounter.inc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rankEnd;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractTopNFunction 的 <code>checkSortKeyInBufferRange()</code> 方法来判断 input row 是否应该被放到其 key 对应的 TopBuffer 中：</p><ol><li>将 input row 与 TopBuffer 中的最后一个 entry 比较，comparator 返回 true 则将 input row 丢到 TopBuffer 中；</li><li>comparator 返回 false，当前 TopBuffer 中的 entry 个数还没有达到默认的 TopN size，也将 input row 丢到 TopBuffer 中。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks whether the record should be put into the buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sortKey sortKey to test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> buffer  buffer to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the record should be put into the buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkSortKeyInBufferRange</span><span class="params">(RowData sortKey, TopNBuffer buffer)</span> </span>&#123;</span><br><span class="line">Comparator&lt;RowData&gt; comparator = buffer.getSortKeyComparator();</span><br><span class="line">Map.Entry&lt;RowData, Collection&lt;RowData&gt;&gt; worstEntry = buffer.lastEntry();</span><br><span class="line"><span class="keyword">if</span> (worstEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// return true if the buffer is empty. TopNBuffer 是空的，直接返回 true</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">RowData worstKey = worstEntry.getKey();</span><br><span class="line"><span class="comment">//执行 TopN 比较器</span></span><br><span class="line"><span class="keyword">int</span> compare = comparator.compare(sortKey, worstKey);</span><br><span class="line"><span class="keyword">if</span> (compare &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 如果满足条件，可以放到 TopNBuffer 中</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 到达的数据条数还没有达到默认的 TopN 大小 100，也可以放到 TopNBuffer 中</span></span><br><span class="line"><span class="keyword">return</span> buffer.getCurrentTopNum() &lt; getDefaultTopNSize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>AbstractTopNFunction 的 <code>createOutputRow()</code> 方法用于构建 output row，区分带不带 rank 序号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建 output row</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputRow input row</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rank     排位序号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rowKind  描述一行 changelog 的行为种类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> RowData&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RowData <span class="title">createOutputRow</span><span class="params">(RowData inputRow, <span class="keyword">long</span> rank, RowKind rowKind)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (outputRankNumber) &#123;</span><br><span class="line"><span class="comment">// 需要输出 rank number</span></span><br><span class="line">GenericRowData rankRow = <span class="keyword">new</span> GenericRowData(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 第 0 个字段设置为排位序号，将 rank 专门放置在一个 RowData 中</span></span><br><span class="line">rankRow.setField(<span class="number">0</span>, rank);</span><br><span class="line"></span><br><span class="line">outputRow.replace(inputRow, rankRow);</span><br><span class="line">outputRow.setRowKind(rowKind);</span><br><span class="line"><span class="keyword">return</span> outputRow;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">inputRow.setRowKind(rowKind);</span><br><span class="line"><span class="keyword">return</span> inputRow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppendOnlyTopNFunction"><a href="#AppendOnlyTopNFunction" class="headerlink" title="AppendOnlyTopNFunction"></a>AppendOnlyTopNFunction</h2><p>AppendOnlyTopNFunction 中有如下属性，状态后端 MapState 和本地堆内存 TopNBuffer 结合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sortKey 字段类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RowDataTypeInfo sortKeyType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input row 的序列化类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TypeSerializer&lt;RowData&gt; inputRowSer;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> cacheSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a map state stores mapping from sort key to records list which is in topN</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sortKey &lt;-&gt; 在 TopN 中的 RowData list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> MapState&lt;RowData, List&lt;RowData&gt;&gt; dataState;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the buffer stores mapping from sort key to records list, a heap mirror to dataState</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前 sortKey 对应的 TopNBuffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> TopNBuffer buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the kvSortedMap stores mapping from partition key to it's buffer</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sortKey &lt;-&gt; TopNBuffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Map&lt;RowData, TopNBuffer&gt; kvSortedMap;</span><br></pre></td></tr></table></figure><p>AppendOnlyTopNFunction 的 <code>open()</code> 方法中从状态后端中获取当前 key 的 TopN list：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open(parameters);</span><br><span class="line"><span class="comment">// LRU的缓存大小=总的缓存大小/topN的缓存大小</span></span><br><span class="line"><span class="keyword">int</span> lruCacheSize = Math.max(<span class="number">1</span>, (<span class="keyword">int</span>) (cacheSize / getDefaultTopNSize()));</span><br><span class="line"><span class="comment">// 根据 key 缓存 LRU list</span></span><br><span class="line">kvSortedMap = <span class="keyword">new</span> LRUMap&lt;&gt;(lruCacheSize);</span><br><span class="line">LOG.info(<span class="string">"Top&#123;&#125; operator is using LRU caches key-size: &#123;&#125;"</span>, getDefaultTopNSize(), lruCacheSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 key 记录当前的 TopN list</span></span><br><span class="line"><span class="comment">// RowDataTypeInfo</span></span><br><span class="line">ListTypeInfo&lt;RowData&gt; valueTypeInfo = <span class="keyword">new</span> ListTypeInfo&lt;&gt;(inputRowType);</span><br><span class="line">MapStateDescriptor&lt;RowData, List&lt;RowData&gt;&gt; mapStateDescriptor = <span class="keyword">new</span> MapStateDescriptor&lt;&gt;(</span><br><span class="line"><span class="string">"data-state-with-append"</span>, sortKeyType, valueTypeInfo);</span><br><span class="line">dataState = getRuntimeContext().getMapState(mapStateDescriptor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// metrics</span></span><br><span class="line">registerMetric(kvSortedMap.size() * getDefaultTopNSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppendOnlyTopNFunction 的 <code>processElement()</code> 方法处理数据，判断当前 input row 是否可以丢到 TopNBuffer 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(RowData input, Context context, Collector&lt;RowData&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取当前时间，记录在上下文的计时器中</span></span><br><span class="line"><span class="keyword">long</span> currentTime = context.timerService().currentProcessingTime();</span><br><span class="line"><span class="comment">// register state-cleanup timer</span></span><br><span class="line">registerProcessingCleanupTimer(context, currentTime);</span><br><span class="line"></span><br><span class="line">initHeapStates();</span><br><span class="line">initRankEnd(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从输入的数据中抽取 sortKey</span></span><br><span class="line">RowData sortKey = sortKeySelector.getKey(input);</span><br><span class="line"><span class="comment">// check whether the sortKey is in the topN range</span></span><br><span class="line"><span class="comment">// 根据 sortKey 判断当前数据是否应该被放到 TopNBuffer 中</span></span><br><span class="line"><span class="keyword">if</span> (checkSortKeyInBufferRange(sortKey, buffer)) &#123;</span><br><span class="line"><span class="comment">// insert sort key into buffer</span></span><br><span class="line">buffer.put(sortKey, inputRowSer.copy(input));</span><br><span class="line">Collection&lt;RowData&gt; inputs = buffer.get(sortKey);</span><br><span class="line"><span class="comment">// update data state</span></span><br><span class="line"><span class="comment">// copy a new collection to avoid mutating state values, see CopyOnWriteStateMap,</span></span><br><span class="line"><span class="comment">// otherwise, the result might be corrupt.</span></span><br><span class="line"><span class="comment">// don't need to perform a deep copy, because RowData elements will not be updated</span></span><br><span class="line"><span class="comment">// 同步记录到 MapState 中</span></span><br><span class="line">dataState.put(sortKey, <span class="keyword">new</span> ArrayList&lt;&gt;(inputs));</span><br><span class="line"><span class="keyword">if</span> (outputRankNumber || hasOffset()) &#123;</span><br><span class="line"><span class="comment">// the without-number-algorithm can't handle topN with offset,</span></span><br><span class="line"><span class="comment">// so use the with-number-algorithm to handle offset</span></span><br><span class="line">processElementWithRowNumber(sortKey, input, out);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">processElementWithoutRowNumber(input, out);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppendOnlyTopNFunction 的 <code>initHeapStates()</code> 是在处理 input row 之前，在堆内存中初始化 TopNBuffer，并将状态后端存储的 TopN list 设置到 TopNBuffer 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHeapStates</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">requestCount += <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 从 KeyContext 中获取当前的key</span></span><br><span class="line">RowData currentKey = (RowData) keyContext.getCurrentKey();</span><br><span class="line"><span class="comment">// 取出 key 对应的 TopNBuffer</span></span><br><span class="line">buffer = kvSortedMap.get(currentKey);</span><br><span class="line"><span class="keyword">if</span> (buffer == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// buffer 为 null，则为此 key 构建 TopNBuffer，为其设置 key comparator</span></span><br><span class="line">buffer = <span class="keyword">new</span> TopNBuffer(sortKeyComparator, ArrayList::<span class="keyword">new</span>);</span><br><span class="line">kvSortedMap.put(currentKey, buffer);</span><br><span class="line"><span class="comment">// restore buffer</span></span><br><span class="line"><span class="comment">// 读取 state 中记录的 TopN list，塞到这个 TopNBuffer 里</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;RowData, List&lt;RowData&gt;&gt;&gt; iter = dataState.iterator();</span><br><span class="line"><span class="keyword">if</span> (iter != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">Map.Entry&lt;RowData, List&lt;RowData&gt;&gt; entry = iter.next();</span><br><span class="line">RowData sortKey = entry.getKey();</span><br><span class="line">List&lt;RowData&gt; values = entry.getValue();</span><br><span class="line"><span class="comment">// the order is preserved</span></span><br><span class="line">buffer.putAll(sortKey, values);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// buffer 不为 null，记录命中一次 TopNBuffer 缓存</span></span><br><span class="line">hitCount += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppendOnlyTopNFunction 的 <code>processElementWithoutRowNumber()</code> 方法是处理丢到 TopNBuffer 中的 input row，决定这条数据是否被 Delete ： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processElementWithoutRowNumber</span><span class="params">(RowData input, Collector&lt;RowData&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// remove retired element</span></span><br><span class="line"><span class="comment">// 当前 TopNBuffer 中缓存的数据条数大于 TopN 的 N</span></span><br><span class="line"><span class="keyword">if</span> (buffer.getCurrentTopNum() &gt; rankEnd) &#123;</span><br><span class="line">Map.Entry&lt;RowData, Collection&lt;RowData&gt;&gt; lastEntry = buffer.lastEntry();</span><br><span class="line">RowData lastKey = lastEntry.getKey();</span><br><span class="line">Collection&lt;RowData&gt; lastList = lastEntry.getValue();</span><br><span class="line">RowData lastElement = buffer.lastElement();</span><br><span class="line"><span class="keyword">int</span> size = lastList.size();</span><br><span class="line"><span class="comment">// remove last one</span></span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 移除最后一个元素</span></span><br><span class="line">buffer.removeAll(lastKey);</span><br><span class="line">dataState.remove(lastKey);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 移除大于 TopN 的 N 之后的元素</span></span><br><span class="line">buffer.removeLast();</span><br><span class="line"><span class="comment">// last element has been removed from lastList, we have to copy a new collection</span></span><br><span class="line"><span class="comment">// for lastList to avoid mutating state values, see CopyOnWriteStateMap,</span></span><br><span class="line"><span class="comment">// otherwise, the result might be corrupt.</span></span><br><span class="line"><span class="comment">// don't need to perform a deep copy, because RowData elements will not be updated</span></span><br><span class="line"><span class="comment">// 更新状态后端</span></span><br><span class="line">dataState.put(lastKey, <span class="keyword">new</span> ArrayList&lt;&gt;(lastList));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">0</span> || input.equals(lastElement)) &#123;</span><br><span class="line"><span class="comment">// input 的数据和 TopNBuffer 中的最后一个元素相同，则直接返回</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// lastElement shouldn't be null</span></span><br><span class="line">collectDelete(out, lastElement);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// it first appears in the TopN, send INSERT message</span></span><br><span class="line">collectInsert(out, input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AppendOnlyTopNFunctionTest"><a href="#AppendOnlyTopNFunctionTest" class="headerlink" title="AppendOnlyTopNFunctionTest"></a>AppendOnlyTopNFunctionTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> AppendOnlyTopNFunction&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppendOnlyTopNFunctionTest</span> <span class="keyword">extends</span> <span class="title">TopNFunctionTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AbstractTopNFunction <span class="title">createFunction</span><span class="params">(RankType rankType, RankRange rankRange,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">boolean</span> generateUpdateBefore, <span class="keyword">boolean</span> outputRankNumber)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AppendOnlyTopNFunction(minTime.toMilliseconds(),</span><br><span class="line">maxTime.toMilliseconds(),</span><br><span class="line">inputRowType,</span><br><span class="line">sortKeyComparator,</span><br><span class="line">sortKeySelector,</span><br><span class="line">rankType,</span><br><span class="line">rankRange,</span><br><span class="line">generateUpdateBefore,</span><br><span class="line">outputRankNumber,</span><br><span class="line">cacheSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVariableRankRange</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">AbstractTopNFunction func = createFunction(RankType.ROW_NUMBER,</span><br><span class="line"><span class="comment">// 指定数据的第2个字段值为 rankEnd，动态指定 TopN 集合的大小</span></span><br><span class="line"><span class="keyword">new</span> VariableRankRange(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="comment">// 不用输出 topN 的排序序号</span></span><br><span class="line"><span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 将 TopNFunction 包装进 KeyedProcessOperator</span></span><br><span class="line">OneInputStreamOperatorTestHarness&lt;RowData, RowData&gt; testHarness = createTestHarness(func);</span><br><span class="line"><span class="comment">// 测试类准备工作</span></span><br><span class="line">testHarness.open();</span><br><span class="line"></span><br><span class="line"><span class="comment">// KeyedProcessOperator 作为 input operator 模拟处理数据</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">12</span>)); <span class="comment">// 开始处理(book,2,12)，key 为 book，rankEnd 为 2，加入 TopN 集合</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>)); <span class="comment">// 开始处理(book,2,19)，key 为 book，rankEnd 为 2，加入 TopN 集合</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">11</span>)); <span class="comment">// 开始处理(book,2,11)，key 为 book，rankEnd 为 2，超出 TopN 集合容量，因此需要先删除 (book,2,19)，留下 2 个较小的</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>)); <span class="comment">// 开始处理(fruit,1,33)，key 为 fruit，rankEnd 为 1，加入 TopN 集合</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">44</span>)); <span class="comment">// 开始处理(fruit,1,44)，key 为 fruit，rankEnd 为 1，44 &gt; 33，直接过滤掉</span></span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">22</span>)); <span class="comment">// 开始处理(fruit,1,22)，key 为 fruit，rankEnd 为 1，超出 TopN 集合容量，因此需要先删除 (fruit,1,33)，留下 1 个较小的</span></span><br><span class="line">testHarness.close();</span><br><span class="line"></span><br><span class="line">ConcurrentLinkedQueue&lt;Object&gt; output = testHarness.getOutput();</span><br><span class="line"><span class="keyword">for</span> (Object o : output) &#123;</span><br><span class="line">StreamRecord streamRecord = (StreamRecord) o;</span><br><span class="line">System.out.println(<span class="string">"Output element -&gt; "</span> + streamRecord.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; expectedOutput = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ("book", 2L, 12)</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">12</span>));</span><br><span class="line"><span class="comment">// ("book", 2L, 19)</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line"><span class="comment">// ("book", 2L, 11)</span></span><br><span class="line">expectedOutput.add(deleteRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">11</span>));</span><br><span class="line"><span class="comment">// ("fruit", 1L, 33)</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>));</span><br><span class="line"><span class="comment">// ("fruit", 1L, 44)</span></span><br><span class="line"><span class="comment">// ("fruit", 1L, 22)</span></span><br><span class="line">expectedOutput.add(deleteRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>));</span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">22</span>));</span><br><span class="line">assertorWithoutRowNumber</span><br><span class="line">.assertOutputEquals(<span class="string">"output wrong."</span>, expectedOutput, testHarness.getOutput());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNFunctionTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key 比较器的类加载工具类，生成一个 key 比较器实例</span></span><br><span class="line">    <span class="keyword">static</span> GeneratedRecordComparator sortKeyComparator = <span class="keyword">new</span> GeneratedRecordComparator(<span class="string">""</span>, <span class="string">""</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1434685115916728955L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RecordComparator <span class="title">newInstance</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// compare(RowData o1, RowData o2) 方法中比较 o1 和 o2 的第 0 个元素，从小到大比较</span></span><br><span class="line"><span class="keyword">return</span> IntRecordComparator.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNFunctionTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sortKeyIdx = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key 选择器，比较 RowData 中的第 2 位置的元素</span></span><br><span class="line">BinaryRowDataKeySelector sortKeySelector = <span class="keyword">new</span> BinaryRowDataKeySelector(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;sortKeyIdx&#125;,</span><br><span class="line">inputRowType.getLogicalTypes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Output element -&gt; +I(book,2,12)   </span><br><span class="line">Output element -&gt; +I(book,2,19)   </span><br><span class="line">Output element -&gt; -D(book,2,19)    </span><br><span class="line">Output element -&gt; +I(book,2,11)   </span><br><span class="line">Output element -&gt; +I(fruit,1,33)  </span><br><span class="line">Output element -&gt; -D(fruit,1,33)  </span><br><span class="line">Output element -&gt; +I(fruit,1,22)</span><br></pre></td></tr></table></figure><h2 id="RetractableTopNFunction"><a href="#RetractableTopNFunction" class="headerlink" title="RetractableTopNFunction"></a>RetractableTopNFunction</h2><p>内部使用 TreeMap 进行 TopN 排序，可以对数据执行撤回操作，RowKind.UPDATE_BEFORE（-U）。</p><p>RetractableTopNFunction 中有如下属性，记录相同的 RowData 列表，使用 sortedMap 来进行 TopN 排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a map state stores mapping from sort key to records list</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RowData &lt;-&gt;  相同的 RowData list，状态后端远程维护</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> MapState&lt;RowData, List&lt;RowData&gt;&gt; dataState;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a sorted map stores mapping from sort key to records count</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RowData &lt;-&gt; 对应的记录个数，ValueState 中记录有序的 RowData</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> ValueState&lt;SortedMap&lt;RowData, Long&gt;&gt; treeMap;</span><br></pre></td></tr></table></figure><p>RetractableTopNFunction 中的 <code>processElement()</code> 方法，按照数据的 RowKind 分别执行 emit 和 retract 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(RowData input, Context ctx, Collector&lt;RowData&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">long</span> currentTime = ctx.timerService().currentProcessingTime();</span><br><span class="line"><span class="comment">// register state-cleanup timer</span></span><br><span class="line">registerProcessingCleanupTimer(ctx, currentTime);</span><br><span class="line">initRankEnd(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从状态后端中获取有序 RowData 的集合</span></span><br><span class="line">SortedMap&lt;RowData, Long&gt; sortedMap = treeMap.value();</span><br><span class="line"><span class="keyword">if</span> (sortedMap == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果为 null，则新建一个，指定 sortKey comparator</span></span><br><span class="line">sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;(sortKeyComparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RowData sortKey = sortKeySelector.getKey(input);</span><br><span class="line"><span class="comment">// RowKind.INSERT 或 RowKind.UPDATE_AFTER</span></span><br><span class="line"><span class="keyword">boolean</span> isAccumulate = RowDataUtil.isAccumulateMsg(input);</span><br><span class="line"><span class="comment">// erase row kind for further state accessing</span></span><br><span class="line">input.setRowKind(RowKind.INSERT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAccumulate) &#123;</span><br><span class="line"><span class="comment">// update sortedMap，记录当前 sortKey 的记录数到状态后端</span></span><br><span class="line"><span class="keyword">if</span> (sortedMap.containsKey(sortKey)) &#123;</span><br><span class="line">sortedMap.put(sortKey, sortedMap.get(sortKey) + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sortedMap.put(sortKey, <span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// emit</span></span><br><span class="line"><span class="keyword">if</span> (outputRankNumber || hasOffset()) &#123;</span><br><span class="line"><span class="comment">// the without-number-algorithm can't handle topN with offset,</span></span><br><span class="line"><span class="comment">// so use the with-number-algorithm to handle offset</span></span><br><span class="line">emitRecordsWithRowNumber(sortedMap, sortKey, input, out);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emitRecordsWithoutRowNumber(sortedMap, sortKey, input, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步更新到状态后端</span></span><br><span class="line"><span class="comment">// update data state</span></span><br><span class="line">List&lt;RowData&gt; inputs = dataState.get(sortKey);</span><br><span class="line"><span class="keyword">if</span> (inputs == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// the sort key is never seen</span></span><br><span class="line">inputs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">inputs.add(input);</span><br><span class="line">dataState.put(sortKey, inputs);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// emit updates first，先输出 update 操作，-U 代表执行撤回操作</span></span><br><span class="line"><span class="keyword">if</span> (outputRankNumber || hasOffset()) &#123;</span><br><span class="line"><span class="comment">// the without-number-algorithm can't handle topN with offset,</span></span><br><span class="line"><span class="comment">// so use the with-number-algorithm to handle offset</span></span><br><span class="line">retractRecordWithRowNumber(sortedMap, sortKey, input, out);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">retractRecordWithoutRowNumber(sortedMap, sortKey, input, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and then update sortedMap</span></span><br><span class="line"><span class="keyword">if</span> (sortedMap.containsKey(sortKey)) &#123;</span><br><span class="line"><span class="keyword">long</span> count = sortedMap.get(sortKey) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">sortedMap.remove(sortKey);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sortedMap.put(sortKey, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (sortedMap.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (lenient) &#123;</span><br><span class="line">LOG.warn(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Can not retract a non-existent record. This should never happen."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新状态后端中记录的 sortedMap</span></span><br><span class="line">treeMap.update(sortedMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetractableTopNFunction 中的 <code>emitRecordsWithRowNumber()</code> 方法正常输出排序行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">emitRecordsWithRowNumber</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SortedMap&lt;RowData, Long&gt; sortedMap, RowData sortKey, RowData inputRow, Collector&lt;RowData&gt; out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Iterator&lt;Map.Entry&lt;RowData, Long&gt;&gt; iterator = sortedMap.entrySet().iterator();</span><br><span class="line"><span class="keyword">long</span> currentRank = <span class="number">0L</span>;</span><br><span class="line">RowData currentRow = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> findsSortKey = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext() &amp;&amp; isInRankEnd(currentRank)) &#123;</span><br><span class="line">Map.Entry&lt;RowData, Long&gt; entry = iterator.next();</span><br><span class="line">RowData key = entry.getKey();</span><br><span class="line"><span class="keyword">if</span> (!findsSortKey &amp;&amp; key.equals(sortKey)) &#123;</span><br><span class="line">currentRank += entry.getValue();</span><br><span class="line">currentRow = inputRow;</span><br><span class="line"><span class="comment">// 从 sortedMap 中找到当前的 sortKey</span></span><br><span class="line">findsSortKey = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (findsSortKey) &#123;</span><br><span class="line">List&lt;RowData&gt; inputs = dataState.get(key);</span><br><span class="line"><span class="keyword">if</span> (inputs == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Skip the data if it's state is cleared because of state ttl.</span></span><br><span class="line"><span class="keyword">if</span> (lenient) &#123;</span><br><span class="line">LOG.warn(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; inputs.size() &amp;&amp; isInRankEnd(currentRank)) &#123;</span><br><span class="line">RowData prevRow = inputs.get(i); <span class="comment">// 取出前一个row</span></span><br><span class="line">collectUpdateBefore(out, prevRow, currentRank);</span><br><span class="line">collectUpdateAfter(out, currentRow, currentRank); <span class="comment">//输出当前行</span></span><br><span class="line">currentRow = prevRow; <span class="comment">// 前一行赋给当前行</span></span><br><span class="line">currentRank += <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">currentRank += entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInRankEnd(currentRank)) &#123;</span><br><span class="line"><span class="comment">// there is no enough elements in Top-N, emit INSERT message for the new record.</span></span><br><span class="line">collectInsert(out, currentRow, currentRank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetractableTopNFunction 中的 <code>retractRecordWithRowNumber()</code> 方法将撤回行从 sortedMap 中移除，并更新前一行的排位输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">retractRecordWithRowNumber</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SortedMap&lt;RowData, Long&gt; sortedMap, RowData sortKey, RowData inputRow, Collector&lt;RowData&gt; out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Iterator&lt;Map.Entry&lt;RowData, Long&gt;&gt; iterator = sortedMap.entrySet().iterator();</span><br><span class="line"><span class="keyword">long</span> currentRank = <span class="number">0L</span>;</span><br><span class="line">RowData prevRow = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> findsSortKey = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext() &amp;&amp; isInRankEnd(currentRank)) &#123;</span><br><span class="line">Map.Entry&lt;RowData, Long&gt; entry = iterator.next();</span><br><span class="line">RowData key = entry.getKey();</span><br><span class="line"><span class="keyword">if</span> (!findsSortKey &amp;&amp; key.equals(sortKey)) &#123;</span><br><span class="line">List&lt;RowData&gt; inputs = dataState.get(key);</span><br><span class="line"><span class="keyword">if</span> (inputs == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Skip the data if it's state is cleared because of state ttl.</span></span><br><span class="line"><span class="keyword">if</span> (lenient) &#123;</span><br><span class="line">LOG.warn(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(STATE_CLEARED_WARN_MSG);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Iterator&lt;RowData&gt; inputIter = inputs.iterator();</span><br><span class="line"><span class="keyword">while</span> (inputIter.hasNext() &amp;&amp; isInRankEnd(currentRank)) &#123;</span><br><span class="line">RowData currentRow = inputIter.next();</span><br><span class="line"><span class="keyword">if</span> (!findsSortKey &amp;&amp; equaliser.equals(currentRow, inputRow)) &#123;</span><br><span class="line">prevRow = currentRow;</span><br><span class="line">findsSortKey = <span class="keyword">true</span>;</span><br><span class="line">inputIter.remove();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (findsSortKey) &#123;</span><br><span class="line">collectUpdateBefore(out, prevRow, currentRank);</span><br><span class="line">collectUpdateAfter(out, currentRow, currentRank);</span><br><span class="line">prevRow = currentRow;</span><br><span class="line">&#125;</span><br><span class="line">currentRank += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (inputs.isEmpty()) &#123;</span><br><span class="line">dataState.remove(key); <span class="comment">// 将撤回的行从 sortedMap 中移除</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dataState.put(key, inputs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (findsSortKey) &#123;</span><br><span class="line">List&lt;RowData&gt; inputs = dataState.get(key);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; inputs.size() &amp;&amp; isInRankEnd(currentRank)) &#123;</span><br><span class="line">RowData currentRow = inputs.get(i); <span class="comment">// 上一行作为当前行</span></span><br><span class="line"><span class="comment">// 处理上一条数据</span></span><br><span class="line">collectUpdateBefore(out, prevRow, currentRank);</span><br><span class="line"><span class="comment">// 输出当前行</span></span><br><span class="line">collectUpdateAfter(out, currentRow, currentRank);</span><br><span class="line">prevRow = currentRow;</span><br><span class="line">currentRank += <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">currentRank += entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInRankEnd(currentRank)) &#123;</span><br><span class="line"><span class="comment">// there is no enough elements in Top-N, emit DELETE message for the retract record.</span></span><br><span class="line">collectDelete(out, prevRow, currentRank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RetractableTopNFunctionTest"><a href="#RetractableTopNFunctionTest" class="headerlink" title="RetractableTopNFunctionTest"></a>RetractableTopNFunctionTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> RetractableTopNFunction&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetractableTopNFunctionTest</span> <span class="keyword">extends</span> <span class="title">TopNFunctionTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AbstractTopNFunction <span class="title">createFunction</span><span class="params">(RankType rankType, RankRange rankRange,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">boolean</span> generateUpdateBefore, <span class="keyword">boolean</span> outputRankNumber)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RetractableTopNFunction(</span><br><span class="line">minTime.toMilliseconds(),</span><br><span class="line">maxTime.toMilliseconds(),</span><br><span class="line">inputRowType,</span><br><span class="line">sortKeyComparator,</span><br><span class="line">sortKeySelector,</span><br><span class="line">rankType,</span><br><span class="line">rankRange,</span><br><span class="line">generatedEqualiser,</span><br><span class="line">generateUpdateBefore,</span><br><span class="line">outputRankNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessRetractMessageWithNotGenerateUpdateBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">AbstractTopNFunction func = createFunction(RankType.ROW_NUMBER,</span><br><span class="line"><span class="comment">// 固定的 TopN 集合大小，1～2</span></span><br><span class="line"><span class="keyword">new</span> ConstantRankRange(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"><span class="keyword">false</span>,</span><br><span class="line"><span class="comment">// 输出 TopN 的排序序号</span></span><br><span class="line"><span class="keyword">true</span>);</span><br><span class="line">OneInputStreamOperatorTestHarness&lt;RowData, RowData&gt; testHarness = createTestHarness(func);</span><br><span class="line">testHarness.open();</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">1L</span>, <span class="number">12</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">4L</span>, <span class="number">11</span>));</span><br><span class="line">testHarness.processElement(updateBeforeRecord(<span class="string">"book"</span>, <span class="number">1L</span>, <span class="number">12</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">5L</span>, <span class="number">11</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">4L</span>, <span class="number">33</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">3L</span>, <span class="number">44</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">5L</span>, <span class="number">22</span>));</span><br><span class="line">testHarness.close();</span><br><span class="line"></span><br><span class="line">ConcurrentLinkedQueue&lt;Object&gt; output = testHarness.getOutput();</span><br><span class="line"><span class="keyword">for</span> (Object o : output) &#123;</span><br><span class="line">StreamRecord streamRecord = (StreamRecord) o;</span><br><span class="line">System.out.println(<span class="string">"Output element -&gt; "</span> + streamRecord.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; expectedOutput = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// ("book", 1L, 12)</span></span><br><span class="line"><span class="comment">// sortedMap -&gt; [("book", 1L, 12)]</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">1L</span>, <span class="number">12</span>, <span class="number">1L</span>));</span><br><span class="line"><span class="comment">// ("book", 2L, 19)</span></span><br><span class="line"><span class="comment">// sortedMap -&gt; [("book", 1L, 12)],[("book", 2L, 19)]</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>, <span class="number">2L</span>));</span><br><span class="line"><span class="comment">// ("book", 4L, 11)</span></span><br><span class="line"><span class="comment">// sortedMap -&gt; [("book", 4L, 11)],[("book", 1L, 12)],[("book", 2L, 19)]</span></span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"book"</span>, <span class="number">4L</span>, <span class="number">11</span>, <span class="number">1L</span>));</span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"book"</span>, <span class="number">1L</span>, <span class="number">12</span>, <span class="number">2L</span>));</span><br><span class="line"><span class="comment">// UB ("book", 1L, 12)，撤回即将 ("book", 1L ,12) 从 sortedMap 中移除，("book", 2L, 19)的排序被更新为 2</span></span><br><span class="line"><span class="comment">// sortedMap -&gt; [("book", 4L, 11)],[("book", 2L, 19)]</span></span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>, <span class="number">2L</span>));</span><br><span class="line"><span class="comment">// ("book", 5L, 11)</span></span><br><span class="line"><span class="comment">// sortedMap -&gt; [("book", 4L, 11),("book", 5L, 11)],[("book", 2L, 19)]，("book", 5L, 11) 的排序被更新为 2</span></span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"book"</span>, <span class="number">5L</span>, <span class="number">11</span>, <span class="number">2L</span>));</span><br><span class="line"><span class="comment">// ("fruit", 4L, 33)</span></span><br><span class="line"><span class="comment">// ("fruit", 3L, 44)</span></span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"fruit"</span>, <span class="number">4L</span>, <span class="number">33</span>, <span class="number">1L</span>));</span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"fruit"</span>, <span class="number">3L</span>, <span class="number">44</span>, <span class="number">2L</span>));</span><br><span class="line"><span class="comment">// ("fruit", 5L, 22)</span></span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">5L</span>, <span class="number">22</span>, <span class="number">1L</span>));</span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">4L</span>, <span class="number">33</span>, <span class="number">2L</span>));</span><br><span class="line">assertorWithRowNumber.assertOutputEquals(<span class="string">"output wrong."</span>, expectedOutput, testHarness.getOutput());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Output element -&gt; +I&#123;row1=+I(book,1,12), row2=+I(1)&#125;</span><br><span class="line">Output element -&gt; +I&#123;row1=+I(book,2,19), row2=+I(2)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(book,4,11), row2=+I(1)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(book,1,12), row2=+I(2)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(book,2,19), row2=+I(2)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(book,5,11), row2=+I(2)&#125;</span><br><span class="line">Output element -&gt; +I&#123;row1=+I(fruit,4,33), row2=+I(1)&#125;</span><br><span class="line">Output element -&gt; +I&#123;row1=+I(fruit,3,44), row2=+I(2)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(fruit,5,22), row2=+I(1)&#125;</span><br><span class="line">Output element -&gt; +U&#123;row1=+I(fruit,4,33), row2=+I(2)&#125;</span><br></pre></td></tr></table></figure><h2 id="UpdatableTopNFunction"><a href="#UpdatableTopNFunction" class="headerlink" title="UpdatableTopNFunction"></a>UpdatableTopNFunction</h2><p>支持更新流，是 RetractableTopNFunction 的简单实现版本，输入流中不能包含 DELETE 和 UPDATE_BEFORE 操作。</p><h3 id="UpdatableTopNFunctionTest"><a href="#UpdatableTopNFunctionTest" class="headerlink" title="UpdatableTopNFunctionTest"></a>UpdatableTopNFunctionTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> UpdatableTopNFunction&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdatableTopNFunctionTest</span> <span class="keyword">extends</span> <span class="title">TopNFunctionTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AbstractTopNFunction <span class="title">createFunction</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">RankType rankType,</span></span></span><br><span class="line"><span class="function"><span class="params">RankRange rankRange,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> generateUpdateBefore,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> outputRankNumber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UpdatableTopNFunction(</span><br><span class="line">minTime.toMilliseconds(),</span><br><span class="line">maxTime.toMilliseconds(),</span><br><span class="line">inputRowType,</span><br><span class="line">rowKeySelector,</span><br><span class="line">sortKeyComparator,</span><br><span class="line">sortKeySelector,</span><br><span class="line">rankType,</span><br><span class="line">rankRange,</span><br><span class="line">generateUpdateBefore,</span><br><span class="line">outputRankNumber,</span><br><span class="line">cacheSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVariableRankRange</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">AbstractTopNFunction func = createFunction(RankType.ROW_NUMBER,</span><br><span class="line"><span class="comment">// TopN 的集合大小随着数据动态变化</span></span><br><span class="line"><span class="keyword">new</span> VariableRankRange(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="keyword">false</span>);</span><br><span class="line">OneInputStreamOperatorTestHarness&lt;RowData, RowData&gt; testHarness = createTestHarness(func);</span><br><span class="line">testHarness.open();</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line">testHarness.processElement(updateAfterRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">18</span>));</span><br><span class="line">testHarness.processElement(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">44</span>));</span><br><span class="line">testHarness.processElement(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>));</span><br><span class="line">testHarness.processElement(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">22</span>));</span><br><span class="line">testHarness.close();</span><br><span class="line"></span><br><span class="line">ConcurrentLinkedQueue&lt;Object&gt; output = testHarness.getOutput();</span><br><span class="line"><span class="keyword">for</span> (Object o : output) &#123;</span><br><span class="line">StreamRecord streamRecord = (StreamRecord) o;</span><br><span class="line">System.out.println(<span class="string">"Output element -&gt; "</span> + streamRecord.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; expectedOutput = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line">expectedOutput.add(updateBeforeRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">19</span>));</span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"book"</span>, <span class="number">2L</span>, <span class="number">18</span>));</span><br><span class="line">expectedOutput.add(insertRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">44</span>));</span><br><span class="line">expectedOutput.add(updateBeforeRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">44</span>));</span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>));</span><br><span class="line">expectedOutput.add(updateBeforeRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">33</span>));</span><br><span class="line">expectedOutput.add(updateAfterRecord(<span class="string">"fruit"</span>, <span class="number">1L</span>, <span class="number">22</span>));</span><br><span class="line">assertorWithoutRowNumber</span><br><span class="line">.assertOutputEquals(<span class="string">"output wrong."</span>, expectedOutput, testHarness.getOutput());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Output element -&gt; +I(book,2,19)</span><br><span class="line">Output element -&gt; -U(book,2,19)</span><br><span class="line">Output element -&gt; +U(book,2,18)</span><br><span class="line">Output element -&gt; +I(fruit,1,44)</span><br><span class="line">Output element -&gt; -U(fruit,1,44)</span><br><span class="line">Output element -&gt; +U(fruit,1,33)</span><br><span class="line">Output element -&gt; -U(fruit,1,33)</span><br><span class="line">Output element -&gt; +U(fruit,1,22)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将基于 flink &lt;code&gt;release-1.11&lt;/code&gt; 源码，简单分析下 TopN function 的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink部署-flink-on-kubernetes</title>
    <link href="http://yoursite.com/2020/09/29/Flink%E9%83%A8%E7%BD%B2-flink-on-kubernetes/"/>
    <id>http://yoursite.com/2020/09/29/Flink部署-flink-on-kubernetes/</id>
    <published>2020-09-29T07:23:17.000Z</published>
    <updated>2020-09-29T09:13:38.017Z</updated>
    
    <content type="html"><![CDATA[<p>kubernetes 是目前非常流行的容器编排系统，在其之上可以运行 web 服务、大数据处理等各类应用。这些应用被打包在非常轻量的容器中，我们通过声明的方式来告知 kubernetes 要如何部署和扩容这些程序，并对外提供服务。flink on kubernetes 可以得到一个健壮和高可扩的数据处理应用，并且能够更安全的和其他服务共享一个 kubernetes 集群。</p><p>本文将记录使用 kubernetes 部署 flink 应用的步骤。</p><a id="more"></a><h2 id="Mac-安装-Docker"><a href="#Mac-安装-Docker" class="headerlink" title="Mac 安装 Docker"></a>Mac 安装 Docker</h2><p>Docker Desktop 下载地址：<a href="https://www.docker.com/get-started" target="_blank" rel="noopener">Docker 官网</a><br>注册 DockerID 并登录。</p><p>安装 docker 命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install docker</span><br></pre></td></tr></table></figure><h2 id="Minikube-搭建-Kubernetes-实验环境"><a href="#Minikube-搭建-Kubernetes-实验环境" class="headerlink" title="Minikube 搭建 Kubernetes 实验环境"></a>Minikube 搭建 Kubernetes 实验环境</h2><p>可以参考：<a href="https://kubernetes.io/docs/setup/learning-environment/minikube/#quickstart" target="_blank" rel="noopener">Kubernetes 官网</a></p><h3 id="安装-Minikube"><a href="#安装-Minikube" class="headerlink" title="安装 Minikube"></a>安装 Minikube</h3><ol><li><p>校验 MacOS 是否支持虚拟化，运行如下命令出现 ‘VMX’：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sysctl -a | grep -E --color 'machdep.cpu.features|VMX'</span><br></pre></td></tr></table></figure></li><li><p>安装 kubectl 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"</span><br><span class="line"><span class="meta">$</span> chmod +x ./kubectl</span><br><span class="line"><span class="meta">$</span> sudo mv ./kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure><p> 或者直接使用 Homebrew 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install kubectl </span><br><span class="line"><span class="meta">$</span> brew install kubernetes-cli</span><br></pre></td></tr></table></figure><p> 查看是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl version --client</span><br><span class="line">Client Version: version.Info&#123;Major:"1", Minor:"19", GitVersion:"v1.19.2", GitCommit:"f5743093fd1c663cb0cbc89748f730662345d44d", GitTreeState:"clean", BuildDate:"2020-09-16T13:41:02Z", GoVersion:"go1.15", Compiler:"gc", Platform:"darwin/amd64"&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装 VirtualBox<br>VirtualBox 下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox 官网</a></p></li></ol><ol start="4"><li><p>安装 minikube</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 &amp;&amp; chmod +x minikube</span><br><span class="line"><span class="meta">$</span> sudo mv minikube /usr/local/bin</span><br></pre></td></tr></table></figure><p> 或者直接使用 Homebrew 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install minikube</span><br></pre></td></tr></table></figure></li><li><p>执行 minikube start<br>该命令会下载 kubelet 和 kubeadm 程序，并构建一个完整的 k8s 集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> minikube start</span><br></pre></td></tr></table></figure></li><li><p>查看 k8s pods<br>Minikube 已经将命令 kubectl 指向虚拟机中的 k8s 集群了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl get pods -A</span><br><span class="line">kube-system   coredns-f9fd979d6-xjht6                           1/1     Running   0          5h14m</span><br><span class="line">kube-system   etcd-minikube                                     1/1     Running   0          5h14m</span><br><span class="line">kube-system   kube-apiserver-minikube                           1/1     Running   0          5h14m</span><br><span class="line">kube-system   kube-controller-manager-minikube                  1/1     Running   0          5h14m</span><br><span class="line">kube-system   kube-proxy-ff8m8                                  1/1     Running   0          5h14m</span><br><span class="line">kube-system   kube-scheduler-minikube                           1/1     Running   0          5h14m</span><br><span class="line">kube-system   storage-provisioner                               1/1     Running   0          5h14m</span><br></pre></td></tr></table></figure></li></ol><h2 id="Flink-实时处理-demo"><a href="#Flink-实时处理-demo" class="headerlink" title="Flink 实时处理 demo"></a>Flink 实时处理 demo</h2><p>我们可以编写一个简单的实时处理脚本，该脚本会从某个端口中读取文本，分割为单词，并且每 5 秒钟打印一次每个单词出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = env</span><br><span class="line">    .socketTextStream(<span class="string">"192.168.99.1"</span>, <span class="number">9999</span>)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Splitter())</span><br><span class="line">    .keyBy(<span class="number">0</span>)</span><br><span class="line">    .timeWindow(Time.seconds(<span class="number">5</span>))</span><br><span class="line">    .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">dataStream.print();</span><br><span class="line"></span><br><span class="line">env.execute(<span class="string">"Window WordCount"</span>);</span><br></pre></td></tr></table></figure><p>K8s 容器中的程序可以通过 IP 192.168.99.1 来访问 Minikube 宿主机上的服务。</p><p>demo 下载：<a href="flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar">flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar</a></p><h2 id="构建-Docker-容器镜像"><a href="#构建-Docker-容器镜像" class="headerlink" title="构建 Docker 容器镜像"></a>构建 Docker 容器镜像</h2><p>flink 提供了一个官方的容器镜像，可以从 <a href="https://hub.docker.com/_/flink?tab=tags&page=1&name=1.8.1-scala_2.12" target="_blank" rel="noopener">DockerHub</a> 上下载镜像。<br>官方镜像的 <a href="https://github.com/docker-flink/docker-flink/blob/master/1.8/scala_2.12-debian/Dockerfile" target="_blank" rel="noopener">Dockerfile</a>，以 <code>1.8.1-scala_2.12</code> 为例，大致内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jre</span><br><span class="line">ENV FLINK_HOME=/opt/flink</span><br><span class="line">ENV PATH=$FLINK_HOME/bin:$PATH</span><br><span class="line">RUN groupadd --system --gid=9999 flink &amp;&amp; \</span><br><span class="line">    useradd --system --home-dir $FLINK_HOME --uid=9999 --gid=flink flink</span><br><span class="line">WORKDIR $FLINK_HOME</span><br><span class="line"></span><br><span class="line">RUN useradd flink &amp;&amp; \</span><br><span class="line">  wget -O flink.tgz &quot;$FLINK_TGZ_URL&quot; &amp;&amp; \</span><br><span class="line">  tar -xf flink.tgz</span><br><span class="line">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure><p>主要做了以下几件事情：</p><ul><li>将 OpenJDK 1.8 作为基础镜像</li><li>下载并安装 flink 至 /opt/flink 目录中</li><li>添加 flink 用户和组等</li></ul><p>下面我们以 flink:1.8.1-scala_2.12 作为基础镜像，编写新的 Dockerfile，将打包好的任务 jar 包放置进去。此外，新版 flink 已将 hadoop 依赖从官方发行版本中剥离，因此在打包镜像的时候也要包含进去。<br>Hadoop jar 下载：<a href="flink-shaded-hadoop-2-uber-2.8.3-7.0.jar">flink-shaded-hadoop-2-uber-2.8.3-7.0.jar</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM flink:1.8.1-scala_2.12</span><br><span class="line"></span><br><span class="line">ARG hadoop_jar</span><br><span class="line">ARG job_jar</span><br><span class="line"></span><br><span class="line">ENV FLINK_CONF=$FLINK_HOME/conf/flink-conf.yaml</span><br><span class="line"></span><br><span class="line">RUN set -x &amp;&amp; \</span><br><span class="line">  sed -i -e &quot;s/jobmanager\.heap\.size:.*/jobmanager.heap.size: 128m/g&quot; $FLINK_CONF &amp;&amp; \</span><br><span class="line">  sed -i -e &quot;s/taskmanager\.heap\.size:.*/taskmanager.heap.size: 256m/g&quot; $FLINK_CONF</span><br><span class="line"></span><br><span class="line">COPY --chown=flink:flink $hadoop_jar $job_jar $FLINK_HOME/lib/</span><br><span class="line"></span><br><span class="line">USER flink</span><br></pre></td></tr></table></figure><p>将 docker 命令行指向 Minikube 中的 Docker 服务，这样打印出来的镜像才能被 k8s 使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> eval $(minikube docker-env)</span><br></pre></td></tr></table></figure><p>移动到 Dockerfile 所在目录，开始构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker build \</span><br><span class="line">  --build-arg hadoop_jar=flink-shaded-hadoop-2-uber-2.8.3-7.0.jar \</span><br><span class="line">  --build-arg job_jar=flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar \</span><br><span class="line">  --tag flink-on-kubernetes:0.0.1 .</span><br></pre></td></tr></table></figure><p>镜像打包完毕，可用于部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker image ls</span><br><span class="line">REPOSITORY                           TAG                                              IMAGE ID            CREATED             SIZE</span><br><span class="line">flink-on-kubernetes                  0.0.1                                            ed4dfaf07cfe        5 hours ago         618MB</span><br></pre></td></tr></table></figure><h2 id="部署-JobManager"><a href="#部署-JobManager" class="headerlink" title="部署 JobManager"></a>部署 JobManager</h2><p><code>jobmanager.yml</code> ：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flink</span></span><br><span class="line"><span class="attr">        instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">jobmanager</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">flink-on-kubernetes:0.0.1</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["/opt/flink/bin/standalone-job.sh"]</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["start-foreground",</span></span><br><span class="line">               <span class="string">"-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager"</span><span class="string">,</span></span><br><span class="line">               <span class="string">"-Dparallelism.default=1"</span><span class="string">,</span></span><br><span class="line">               <span class="string">"-Dblob.server.port=6124"</span><span class="string">,</span></span><br><span class="line">               <span class="string">"-Dqueryable-state.server.ports=6125"</span><span class="string">,</span></span><br><span class="line">               <span class="string">"-Dstate.savepoints.dir=hdfs://192.168.99.1:9000/flink/savepoints/"</span><span class="string">,</span></span><br><span class="line">               <span class="string">]</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6123</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">rpc</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6124</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">blob</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6125</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">ui</span></span><br></pre></td></tr></table></figure><ul><li>${JOB} 变量可以使用 <code>envsubst</code> 命令来替换</li><li>容器的入口修改为 <code>standalone-job.sh</code></li><li>JobManager 的 rpc 地址修改为了 k8s Service 的名称，集群中的其他组件将通过这个名称来访问 JobManager。</li><li>为 Flink Blob Server &amp; Queryable State Server 指定默认端口号</li></ul><p>使用 <code>kubectl</code> 命令创建 JobManager pod，并查看状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> export JOB=flink-on-kubernetes</span><br><span class="line"><span class="meta">$</span> envsubst &lt;jobmanager.yml | kubectl create -f -</span><br><span class="line"><span class="meta">$</span> kubectl get pod</span><br><span class="line">NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager-dzhcs              1/1     Running   0          77m</span><br></pre></td></tr></table></figure><p>创建一个 k8s Service 把 JobManager 的端口开放出来，以便 TaskManager 前来注册。<br><code>service.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flink</span></span><br><span class="line"><span class="attr">    instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">rpc</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6123</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">blob</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6124</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6125</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">ui</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>使用 <code>kubectl</code> 命令创建 JobManager service，并查看状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> envsubst &lt;service.yml | kubectl create -f -</span><br><span class="line"><span class="meta">$</span>  kubectl get service</span><br><span class="line">NAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                                       AGE</span><br><span class="line">flink-on-kubernetes-jobmanager   NodePort    10.104.157.70   &lt;none&gt;        6123:30261/TCP,6124:31158/TCP,6125:30509/TCP,8081:30262/TCP   89m</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> minikube service $JOB-jobmanager --url</span><br><span class="line">http://192.168.99.100:30261</span><br><span class="line">http://192.168.99.100:31158</span><br><span class="line">http://192.168.99.100:30509</span><br><span class="line">http://192.168.99.100:30262</span><br></pre></td></tr></table></figure><p><img src="JobManager%E9%80%8F%E5%87%BA%E7%9A%84Dashboard.png" alt></p><h2 id="部署-TaskManager"><a href="#部署-TaskManager" class="headerlink" title="部署 TaskManager"></a>部署 TaskManager</h2><p><code>taskmanager.yml</code> ：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">flink</span></span><br><span class="line"><span class="attr">      instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flink</span></span><br><span class="line"><span class="attr">        instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">taskmanager</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">flink-on-kubernetes:0.0.1</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">["/opt/flink/bin/taskmanager.sh"]</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">["start-foreground",</span> <span class="string">"-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>使用 <code>kubectl</code> 命令创建 TaskManager pod，并查看状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl get pod</span><br><span class="line">NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager-dzhcs              1/1     Running   0          77m</span><br><span class="line">flink-on-kubernetes-taskmanager-64b7cc4bf-9t6cr   1/1     Running   2          77m</span><br></pre></td></tr></table></figure><p>至此，Flink 脚本集群已经在运行中了。在监听终端下输入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nc -lk 9999</span><br><span class="line">hello world</span><br><span class="line">hello flink</span><br></pre></td></tr></table></figure><p>打开另一个终端，查看 TaskManager 的标准输出日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl logs -f -l instance=$JOB-taskmanager</span><br><span class="line">(hello,2)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br></pre></td></tr></table></figure><p><img src="taskmanager%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kubernetes 是目前非常流行的容器编排系统，在其之上可以运行 web 服务、大数据处理等各类应用。这些应用被打包在非常轻量的容器中，我们通过声明的方式来告知 kubernetes 要如何部署和扩容这些程序，并对外提供服务。flink on kubernetes 可以得到一个健壮和高可扩的数据处理应用，并且能够更安全的和其他服务共享一个 kubernetes 集群。&lt;/p&gt;
&lt;p&gt;本文将记录使用 kubernetes 部署 flink 应用的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>数仓建模</title>
    <link href="http://yoursite.com/2020/08/30/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/"/>
    <id>http://yoursite.com/2020/08/30/数仓建模/</id>
    <published>2020-08-30T07:17:02.000Z</published>
    <updated>2021-05-25T03:59:36.287Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="19069d48fa4630dbf0c27ec582746095b5566ad0fa55a70059bf774e567702db">49f7eb9bea6cd6a47e660ee8aad95e5f73cac4e1b520f2f05987d67f416cec10d8c2add8935a4ae2fb7082d916f36e1d3b1ed1fb7bcc4a12e137188f59446abb2793b486bccbe4623c71e641069af1d03b6d7448688f68fd44135d03359ccd28f09c7d65ba42a4d058f4476b96d7f174862b5dc8cec10b8e87ab53a12373a774d75aa90e65ca65ea44be5aba777dcc773c576337a2e70b471a5f8b9c51dcd0d08399d3077fa4d7a6c5ecd1d38a2ca5c8a12bfc2a5d1063c3a7b08ed47526b9efc6a3416b2e9cc165277add16e50e26b375fd18b880deba7cf6cb87dc2e2da1a5026eec9857555689114cdc2f07682ddd7fe1b0e05d0fde7fbcdf74d980dd66ff1a09e0e0b0ea2b7efa55d7a3a0324450149c1d23b68dd405e59498865fc4419f16b0cdc2a9ab426677f774e850ceb8127a193dcac1eafcaf4991c8a4d3d729cace9b533923714f2f99ebc591ae2f7454b70067e0827301f293ecbf8daa9fc8cdc07ee0bd664df675b39eea60c2721bce411442e4f45525b364d261f1bb75e017d235a89c7a11d09bd618aeef49cca101573c0fd7b8f06880b330b0c3f98e62fc047990982c7cda3e652e92610cacaf18602219bbc15b0648fea56d47ac9c1e9c8bff0a8fee80b7de9b68f1757ba152e9fe0c58ff471974d313009242c7ad9011</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="思考总结" scheme="http://yoursite.com/categories/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>职业规划</title>
    <link href="http://yoursite.com/2020/07/01/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2020/07/01/职业规划/</id>
    <published>2020-07-01T07:03:13.000Z</published>
    <updated>2021-05-24T07:19:48.882Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="14d602c993698899ec8f7dce7c0fffcd6feb9d11df9c94077396b1501d8350c8">49f7eb9bea6cd6a47e660ee8aad95e5f92bbfa9fa31ac4f0dd4c2609ce47fa2b9ac4820bcb0d20b13024247a24dbff74b4e1bc10854b2dcdfee53f3b8d596d3be45db846157e2926e065c5170bafd8420bc9ee8ff2f044cc90d0a6a1c0defe47b2b66a6bfc00481f4a3d425366e4bd87fa08ac706fe7fe9320915f17a6e3ffccbca5a6991393cab717accd0f50d508e807f16110e1174c5c1eebee69211eccfc894957f4b8e1468aa049332478c8428315199c1eafa504e8616898ec7da1d127bda0562374b4bcc3a177c8f003557970f910452c0354f329604fa7720d01dce2af1ee024c6d94ad65e01d721f8530196507bd83dd462d60fd4d5b33a81295c6612f4a9db22b3619d23fd54d071e825578fcb7cf1d854a5ef60806bc98d877b366f197e90f4c2697b4424aa52204ebca7547cdd821c16422ab79f8ad90c1952431bdf0019bbd3d8c455689a4948b03ab6fd49ea22a3bcbd7a35c564761f08a10728b47e2771cbae6def78b22e39cb592a79ef81f252466140195514703e3c10db6e71922c4f82b7ffefb64babb29fc2ce4abbdf7f7ebba6da244b90b270065729733e48feb4e59c868471aa25fb5908ba837e866ac0f858c85fa2f122e448df2b9bb9aa2aa57b9c07e6fee94a6757d0fcc1977f43850538723e2291e707be145241a33050d7a5c74ed82514997413f164b099de48dd20a9fe12da6f57c7cbd1b16045ecb6f804c9f685534abce1f692e9f7b0e36f738f8799c5fb121055264ca2e67d82767cfc679423d64b6ac2af863a7353befb4cf10b23f808ddc359f80f0053124b8bd68371d1e030f5d840ca147834324c7b07c9ec9a5d5d4e4ca4128563da70f4e22bf6d85c169a9f79724a2eae77dd86745921becfe8fbc610069a5edf549128cd031a832c7c74dff1f06231574a29971f85a5444515803044858653e5cdbdcbc6eabeb7172822f33de99a2fe94e0576a42480e1bf97876d24a7dd7ab20446c80a92068054dc0caaa9bc0b152901a8415431b09841c9d2feebd76835536e3c2384cb5d856339d25aecc33626d6378ba5223b67eff48f3c450dd0534e6f2f602ab908d923ee9210adc4143abc4ceb7b679bd86cd8f9b181a96d590c07d7d629d79d36ceef3611f331815b2cf837a1da4fd42470850cbceb8b2c46acdc1a986ed920feff61c43f52263e674c1fd57444a58bc840985caead1068fcd1f077ad50c38fb4bb9dfb8590da0faa2f494e714d2b98865f792c1288b83e1f1058e89a7193712a849b151453d80196f68345a0e6bab402e6a8cecaa8925d7b9a04cda116cd4a11e54f9160ed2f1cd70c70b83b0723e16fbc0dd602fef1ff7e0df205d821da35c16d11de6b006d3c6ce45f45a1fd5fe0395edb6bf84184d5b9e34052aaead6e9d2821ce671a8ac55770b69239e85c9692183075184ee08c498c475cea0aa36c759fab82dd23de1084cb91ccbd6ca73900b0bd946fb22ac73d6eaaebca06914a9f47131feb9f94a2ea2bea330cd53758e23a8c3e6ee8ace1f5db45f8ba6f8f627691e95b1eb765cd52cc102aad3a590c3f6e7cf5b3cb09698a9f39fea21bb87826afc39a07742a311ae1cf839</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="http://yoursite.com/2020/05/24/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/24/Hexo常用命令/</id>
    <published>2020-05-24T02:38:00.000Z</published>
    <updated>2021-05-24T05:53:55.340Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Hexo + Github 搭建个人博客的常用命令，在此记录下。</p><a id="more"></a><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>新建一个网站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init "文件夹名称"</span><br></pre></td></tr></table></figure><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>显示 Hexo 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new "新文章名"</span><br></pre></td></tr></table></figure><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>生成静态网页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>启动服务器。默认情况下，访问网址为：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><p>部署网站。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>列出网站资料</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo 指令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Hexo + Github 搭建个人博客的常用命令，在此记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://yoursite.com/2020/05/24/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/24/Git常用命令/</id>
    <published>2020-05-24T02:37:42.000Z</published>
    <updated>2021-05-24T05:10:01.093Z</updated>
    
    <content type="html"><![CDATA[<p>Git 命令比较多，会经常 fork git 仓库，fork 仓库同步原远程仓库的操作，也会经常忘记，特此记录下。</p><a id="more"></a><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> 在当前目录新建一个Git代码库</span><br><span class="line"><span class="meta">$</span> git init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个目录，将其初始化为Git代码库</span><br><span class="line"><span class="meta">$</span> git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下载一个项目和它的整个代码历史</span><br><span class="line"><span class="meta">$</span> git clone [url]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 的设置文件为 .gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示当前的Git配置</span><br><span class="line"><span class="meta">$</span> git config --list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 编辑Git配置文件</span><br><span class="line"><span class="meta">$</span> git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置提交代码时的用户信息</span><br><span class="line"><span class="meta">$</span> git config [--global] user.name "[name]"</span><br><span class="line"><span class="meta">$</span> git config [--global] user.email "[email address]"</span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加指定文件到暂存区</span><br><span class="line"><span class="meta">$</span> git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加指定目录到暂存区，包括子目录</span><br><span class="line"><span class="meta">$</span> git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加当前目录的所有文件到暂存区</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加每个变化前，都会要求确认</span><br><span class="line"><span class="meta">#</span> 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line"><span class="meta">$</span> git add -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line"><span class="meta">$</span> git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line"><span class="meta">$</span> git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 改名文件，并且将这个改名放入暂存区</span><br><span class="line"><span class="meta">$</span> git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 提交暂存区到仓库区</span><br><span class="line"><span class="meta">$</span> git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交暂存区的指定文件到仓库区</span><br><span class="line"><span class="meta">$</span> git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line"><span class="meta">$</span> git commit -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交时显示所有diff信息</span><br><span class="line"><span class="meta">$</span> git commit -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用一次新的commit，替代上一次提交</span><br><span class="line"><span class="meta">#</span> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line"><span class="meta">$</span> git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重做上一次commit，并包括指定文件的新变化</span><br><span class="line"><span class="meta">$</span> git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出所有本地分支</span><br><span class="line"><span class="meta">$</span> git branch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出所有远程分支</span><br><span class="line"><span class="meta">$</span> git branch -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出所有本地分支和远程分支</span><br><span class="line"><span class="meta">$</span> git branch -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个分支，但依然停留在当前分支</span><br><span class="line"><span class="meta">$</span> git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个分支，并切换到该分支</span><br><span class="line"><span class="meta">$</span> git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个分支，指向指定commit</span><br><span class="line"><span class="meta">$</span> git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line"><span class="meta">$</span> git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 切换到指定分支，并更新工作区</span><br><span class="line"><span class="meta">$</span> git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 切换到上一个分支</span><br><span class="line"><span class="meta">$</span> git checkout -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line"><span class="meta">$</span> git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 合并指定分支到当前分支</span><br><span class="line"><span class="meta">$</span> git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 选择一个commit，合并进当前分支</span><br><span class="line"><span class="meta">$</span> git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除分支</span><br><span class="line"><span class="meta">$</span> git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除远程分支</span><br><span class="line"><span class="meta">$</span> git push origin --delete [branch-name]</span><br><span class="line"><span class="meta">$</span> git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 列出所有tag</span><br><span class="line"><span class="meta">$</span> git tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个tag在当前commit</span><br><span class="line"><span class="meta">$</span> git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个tag在指定commit</span><br><span class="line"><span class="meta">$</span> git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除本地tag</span><br><span class="line"><span class="meta">$</span> git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除远程tag</span><br><span class="line"><span class="meta">$</span> git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看tag信息</span><br><span class="line"><span class="meta">$</span> git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交指定tag</span><br><span class="line"><span class="meta">$</span> git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交所有tag</span><br><span class="line"><span class="meta">$</span> git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个分支，指向某个tag</span><br><span class="line"><span class="meta">$</span> git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示有变更的文件</span><br><span class="line"><span class="meta">$</span> git status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示当前分支的版本历史</span><br><span class="line"><span class="meta">$</span> git log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line"><span class="meta">$</span> git log --stat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 搜索提交历史，根据关键词</span><br><span class="line"><span class="meta">$</span> git log -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line"><span class="meta">$</span> git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span><br><span class="line"><span class="meta">$</span> git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某个文件的版本历史，包括文件改名</span><br><span class="line"><span class="meta">$</span> git log --follow [file]</span><br><span class="line"><span class="meta">$</span> git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示指定文件相关的每一次diff</span><br><span class="line"><span class="meta">$</span> git log -p [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示过去5次提交</span><br><span class="line"><span class="meta">$</span> git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示所有提交过的用户，按提交次数排序</span><br><span class="line"><span class="meta">$</span> git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示指定文件是什么人在什么时间修改过</span><br><span class="line"><span class="meta">$</span> git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示暂存区和工作区的差异</span><br><span class="line"><span class="meta">$</span> git diff</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示暂存区和上一个commit的差异</span><br><span class="line"><span class="meta">$</span> git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示工作区与当前分支最新commit之间的差异</span><br><span class="line"><span class="meta">$</span> git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示两次提交之间的差异</span><br><span class="line"><span class="meta">$</span> git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示今天你写了多少行代码</span><br><span class="line"><span class="meta">$</span> git diff --shortstat "@&#123;0 day ago&#125;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某次提交的元数据和内容变化</span><br><span class="line"><span class="meta">$</span> git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某次提交发生变化的文件</span><br><span class="line"><span class="meta">$</span> git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某次提交时，某个文件的内容</span><br><span class="line"><span class="meta">$</span> git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示当前分支的最近几次提交</span><br><span class="line"><span class="meta">$</span> git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载远程仓库的所有变动</span><br><span class="line"><span class="meta">$</span> git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示所有远程仓库</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某个远程仓库的信息</span><br><span class="line"><span class="meta">$</span> git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 增加一个新的远程仓库，并命名</span><br><span class="line"><span class="meta">$</span> git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 取回远程仓库的变化，并与本地分支合并</span><br><span class="line"><span class="meta">$</span> git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 上传本地指定分支到远程仓库</span><br><span class="line"><span class="meta">$</span> git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line"><span class="meta">$</span> git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 推送所有分支到远程仓库</span><br><span class="line"><span class="meta">$</span> git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 恢复暂存区的指定文件到工作区</span><br><span class="line"><span class="meta">$</span> git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line"><span class="meta">$</span> git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 恢复暂存区的所有文件到工作区</span><br><span class="line"><span class="meta">$</span> git checkout .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line"><span class="meta">$</span> git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line"><span class="meta">$</span> git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line"><span class="meta">$</span> git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line"><span class="meta">$</span> git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line"><span class="meta">$</span> git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 新建一个commit，用来撤销指定commit</span><br><span class="line"><span class="meta">#</span> 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line"><span class="meta">$</span> git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 暂时将未提交的变化移除，稍后再移入</span><br><span class="line"><span class="meta">$</span> git stash</span><br><span class="line"><span class="meta">$</span> git stash pop</span><br></pre></td></tr></table></figure><h2 id="fork仓库合并原仓库"><a href="#fork仓库合并原仓库" class="headerlink" title="fork仓库合并原仓库"></a>fork仓库合并原仓库</h2><h3 id="merge-前的设定"><a href="#merge-前的设定" class="headerlink" title="merge 前的设定"></a>merge 前的设定</h3><ul><li><p>进入本地仓库目录</p></li><li><p>查看远程仓库的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>将远程仓库设置成 fork 仓库的上游代码库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream 远程仓库.git</span><br></pre></td></tr></table></figure></li><li><p>检查本地提交<br>执行命令 git status 检查本地是否有未提交的修改。如果有，则把你本地的有效修改，先从本地仓库推送到你的github仓库。最后再执行一次 git status 检查本地已无未提交的修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add -A 或者 git add filename</span><br><span class="line">git commit -m "your note"</span><br><span class="line">git push origin master</span><br><span class="line">git status</span><br></pre></td></tr></table></figure></li></ul><h3 id="merge-的相关命令"><a href="#merge-的相关命令" class="headerlink" title="merge 的相关命令"></a>merge 的相关命令</h3><ul><li><p>抓取原仓库的更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream 远程仓库.git</span><br></pre></td></tr></table></figure></li><li><p>切换到 fork 仓库的 master 分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></li><li><p>合并远程的 master 分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure></li><li><p>推送 fork 仓库的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生成一个可供发布的压缩包</span><br><span class="line"><span class="meta">$</span> git archive</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a><br><a href="https://github.com/selfteaching/the-craft-of-selfteaching/issues/67" target="_blank" rel="noopener">Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 命令比较多，会经常 fork git 仓库，fork 仓库同步原远程仓库的操作，也会经常忘记，特此记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink源码剖析-flink-streaming-java_JobGraph</title>
    <link href="http://yoursite.com/2020/04/22/Flink%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-flink-streaming-java_JobGraph/"/>
    <id>http://yoursite.com/2020/04/22/Flink源码剖析-flink-streaming-java_JobGraph/</id>
    <published>2020-04-22T14:29:49.000Z</published>
    <updated>2020-04-22T16:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要围绕 Flink 源码中 <code>flink-streaming-java</code> 模块。介绍下 StreamGraph 转成 JobGraph 的过程等。</p><a id="more"></a><p>StreamGraph 和 JobGraph 都是在 Client 端生成的，也就是说我们可以在 IDE 中通过断点调试观察 StreamGraph 和 JobGraph 的生成过程。</p><h2 id="前置调用"><a href="#前置调用" class="headerlink" title="前置调用"></a>前置调用</h2><p>从 StreamExecutionEnvironment 中的 execute() 方法一直往下跟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Streaming 程序的提交入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobExecutionResult <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> execute(DEFAULT_JOB_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 StreamGraph</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobExecutionResult <span class="title">execute</span><span class="params">(String jobName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Preconditions.checkNotNull(jobName, <span class="string">"Streaming Job name should not be null."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> execute(getStreamGraph(jobName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 JobGraph ，提交任务，并响应 JobListeners</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobExecutionResult <span class="title">execute</span><span class="params">(StreamGraph streamGraph)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="keyword">final</span> JobClient jobClient = executeAsync(streamGraph);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> JobExecutionResult jobExecutionResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (configuration.getBoolean(DeploymentOptions.ATTACHED)) &#123;</span><br><span class="line">jobExecutionResult = jobClient.getJobExecutionResult(userClassloader).get();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">jobExecutionResult = <span class="keyword">new</span> DetachedJobExecutionResult(jobClient.getJobID());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jobListeners.forEach(jobListener -&gt; jobListener.onJobExecuted(jobExecutionResult, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jobExecutionResult;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">jobListeners.forEach(jobListener -&gt; &#123;</span><br><span class="line">jobListener.onJobExecuted(<span class="keyword">null</span>, ExceptionUtils.stripExecutionException(t));</span><br><span class="line">&#125;);</span><br><span class="line">ExceptionUtils.rethrowException(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// never reached, only make javac happy</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们详细看看 StreamExecutionEnvironment 中的 executeAsync 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 execution.target 配置反射得到 PipelineExecutorFactory，拿出工厂类对应的 PipelineExecutor，执行其 execute 方法</span></span><br><span class="line"><span class="comment"> * execute的主要工作是将 StreamGraph 转成了 JobGraph，并创建相应的 ClusterClient 完成提交任务的操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobClient <span class="title">executeAsync</span><span class="params">(StreamGraph streamGraph)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">checkNotNull(streamGraph, <span class="string">"StreamGraph cannot be null."</span>);</span><br><span class="line">checkNotNull(configuration.get(DeploymentOptions.TARGET), <span class="string">"No execution.target specified in your configuration file."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SPI机制</span></span><br><span class="line"><span class="comment">// 根据flink Configuration中的"execution.target"加载 PipelineExecutorFactory</span></span><br><span class="line"><span class="comment">// PipelineExecutorFactory 的实现类在flink-clients包或者flink-yarn包里，因此需要在pom.xml中添加此依赖</span></span><br><span class="line"><span class="keyword">final</span> PipelineExecutorFactory executorFactory =</span><br><span class="line">executorServiceLoader.getExecutorFactory(configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射出的 PipelineExecutorFactory 类不能为空</span></span><br><span class="line">checkNotNull(</span><br><span class="line">executorFactory,</span><br><span class="line"><span class="string">"Cannot find compatible factory for specified execution.target (=%s)"</span>,</span><br><span class="line">configuration.get(DeploymentOptions.TARGET));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据加载到的 PipelineExecutorFactory 工厂类，获取其对应的 PipelineExecutor，</span></span><br><span class="line"><span class="comment">// 并执行 PipelineExecutor 的 execute() 方法，将 StreamGraph 转成 JobGraph</span></span><br><span class="line">CompletableFuture&lt;JobClient&gt; jobClientFuture = executorFactory</span><br><span class="line">.getExecutor(configuration)</span><br><span class="line">.execute(streamGraph, configuration);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步调用的返回结果</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JobClient jobClient = jobClientFuture.get();</span><br><span class="line">jobListeners.forEach(jobListener -&gt; jobListener.onJobSubmitted(jobClient, <span class="keyword">null</span>));</span><br><span class="line"><span class="keyword">return</span> jobClient;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">jobListeners.forEach(jobListener -&gt; jobListener.onJobSubmitted(<span class="keyword">null</span>, t));</span><br><span class="line">ExceptionUtils.rethrow(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make javac happy, this code path will not be reached</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>executeAsync 有涉及到 PipelineExecutorFactory 和 PipelineExecutor 。<br>PipelineExecutorFactory 是通过 SPI ServiceLoader 加载的，我们看下 <code>flink-clients</code> 模块的 <code>META-INF.services</code> 文件：<br><img src="flink-clients%E6%A8%A1%E5%9D%97%E7%9A%84META-INF%E6%96%87%E4%BB%B6.png" alt></p><p>PipelineExecutorFactory 的实现子类，分别对应着 Flink 的不同部署模式，local、standalone、yarn、kubernets 等：<br><img src="PipelineExecutorFactory%E5%AD%90%E7%B1%BB.png" alt></p><p>这里我们只看下 LocalExecutorFactory 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalExecutorFactory</span> <span class="keyword">implements</span> <span class="title">PipelineExecutorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * execution.target 配置项对应的值为 "local"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCompatibleWith</span><span class="params">(<span class="keyword">final</span> Configuration configuration)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LocalExecutor.NAME.equalsIgnoreCase(configuration.get(DeploymentOptions.TARGET));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接 new 一个 LocalExecutor 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PipelineExecutor <span class="title">getExecutor</span><span class="params">(<span class="keyword">final</span> Configuration configuration)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LocalExecutor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PipelineExecutor 的实现子类与 PipelineExecutorFactory 与工厂类一一对应，负责将 StreamGraph 转成 JobGraph，并生成 ClusterClient 执行任务的提交：<br><img src="PipelineExecutor%E5%AD%90%E7%B1%BB.png" alt></p><p>LocalExecutorFactory 对应的 LocalExecutor 实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalExecutor</span> <span class="keyword">implements</span> <span class="title">PipelineExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"local"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;JobClient&gt; <span class="title">execute</span><span class="params">(Pipeline pipeline, Configuration configuration)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">checkNotNull(pipeline);</span><br><span class="line">checkNotNull(configuration);</span><br><span class="line"></span><br><span class="line"><span class="comment">// we only support attached execution with the local executor.</span></span><br><span class="line">checkState(configuration.getBoolean(DeploymentOptions.ATTACHED));</span><br><span class="line"></span><br><span class="line"><span class="comment">// StreamGraph 转成 JobGraph</span></span><br><span class="line"><span class="keyword">final</span> JobGraph jobGraph = getJobGraph(pipeline, configuration);</span><br><span class="line"></span><br><span class="line"><span class="comment">// local 模式，本地启动一个 Mini Cluster</span></span><br><span class="line"><span class="keyword">final</span> MiniCluster miniCluster = startMiniCluster(jobGraph, configuration);</span><br><span class="line"><span class="comment">// 创建 MiniClusterClient ，准备提交任务</span></span><br><span class="line"><span class="keyword">final</span> MiniClusterClient clusterClient = <span class="keyword">new</span> MiniClusterClient(configuration, miniCluster);</span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">CompletableFuture&lt;JobID&gt; jobIdFuture = clusterClient.submitJob(jobGraph);</span><br><span class="line"></span><br><span class="line">jobIdFuture</span><br><span class="line">.thenCompose(clusterClient::requestJobResult)</span><br><span class="line">.thenAccept((jobResult) -&gt; clusterClient.shutDownCluster());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jobIdFuture.thenApply(jobID -&gt;</span><br><span class="line"><span class="keyword">new</span> ClusterClientJobClientAdapter&lt;&gt;(() -&gt; clusterClient, jobID));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> JobGraph <span class="title">getJobGraph</span><span class="params">(Pipeline pipeline, Configuration configuration)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里调用 FlinkPipelineTranslationUtil 的 getJobGraph() 方法</span></span><br><span class="line"><span class="keyword">return</span> FlinkPipelineTranslationUtil.getJobGraph(pipeline, configuration, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回归主题，我们看下 FlinkPipelineTranslationUtil 的 getJobGraph() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JobGraph <span class="title">getJobGraph</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Pipeline pipeline,</span></span></span><br><span class="line"><span class="function"><span class="params">Configuration optimizerConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> defaultParallelism)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反射得到 FlinkPipelineTranslator </span></span><br><span class="line">FlinkPipelineTranslator pipelineTranslator = getPipelineTranslator(pipeline);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pipelineTranslator.translateToJobGraph(pipeline,</span><br><span class="line">optimizerConfiguration,</span><br><span class="line">defaultParallelism);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FlinkPipelineTranslator <span class="title">getPipelineTranslator</span><span class="params">(Pipeline pipeline)</span> </span>&#123;</span><br><span class="line">PlanTranslator planToJobGraphTransmogrifier = <span class="keyword">new</span> PlanTranslator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (planToJobGraphTransmogrifier.canTranslate(pipeline)) &#123;</span><br><span class="line"><span class="keyword">return</span> planToJobGraphTransmogrifier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FlinkPipelineTranslator streamGraphTranslator = reflectStreamGraphTranslator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实就是判断当前的 Pipeline 实例是不是 StreamGraph</span></span><br><span class="line"><span class="keyword">if</span> (!streamGraphTranslator.canTranslate(pipeline)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Translator "</span> + streamGraphTranslator + <span class="string">" cannot translate "</span></span><br><span class="line">+ <span class="string">"the given pipeline "</span> + pipeline + <span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> streamGraphTranslator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> FlinkPipelineTranslator <span class="title">reflectStreamGraphTranslator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; streamGraphTranslatorClass;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">streamGraphTranslatorClass = Class.forName(</span><br><span class="line"><span class="comment">// 因为这个类在 flink-streaming-java 模块中，FlinkPipelineTranslationUtil 在 flink-clients 模块中，</span></span><br><span class="line">    <span class="comment">// flink-clients 模块没有引入 flink-streaming-java 模块，所以只能通过反射拿到</span></span><br><span class="line"><span class="string">"org.apache.flink.streaming.api.graph.StreamGraphTranslator"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line">FlinkPipelineTranslationUtil.class.getClassLoader());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not load StreamGraphTranslator."</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FlinkPipelineTranslator streamGraphTranslator;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">streamGraphTranslator =</span><br><span class="line">(FlinkPipelineTranslator) streamGraphTranslatorClass.newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not instantiate StreamGraphTranslator."</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> streamGraphTranslator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着走到 StreamGraphTranslator 的 translateToJobGraph 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamGraphTranslator</span> <span class="keyword">implements</span> <span class="title">FlinkPipelineTranslator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其实就是调用 StreamGraph 自己的 getJobGraph 方法生成 JobGraph</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobGraph <span class="title">translateToJobGraph</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Pipeline pipeline,</span></span></span><br><span class="line"><span class="function"><span class="params">Configuration optimizerConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> defaultParallelism)</span> </span>&#123;</span><br><span class="line">checkArgument(pipeline <span class="keyword">instanceof</span> StreamGraph,</span><br><span class="line"><span class="string">"Given pipeline is not a DataStream StreamGraph."</span>);</span><br><span class="line"></span><br><span class="line">StreamGraph streamGraph = (StreamGraph) pipeline;</span><br><span class="line"><span class="keyword">return</span> streamGraph.getJobGraph(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">translateToJSONExecutionPlan</span><span class="params">(Pipeline pipeline)</span> </span>&#123;</span><br><span class="line">checkArgument(pipeline <span class="keyword">instanceof</span> StreamGraph,</span><br><span class="line"><span class="string">"Given pipeline is not a DataStream StreamGraph."</span>);</span><br><span class="line"></span><br><span class="line">StreamGraph streamGraph = (StreamGraph) pipeline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> streamGraph.getStreamingPlanAsJSON();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canTranslate</span><span class="params">(Pipeline pipeline)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pipeline <span class="keyword">instanceof</span> StreamGraph;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StreamGraph-到-JobGraph-的转换"><a href="#StreamGraph-到-JobGraph-的转换" class="headerlink" title="StreamGraph 到 JobGraph 的转换"></a>StreamGraph 到 JobGraph 的转换</h2><p>接着走到 StreamGraph 中的 getJobGraph() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JobGraph <span class="title">getJobGraph</span><span class="params">(@Nullable JobID jobID)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StreamingJobGraphGenerator.createJobGraph(<span class="keyword">this</span>, jobID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着走到 StreamingJobGraphGenerator 的 createJobGraph() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入 StreamGraph，生成 JobGraph</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JobGraph <span class="title">createJobGraph</span><span class="params">(StreamGraph streamGraph)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createJobGraph(streamGraph, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JobGraph <span class="title">createJobGraph</span><span class="params">(StreamGraph streamGraph, @Nullable JobID jobID)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StreamingJobGraphGenerator(streamGraph, jobID).createJobGraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心方法</span></span><br><span class="line"><span class="comment"> * StreamGraph 转 JobGraph 的整体流程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> JobGraph <span class="title">createJobGraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">preValidate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make sure that all vertices start immediately</span></span><br><span class="line"><span class="comment">// 设置调度模式，streaming 模式下，调度模式是所有节点一起启动</span></span><br><span class="line">jobGraph.setScheduleMode(streamGraph.getScheduleMode());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 广度优先遍历 StreamGraph 并且为每个 SteamNode 生成一个唯一确定的 hash id</span></span><br><span class="line"><span class="comment">// Generate deterministic hashes for the nodes in order to identify them across</span></span><br><span class="line"><span class="comment">// submission iff they didn't change.</span></span><br><span class="line"><span class="comment">// 保证如果提交的拓扑没有改变，则每次生成的 hash id 都是一样的，这里只要保证 source 的顺序是确定的，就可以保证最后生产的 hash id 不变</span></span><br><span class="line"><span class="comment">// 它是利用 input 节点的 hash 值及该节点在 map 中位置（实际上是 map.size 算的）来计算确定的</span></span><br><span class="line">Map&lt;Integer, <span class="keyword">byte</span>[]&gt; hashes = defaultStreamGraphHasher.traverseStreamGraphAndGenerateHashes(streamGraph);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate legacy version hashes for backwards compatibility</span></span><br><span class="line"><span class="comment">// 这个设置主要是为了防止 hash 机制变化时出现不兼容的情况</span></span><br><span class="line">List&lt;Map&lt;Integer, <span class="keyword">byte</span>[]&gt;&gt; legacyHashes = <span class="keyword">new</span> ArrayList&lt;&gt;(legacyStreamGraphHashers.size());</span><br><span class="line"><span class="keyword">for</span> (StreamGraphHasher hasher : legacyStreamGraphHashers) &#123;</span><br><span class="line">legacyHashes.add(hasher.traverseStreamGraphAndGenerateHashes(streamGraph));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;Tuple2&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; chainedOperatorHashes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 最重要的函数，生成 JobVertex/JobEdge/IntermediateDataSet 等，并尽可能地将多个 StreamNode 节点 chain 在一起</span></span><br><span class="line">setChaining(hashes, legacyHashes, chainedOperatorHashes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将每个 JobVertex 的入边集合也序列化到该 JobVertex 的 StreamConfig 中 (出边集合已经在 setChaining 的时候写入了)</span></span><br><span class="line">setPhysicalEdges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据 group name，为每个 JobVertex 指定所属的 SlotSharingGroup 以及设置 CoLocationGroup</span></span><br><span class="line">setSlotSharingAndCoLocation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 其他设置</span></span><br><span class="line"><span class="comment">// 设置 ManagedMemory 因子</span></span><br><span class="line">setManagedMemoryFraction(</span><br><span class="line">Collections.unmodifiableMap(jobVertices),</span><br><span class="line">Collections.unmodifiableMap(vertexConfigs),</span><br><span class="line">Collections.unmodifiableMap(chainedConfigs),</span><br><span class="line">id -&gt; streamGraph.getStreamNode(id).getMinResources(),</span><br><span class="line">id -&gt; streamGraph.getStreamNode(id).getManagedMemoryWeight());</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkpoint相关的配置</span></span><br><span class="line">configureCheckpointing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// savepoint相关的配置</span></span><br><span class="line">jobGraph.setSavepointRestoreSettings(streamGraph.getSavepointRestoreSettings());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户的第三方依赖包就是在这里（cacheFile）传给 JobGraph</span></span><br><span class="line">JobGraphGenerator.addUserArtifactEntries(streamGraph.getUserArtifacts(), jobGraph);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set the ExecutionConfig last when it has been finalized</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 将 StreamGraph 的 ExecutionConfig 序列化到 JobGraph 的配置中</span></span><br><span class="line">jobGraph.setExecutionConfig(streamGraph.getExecutionConfig());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalConfigurationException(<span class="string">"Could not serialize the ExecutionConfig."</span> +</span><br><span class="line"><span class="string">"This indicates that non-serializable types (like custom serializers) were registered"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jobGraph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要围绕 Flink 源码中 &lt;code&gt;flink-streaming-java&lt;/code&gt; 模块。介绍下 StreamGraph 转成 JobGraph 的过程等。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink源码剖析-flink-streaming-java_StreamGraph</title>
    <link href="http://yoursite.com/2020/04/22/Flink%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-flink-streaming-java_StreamGraph/"/>
    <id>http://yoursite.com/2020/04/22/Flink源码剖析-flink-streaming-java_StreamGraph/</id>
    <published>2020-04-21T16:06:00.000Z</published>
    <updated>2020-04-22T16:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要围绕 Flink 源码中 <code>flink-streaming-java</code> 模块。介绍如何使用 DataStream API 进行 Flink 流任务开发，<code>flink-streaming-java</code> 模块中的一些重要类，贯穿着介绍下从 DataStream<br>API 到 StreamGraph 的构建过程。</p><a id="more"></a><h2 id="DataStream-API使用一览"><a href="#DataStream-API使用一览" class="headerlink" title="DataStream API使用一览"></a>DataStream API使用一览</h2><p>使用 DataStream API 通常有以下步骤：</p><ol><li>如何创建 Environment(Local、Remote) 并设置属性</li></ol><ul><li>setParallelism(int)：StreamExecutionEnvironment</li><li>setMaxParallelism(int)：StreamExecutionEnvironment</li><li>setBufferTimeout(long)：StreamExecutionEnvironment</li><li>enableCheckpointing(long,CheckpointingMode)：StreamExecutionEnvironment</li><li>setStateBackend(StateBackend)：StreamExecutionEnvironment</li><li>setStreamTimeCharacteristic(TimeCharacteristic)：void</li></ul><ol start="2"><li>如何读取数据？添加 Source 数据源获得 DataStream</li></ol><ul><li>fromElements(OUT …): DataStreamSource<out>   …</out></li><li>readTextFile(String): DataStreamSource<string>  …</string></li><li>readFile(FileInputFormat<out>,String): DataStreamSource<out> …</out></out></li><li>socketTextStream(String ,int ,String ,long): DataStreamSource<string>  …</string></li><li>createInput(InputFormat&lt;OUT,?&gt;,TypeInformation<out>): DataStreamSource<out> …</out></out></li><li>addSource(SourceFunction<out>,TypeInformation<out>): DataStreamSource<out> …</out></out></out></li></ul><ol start="3"><li>如何操作转换数据？</li></ol><p><img src="DataStream_API%E6%93%8D%E4%BD%9C%E6%A6%82%E8%A7%88.png" alt></p><ul><li>Basic Transformations<br>map、filter、flatMap</li><li>KeyedStream Transformations<br>keyBy、aggregations、reduce</li><li>MultiStream Transformations<br>union、connect、coMap、coFlatMap、split、select</li></ul><p><img src="DataStream%E5%9F%BA%E6%9C%AC%E8%BD%AC%E6%8D%A2.png" alt></p><ul><li>Distribution Transformations<br>物理分组：</li></ul><table><thead><tr><th>关系</th><th>表示</th><th>图示</th></tr></thead><tbody><tr><td>global</td><td>全部发往第1个task</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_global.png" alt></td></tr><tr><td>broadcast</td><td>广播，复制上游的数据发送到所有下游节点</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_broadcast.png" alt></td></tr><tr><td>forward</td><td>上下游并发度一样时一对一发送</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_forward.png" alt></td></tr><tr><td>shuffle</td><td>随机均匀分配</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_shuffle.png" alt></td></tr><tr><td>reblance</td><td>Round-Robin（轮流分配）</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_reblance.png" alt></td></tr><tr><td>rescale</td><td>Local Round-Robin (本地轮流分配)，<br>只会看到本机的实例</td><td><img src="%E7%89%A9%E7%90%86%E5%88%86%E7%BB%84_rescale.png" alt></td></tr><tr><td>partitionCustom</td><td>自定义单播</td><td></td></tr></tbody></table><ol start="4"><li>如何输出数据？添加 Sink</li></ol><ul><li>writeAsText(String path): DataStreamSink<t> …</t></li><li>writeAsCsv(String path): DataStreamSink<t> …</t></li><li>addSink(SinkFunction<t> sinkFunction): DataStreamSink<t></t></t></li></ul><ol start="5"><li>如何提交执行？<br>DataStream 通过不同的算子不停地在 DataStream 上实现转换过滤等逻辑，最终将结果输出到 DataSink 中。<br>在 StreamExecutionEnvironment 内部使用一个 <code>List&lt;StreamTransformation&lt;?&gt;&gt; transformations</code> 来保留生成 DataStream 的所有转换。</li></ol><ul><li>execute()：JobExecutionResult</li></ul><p>我们看下基于 Flink DataStream API 的自带 WordCount 示例：实时统计单词数量，每来一个计算一次并输出一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *************************************************************************</span></span><br><span class="line"><span class="comment">// PROGRAM</span></span><br><span class="line"><span class="comment">// *************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ParameterTool params = ParameterTool.fromArgs(args);</span><br><span class="line"><span class="comment">// 1. 设置运行环境</span></span><br><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.getConfig().setGlobalJobParameters(params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置数据源读取数据</span></span><br><span class="line">DataStream&lt;String&gt; text;</span><br><span class="line"><span class="keyword">if</span> (params.has(<span class="string">"input"</span>)) &#123;</span><br><span class="line"><span class="comment">// read the text file from given input path</span></span><br><span class="line">text = env.readTextFile(params.get(<span class="string">"input"</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// get default test text data</span></span><br><span class="line">text = env.fromElements(<span class="keyword">new</span> String[] &#123;</span><br><span class="line"><span class="string">"miao,She is a programmer"</span>,</span><br><span class="line"><span class="string">"wu,He is a programmer"</span>,</span><br><span class="line"><span class="string">"zhao,She is a programmer"</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 进行一系列转换</span></span><br><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; counts =</span><br><span class="line"><span class="comment">// split up the lines in pairs (2-tuples) containing: (word,1)</span></span><br><span class="line">text.flatMap(<span class="keyword">new</span> Tokenizer())</span><br><span class="line"><span class="comment">// group by the tuple field "0" and sum up tuple field "1"</span></span><br><span class="line">.keyBy(<span class="number">0</span>).sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 配置数据汇写出数据</span></span><br><span class="line"><span class="keyword">if</span> (params.has(<span class="string">"output"</span>)) &#123;</span><br><span class="line">counts.writeAsText(params.get(<span class="string">"output"</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Printing result to stdout. Use --output to specify output path."</span>);</span><br><span class="line">counts.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 提交执行</span></span><br><span class="line">env.execute(<span class="string">"Streaming WordCount"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *************************************************************************</span></span><br><span class="line"><span class="comment">// USER FUNCTIONS</span></span><br><span class="line"><span class="comment">// *************************************************************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> </span>&#123;</span><br><span class="line"><span class="comment">// normalize and split the line</span></span><br><span class="line">String[] tokens = value.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// emit the pairs</span></span><br><span class="line"><span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line"><span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">out.collect(<span class="keyword">new</span> Tuple2&lt;&gt;(token, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><h3 id="StreamExecutionEnvironment"><a href="#StreamExecutionEnvironment" class="headerlink" title="StreamExecutionEnvironment"></a>StreamExecutionEnvironment</h3><p>StreamExecutionEnvironment 是 Flink 流处理任务执行的上下文，是我们编写 Flink 程序的入口。根据执行环境的不同，选择不同的 StreamExecutionEnvironment 类，<br>有 LocalStreamEnvironment、RemoteStreamEnvironment 等。如下图：<br><img src="StreamExecutionEnvironment%E5%AD%90%E7%B1%BB.png" alt></p><p>StreamExecutionEnvironment 依赖 ExecutionConfig 类来设置并行度等，依赖 CheckpointConfig 设置 Checkpointing 等相关属性。<br><img src="StreamExecutionEnvironment%E7%B1%BB%E5%9B%BE.png" alt></p><p>这里再补充说明下 StreamExecutionEnvironment类中的重要属性和方法：<br><img src="StreamExecutionEnvironment%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95.png" alt></p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><p>Transformation 代表了从一个或多个 DataStream 生成新 DataStream 的操作。在 DataStream 上通过 map 等算子不断进行转换，就得到了由 Transformation<br>构成的图。当需要执行的时候，底层的这个图就会被转换成 StreamGraph 。</p><p>Transformation 有很多子类，如 SourceTransformation、OneInputTransformation、TwoInputTransformation、SideOutputTransformation 等，分别对应了 DataStream 上的不同转换操作。</p><p><img src="Transformation%E5%AD%90%E7%B1%BB.png" alt></p><p>每一个 Transformation 都有一个关联 id，这个 id 是全局递增的，还有 uid、slotSharingGroup、parallelism 等信息。</p><p><img src="Transformation%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7.png" alt></p><p>查看 Transformation 的其中两个子类 OneInputTransformation、TwoInputTransformation 的实现，都对应有输入 Transformation，也正是基于此才能还原出 DAG 的拓扑结构。</p><p>Transformation 在运行时并不对应着一个物理转换操作，有一些操作只是逻辑层面上的，比如 split/select/partitioning 等。<br>Transformations 组成的 graph ，也就是我们写代码时的图结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> Source              Source</span><br><span class="line">    +                   +</span><br><span class="line">    |                   |</span><br><span class="line">    v                   v</span><br><span class="line">Rebalance          HashPartition</span><br><span class="line">    +                   +</span><br><span class="line">    |                   |</span><br><span class="line">    |                   |</span><br><span class="line">    +------&gt;Union&lt;------+</span><br><span class="line">              +</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">            Split</span><br><span class="line">              +</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">            Select</span><br><span class="line">              +</span><br><span class="line">              v</span><br><span class="line">             Map</span><br><span class="line">              +</span><br><span class="line">              |</span><br><span class="line">              v</span><br><span class="line">            Sink</span><br></pre></td></tr></table></figure><p>但是，在运行时将生成如下操作图，split/select/partitioning 等转换操作会被编码到边中，这个边连接 sources 和 map 操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Source              Source</span><br><span class="line">   +                   +</span><br><span class="line">   |                   |</span><br><span class="line">   |                   |</span><br><span class="line">   +-------&gt;Map&lt;-------+</span><br><span class="line">             +</span><br><span class="line">             |</span><br><span class="line">             v</span><br><span class="line">            Sink</span><br></pre></td></tr></table></figure><h3 id="DataStream"><a href="#DataStream" class="headerlink" title="DataStream"></a>DataStream</h3><p>一个 DataStream 就代表了同一种类型元素构成的数据流。通过对 DataStream 应用 map/filter 等操作，就可以将一个 DataStream 转换成另一个 DataStream 。<br>这个转换的过程就是根据不同的操作生成不同的 Transformation ，并将其加入到 StreamExecutionEnvironment 的 transformations 列表中。</p><p>DataStream 的子类包括 DataStreamSource、KeyedStream、IterativeStream、SingleOutputStreamOperator。</p><p><img src="DataStream%E5%AD%90%E7%B1%BB.png" alt></p><p>除了 DataStream 及其子类以外，其它的表征数据流的类还有 ConnectedStreams、WindowedStream、AllWindowedStream，这些会在后续的文章中陆续介绍。</p><p>DataStream 类中的重要属性和方法：</p><p><img src="DataStream%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95.png" alt></p><p>下面我们看下 map 操作是如何被添加进来的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">SingleOutputStreamOperator&lt;R&gt; <span class="title">map</span><span class="params">(MapFunction&lt;T, R&gt; mapper, TypeInformation&lt;R&gt; outputType)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将 MapFunction 封装成 StreamMap 这个 StreamOperator</span></span><br><span class="line"><span class="keyword">return</span> transform(<span class="string">"Map"</span>, outputType, <span class="keyword">new</span> StreamMap&lt;&gt;(clean(mapper)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PublicEvolving</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">SingleOutputStreamOperator&lt;R&gt; <span class="title">transform</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String operatorName,</span></span></span><br><span class="line"><span class="function"><span class="params">TypeInformation&lt;R&gt; outTypeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">OneInputStreamOperator&lt;T, R&gt; operator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> doTransform(operatorName, outTypeInfo, SimpleOperatorFactory.of(operator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们看下其中一个比较重要的方法 doTransform ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;R&gt; <span class="function">SingleOutputStreamOperator&lt;R&gt; <span class="title">doTransform</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String operatorName,</span></span></span><br><span class="line"><span class="function"><span class="params">TypeInformation&lt;R&gt; outTypeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">StreamOperatorFactory&lt;R&gt; operatorFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read the output type of the input Transform to coax out errors about MissingTypeInfo</span></span><br><span class="line">transformation.getOutputType();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造 Transformation</span></span><br><span class="line">OneInputTransformation&lt;T, R&gt; resultTransform = <span class="keyword">new</span> OneInputTransformation&lt;&gt;(</span><br><span class="line"><span class="keyword">this</span>.transformation,</span><br><span class="line">operatorName,</span><br><span class="line">operatorFactory,</span><br><span class="line">outTypeInfo,</span><br><span class="line">environment.getParallelism());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Transformation 封装进 SingleOutputStreamOperator 返回</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">SingleOutputStreamOperator&lt;R&gt; returnStream = <span class="keyword">new</span> SingleOutputStreamOperator(environment, resultTransform);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到 StreamExecutionEnvironment 的 transformations 列表中</span></span><br><span class="line">getExecutionEnvironment().addOperator(resultTransform);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> returnStream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StreamOperator"><a href="#StreamOperator" class="headerlink" title="StreamOperator"></a>StreamOperator</h3><p>在操作 DataStream 的时候，比如 <code>DataStream.map(MapFunction&lt;T, R&gt; mapper)</code> 时，都会传入一个自定义的 Function 。那么这些信息是如何保存在 Transformation 中的呢？<br>这里就引入了一个新的接口 StreamOpertor ，DataStream 上的每一个 Transformation 都对应了一个 StreamOperator，StreamOperator 是运行时的具体实现，会决定 UDF 的调用方式。</p><p>StreamOperator 的类继承关系如下：</p><p><img src="StreamOperator%E5%AD%90%E7%B1%BB.png" alt></p><p>接口 StreamOpertor 定义了对一个具体的算子的生命周期的管理。StreamOperator 的两个子接口 OneInputStreamOperator 和 TwoInputStreamOperator 提供了数据流中具体元素的操作方法，而 AbstractUdfStreamOperator 抽象子类则提供了自定义处理函数对应的算子的基本实现：</p><p><img src="StreamOperator%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95.png" alt></p><p>下面我们还是拿 map 举例，map 操作对应的 StreamOperator 为 StreamMap ，继承了 AbstractUdfStreamOperator 类，实现了 OneInputStreamOperator 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMap</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">AbstractUdfStreamOperator</span>&lt;<span class="title">OUT</span>, <span class="title">MapFunction</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>&gt;&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">OneInputStreamOperator</span>&lt;<span class="title">IN</span>, <span class="title">OUT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StreamMap</span><span class="params">(MapFunction&lt;IN, OUT&gt; mapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(mapper);</span><br><span class="line">chainingStrategy = ChainingStrategy.ALWAYS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(StreamRecord&lt;IN&gt; element)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">output.collect(element.replace(userFunction.map(element.getValue())));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，我们可以知道通过 DataStream -&gt; Function -&gt; StreamOperator -&gt; StreamTransformation 这种依赖关系，就可以完成 DataStream 的转换，并且可以保存数据流和应用在流上<br>的算子之间的关系。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p><img src="Function%E5%AD%90%E7%B1%BB.png" alt></p><h3 id="StreamGraph"><a href="#StreamGraph" class="headerlink" title="StreamGraph"></a>StreamGraph</h3><p>StreamGraph 是在 Client 端构造的。<br>了解 StreamGraph 之前我们首先要知道 StreamGraphGenerator 这个类，它会基于 StreamExecutionEnvironment 的 transformations 列表来生成 StreamGraph。</p><p>首先看下 StreamGraphGenerator 的 generate() 方法，这个方法会由触发程序执行的方法 StreamExecutionEnvironment.execute() 调用到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StreamGraph <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">streamGraph = <span class="keyword">new</span> StreamGraph(executionConfig, checkpointConfig, savepointRestoreSettings);</span><br><span class="line">streamGraph.setStateBackend(stateBackend);</span><br><span class="line">streamGraph.setChaining(chaining);</span><br><span class="line">streamGraph.setScheduleMode(scheduleMode);</span><br><span class="line">streamGraph.setUserArtifacts(userArtifacts);</span><br><span class="line">streamGraph.setTimeCharacteristic(timeCharacteristic);</span><br><span class="line">streamGraph.setJobName(jobName);</span><br><span class="line">streamGraph.setBlockingConnectionsBetweenChains(blockingConnectionsBetweenChains);</span><br><span class="line"></span><br><span class="line">alreadyTransformed = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历 transformations 列表，递归调用 transform 方法。</span></span><br><span class="line"><span class="comment"> * 对于每一个 Transformation ，确保当前上游已经完成转换，转换成 StreamGraph 中的 StreamNode，并为上下游节点添加 StreamEdge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (Transformation&lt;?&gt; transformation: transformations) &#123;</span><br><span class="line">transform(transformation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> StreamGraph builtStreamGraph = streamGraph;</span><br><span class="line"></span><br><span class="line">alreadyTransformed.clear();</span><br><span class="line">alreadyTransformed = <span class="keyword">null</span>;</span><br><span class="line">streamGraph = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> builtStreamGraph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在遍历 List<transformation> 生成 StreamGraph 时，会递归调用其 transform 方法。对于每一个 Transformation ，确保当前其上游已经完成转换。最终，部分 Transformation 节点被<br>转换为 StreamGraph 中的 StreamNode 节点，并会为上下游节点添加边 StreamEdge。下面看下 transform() 方法：</transformation></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;Integer&gt; <span class="title">transform</span><span class="params">(Transformation&lt;?&gt; transform)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (alreadyTransformed.containsKey(transform)) &#123;</span><br><span class="line"><span class="keyword">return</span> alreadyTransformed.get(transform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于不同类型的 Transformation，分别调用对应的转换方法</span></span><br><span class="line"><span class="comment">// 只有 OneInputTransformation、TwoInputTransformation、SourceTransformation、SinkTransformation 会生成 StreamNode，</span></span><br><span class="line"><span class="comment">// 会生成 StreamNode.</span></span><br><span class="line"><span class="comment">// 像 Partitioning, split/select, union 这些是不包含物理转换操作的，会生成一个带有特定属性的虚拟节点，</span></span><br><span class="line"><span class="comment">// 当添加一条有虚拟节点指向下游节点的边时，会找到虚拟节点上游的物理节点，在两个物理节点之间添加边，并把虚拟转换操作的属性附着上去。</span></span><br><span class="line">Collection&lt;Integer&gt; transformedIds;</span><br><span class="line"><span class="keyword">if</span> (transform <span class="keyword">instanceof</span> OneInputTransformation&lt;?, ?&gt;) &#123;</span><br><span class="line">transformedIds = transformOneInputTransform((OneInputTransformation&lt;?, ?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> TwoInputTransformation&lt;?, ?, ?&gt;) &#123;</span><br><span class="line">transformedIds = transformTwoInputTransform((TwoInputTransformation&lt;?, ?, ?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> SourceTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformSource((SourceTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> SinkTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformSink((SinkTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> UnionTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformUnion((UnionTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> SplitTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformSplit((SplitTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> SelectTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformSelect((SelectTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> FeedbackTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformFeedback((FeedbackTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> CoFeedbackTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformCoFeedback((CoFeedbackTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> PartitionTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformPartition((PartitionTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (transform <span class="keyword">instanceof</span> SideOutputTransformation&lt;?&gt;) &#123;</span><br><span class="line">transformedIds = transformSideOutput((SideOutputTransformation&lt;?&gt;) transform);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown transformation: "</span> + transform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> transformedIds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于另外一部分 Transformation ，如 partitioning, split/select, union，并不包含真正的物理转换操作，是不会生成 StreamNode 的，而是生成一个带有特定属性的虚拟节点。<br>当添加一条有虚拟节点指向下游节点的边时，会找到虚拟节点上游的物理节点，在两个物理节点之间添加边，并把虚拟转换操作的属性附着上去。下面我们首先看下 transformOneInputTransform() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;IN, OUT&gt; <span class="function">Collection&lt;Integer&gt; <span class="title">transformOneInputTransform</span><span class="params">(OneInputTransformation&lt;IN, OUT&gt; transform)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先确保上游节点完成转换</span></span><br><span class="line">Collection&lt;Integer&gt; inputIds = transform(transform.getInput());</span><br><span class="line"></span><br><span class="line"><span class="comment">// the recursive call might have already transformed this</span></span><br><span class="line"><span class="comment">// 由于是递归调用的，可能已经完成了转换</span></span><br><span class="line"><span class="keyword">if</span> (alreadyTransformed.containsKey(transform)) &#123;</span><br><span class="line"><span class="keyword">return</span> alreadyTransformed.get(transform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定共享资源组，如果用户没有指定，默认是 default</span></span><br><span class="line">String slotSharingGroup = determineSlotSharingGroup(transform.getSlotSharingGroup(), inputIds);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 StreamGraph 中添加 Operator，这一步会生成对应的 StreamNode</span></span><br><span class="line">streamGraph.addOperator(transform.getId(),</span><br><span class="line">slotSharingGroup,</span><br><span class="line">transform.getCoLocationGroupKey(),</span><br><span class="line">transform.getOperatorFactory(),</span><br><span class="line">transform.getInputType(),</span><br><span class="line">transform.getOutputType(),</span><br><span class="line">transform.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 stateKey</span></span><br><span class="line"><span class="keyword">if</span> (transform.getStateKeySelector() != <span class="keyword">null</span>) &#123;</span><br><span class="line">TypeSerializer&lt;?&gt; keySerializer = transform.getStateKeyType().createSerializer(executionConfig);</span><br><span class="line">streamGraph.setOneInputStateKey(transform.getId(), transform.getStateKeySelector(), keySerializer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 parallelism</span></span><br><span class="line"><span class="keyword">int</span> parallelism = transform.getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT ?</span><br><span class="line">transform.getParallelism() : executionConfig.getParallelism();</span><br><span class="line">streamGraph.setParallelism(transform.getId(), parallelism);</span><br><span class="line">streamGraph.setMaxParallelism(transform.getId(), transform.getMaxParallelism());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在每一个物理节点的转换上</span></span><br><span class="line"><span class="comment">// 依次连接到上游 input 节点，创建 StreamEdge，在输入节点和当前节点之间建立边的连接</span></span><br><span class="line"><span class="keyword">for</span> (Integer inputId: inputIds) &#123;</span><br><span class="line">streamGraph.addEdge(inputId, transform.getId(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Collections.singleton(transform.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看下 StreamGraph 中对应的添加节点的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;IN, OUT&gt; <span class="function"><span class="keyword">void</span> <span class="title">addOperator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Integer vertexID,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable String slotSharingGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable String coLocationGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">StreamOperatorFactory&lt;OUT&gt; operatorFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">TypeInformation&lt;IN&gt; inTypeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">TypeInformation&lt;OUT&gt; outTypeInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">String operatorName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (operatorFactory.isStreamSource()) &#123;</span><br><span class="line"><span class="comment">// 从传入的 StreamOperatorFactory 得知当前 operator 代表的是 source 流。SourceStreamTask</span></span><br><span class="line">addNode(vertexID, slotSharingGroup, coLocationGroup, SourceStreamTask.class, operatorFactory, operatorName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 上游节点输入流，OneInputStreamTask</span></span><br><span class="line">addNode(vertexID, slotSharingGroup, coLocationGroup, OneInputStreamTask.class, operatorFactory, operatorName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> StreamNode <span class="title">addNode</span><span class="params">(Integer vertexID,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable String slotSharingGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">    @Nullable String coLocationGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">// 表示该节点在 TM 中运行时的实际任务类型</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;? extends AbstractInvokable&gt; vertexClass,</span></span></span><br><span class="line"><span class="function"><span class="params">StreamOperatorFactory&lt;?&gt; operatorFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">String operatorName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (streamNodes.containsKey(vertexID)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Duplicate vertexID "</span> + vertexID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造 StreamNode</span></span><br><span class="line">StreamNode vertex = <span class="keyword">new</span> StreamNode(</span><br><span class="line">vertexID,</span><br><span class="line">slotSharingGroup,</span><br><span class="line">coLocationGroup,</span><br><span class="line">operatorFactory,</span><br><span class="line">operatorName,</span><br><span class="line"><span class="keyword">new</span> ArrayList&lt;OutputSelector&lt;?&gt;&gt;(),</span><br><span class="line">vertexClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存在 streamNodes 这个 map 中</span></span><br><span class="line">streamNodes.put(vertexID, vertex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vertex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们再看下 transformPartition() 非物理节点的转换方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;Integer&gt; <span class="title">transformPartition</span><span class="params">(PartitionTransformation&lt;T&gt; partition)</span> </span>&#123;</span><br><span class="line">Transformation&lt;T&gt; input = partition.getInput();</span><br><span class="line">List&lt;Integer&gt; resultIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归遍历转换上游节点</span></span><br><span class="line">Collection&lt;Integer&gt; transformedIds = transform(input);</span><br><span class="line"><span class="keyword">for</span> (Integer transformedId: transformedIds) &#123;</span><br><span class="line"><span class="keyword">int</span> virtualId = Transformation.getNewNodeId();</span><br><span class="line"><span class="comment">// 添加虚拟的 Partition 节点</span></span><br><span class="line">streamGraph.addVirtualPartitionNode(</span><br><span class="line">transformedId, virtualId, partition.getPartitioner(), partition.getShuffleMode());</span><br><span class="line">resultIds.add(virtualId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resultIds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addVirtualPartitionNode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Integer originalId,</span></span></span><br><span class="line"><span class="function"><span class="params">Integer virtualId,</span></span></span><br><span class="line"><span class="function"><span class="params">StreamPartitioner&lt;?&gt; partitioner,</span></span></span><br><span class="line"><span class="function"><span class="params">ShuffleMode shuffleMode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (virtualPartitionNodes.containsKey(virtualId)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already has virtual partition node with id "</span> + virtualId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个虚拟节点到 virtualPartitionNodes 中，后续添加边的时候会连接到实际的物理节点</span></span><br><span class="line">virtualPartitionNodes.put(virtualId, <span class="keyword">new</span> Tuple3&lt;&gt;(originalId, partitioner, shuffleMode));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际的物理节点执行添加边的操作时，会判断上游是不是虚拟节点，如果是则会一直递归调用，将虚拟节点的信息添加到边中，直到连接到一个物理转换节点为止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEdgeInternal</span><span class="params">(Integer upStreamVertexID,</span></span></span><br><span class="line"><span class="function"><span class="params"> Integer downStreamVertexID,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">int</span> typeNumber,</span></span></span><br><span class="line"><span class="function"><span class="params"> StreamPartitioner&lt;?&gt; partitioner,</span></span></span><br><span class="line"><span class="function"><span class="params"> List&lt;String&gt; outputNames,</span></span></span><br><span class="line"><span class="function"><span class="params"> OutputTag outputTag,</span></span></span><br><span class="line"><span class="function"><span class="params"> ShuffleMode shuffleMode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先判断是不是虚拟节点上的边，如果是，则找到虚拟节点上游对应的物理节点</span></span><br><span class="line"><span class="comment">// 在两个物理节点之间添加边，并把对应的 outputTag 或 StreamPartitioner 添加到 StreamEdge 中</span></span><br><span class="line"><span class="keyword">if</span> (virtualSideOutputNodes.containsKey(upStreamVertexID)) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (virtualSelectNodes.containsKey(upStreamVertexID)) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (virtualPartitionNodes.containsKey(upStreamVertexID)) &#123;</span><br><span class="line"><span class="keyword">int</span> virtualId = upStreamVertexID;</span><br><span class="line">upStreamVertexID = virtualPartitionNodes.get(virtualId).f0;</span><br><span class="line"><span class="keyword">if</span> (partitioner == <span class="keyword">null</span>) &#123;</span><br><span class="line">partitioner = virtualPartitionNodes.get(virtualId).f1;</span><br><span class="line">&#125;</span><br><span class="line">shuffleMode = virtualPartitionNodes.get(virtualId).f2;</span><br><span class="line">addEdgeInternal(upStreamVertexID, downStreamVertexID, typeNumber, partitioner, outputNames, outputTag, shuffleMode);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个物理节点</span></span><br><span class="line">StreamNode upstreamNode = getStreamNode(upStreamVertexID);</span><br><span class="line">StreamNode downstreamNode = getStreamNode(downStreamVertexID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If no partitioner was specified and the parallelism of upstream and downstream</span></span><br><span class="line"><span class="comment">// operator matches use forward partitioning, use rebalance otherwise.</span></span><br><span class="line"><span class="keyword">if</span> (partitioner == <span class="keyword">null</span> &amp;&amp; upstreamNode.getParallelism() == downstreamNode.getParallelism()) &#123;</span><br><span class="line">partitioner = <span class="keyword">new</span> ForwardPartitioner&lt;Object&gt;();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (partitioner == <span class="keyword">null</span>) &#123;</span><br><span class="line">partitioner = <span class="keyword">new</span> RebalancePartitioner&lt;Object&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (partitioner <span class="keyword">instanceof</span> ForwardPartitioner) &#123;</span><br><span class="line"><span class="keyword">if</span> (upstreamNode.getParallelism() != downstreamNode.getParallelism()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Forward partitioning does not allow "</span> +</span><br><span class="line"><span class="string">"change of parallelism. Upstream operation: "</span> + upstreamNode + <span class="string">" parallelism: "</span> + upstreamNode.getParallelism() +</span><br><span class="line"><span class="string">", downstream operation: "</span> + downstreamNode + <span class="string">" parallelism: "</span> + downstreamNode.getParallelism() +</span><br><span class="line"><span class="string">" You must use another partitioning strategy, such as broadcast, rebalance, shuffle or global."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shuffleMode == <span class="keyword">null</span>) &#123;</span><br><span class="line">shuffleMode = ShuffleMode.UNDEFINED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 StreamEdge，带着 outputTag 、StreamPartitioner 等属性</span></span><br><span class="line">StreamEdge edge = <span class="keyword">new</span> StreamEdge(upstreamNode, downstreamNode, typeNumber, outputNames, partitioner, outputTag, shuffleMode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别将 StreamEdge 添加到上游节点和下游节点</span></span><br><span class="line"><span class="comment">// 获取上游节点，添加 OutEdge</span></span><br><span class="line">getStreamNode(edge.getSourceId()).addOutEdge(edge);</span><br><span class="line">getStreamNode(edge.getTargetId()).addInEdge(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StreamGraph 是 Flink 任务最接近用户逻辑的 DAG 表示，后面到具体执行时还会进行一系列转换。</p><h3 id="类之间的层级关系"><a href="#类之间的层级关系" class="headerlink" title="类之间的层级关系"></a>类之间的层级关系</h3><p><img src="DataStream_API%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png" alt></p><p>map 转换将用户自定义函数 MapFunction 包装到 StreamMap 这个 StreamOperator 中，再将 StreamMap 包装到 OneInputTransformation，最后该 transformation 会存到<br>StreamExecutionEnvironment 中。当调用 env.execute() 时，会遍历其中的 transformations 集合构造出 StreamGraph 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要围绕 Flink 源码中 &lt;code&gt;flink-streaming-java&lt;/code&gt; 模块。介绍如何使用 DataStream API 进行 Flink 流任务开发，&lt;code&gt;flink-streaming-java&lt;/code&gt; 模块中的一些重要类，贯穿着介绍下从 DataStream&lt;br&gt;API 到 StreamGraph 的构建过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>UML</title>
    <link href="http://yoursite.com/2020/04/14/UML/"/>
    <id>http://yoursite.com/2020/04/14/UML/</id>
    <published>2020-04-14T08:58:11.000Z</published>
    <updated>2020-04-15T13:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Java开发中的软技能之一，UML图。UML 即统一建模语言，它是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。<br>UML 展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。<br>我们知道开发一个软件系统，不光只有程序员参与，另外还有分析师、设计师、测试人员等等，为了让不同人能够理解交流这个软件系统，就诞生了这么一套语言。<br>这套语言是由图表组成的，最常用的有：用例图、类图、时序图、状态图、活动图、组件图和部署图等。大致可以将这些图归类为结构图和行为图：</p><ul><li>结构图是静态图，如类图、对象图等</li><li>行为图是动态图，像序列图、协作图等</li></ul><a id="more"></a><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>类图主要是用来显示系统中的类、接口以及它们之间的静态结构和关系的一种静态模型。<br>许多项目立项文档、需求分析文档中，都会有关 UML 类图的涉及。类图基本上是一个系统的静态视图的图形表示，代表应用的不同方面，集合类图就表示整个系统。<br>画类图需要关注以下几点：</p><ul><li>类图中的名称应该是有意义的描述，并且是面向系统的</li><li>画类图前应该先确定每个元素之间的关系</li><li>类图中每个类职责（属性和方法）应该清晰标明</li><li>对于每个类的属性应改精简，不必要的属性将使图表变得复杂</li></ul><h3 id="可见性符号"><a href="#可见性符号" class="headerlink" title="可见性符号"></a>可见性符号</h3><p><code>+</code> public<br><code>#</code> protected<br><code>-</code> private</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><table><thead><tr><th>关系</th><th>表示</th><th>图示</th><th>解释</th><th>结构和语义</th></tr></thead><tbody><tr><td>泛化（Generalization）</td><td><img src="%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.png" alt></td><td>A继承B，B为非抽象类</td><td>继承结构</td></tr><tr><td>实现（Realization）</td><td><img src="%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt></td><td>A实现B，B为抽象类或接口</td><td>继承结构</td></tr><tr><td>聚合（Aggregation）</td><td><img src="%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt></td><td>A聚合到B上，B由A组成</td><td>表示整体由部分构成的语义。<br> (不是强依赖：整体不存在了，部分仍然存在)</td></tr><tr><td>组合（Composition）</td><td><img src="%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt></td><td>A组成B，B由A组成</td><td>表示整体由部分构成的语义。<br> (强依赖：整体不存在了，部分也不存在了)</td></tr><tr><td>关联（Association）</td><td><img src="%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt></td><td>A知道B，但是B不知道A</td><td>不同类的对象之间的结构关系。<br> 不强调方向，表示对象间相互知道。</td></tr><tr><td>依赖（Dependence）</td><td><img src="%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%A4%BA.png" alt></td><td><img src="%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt></td><td>A依赖于B</td><td>描述一个对象在运行期间会用到另一个对象的关系。<br> 应该保持单向依赖，杜绝双向依赖。</td></tr></tbody></table><p>首先，我们给出一张具有整体关系的 UML 类图，后面再逐步分解说明。</p><p><img src="UML%E7%B1%BB%E5%9B%BE%E6%95%B4%E4%BD%93%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><h4 id="泛化（Generalization）"><a href="#泛化（Generalization）" class="headerlink" title="泛化（Generalization）"></a>泛化（Generalization）</h4><p>泛化即 Java 中的继承关系，是类与类或者接口与接口之间最常见的关系。</p><p><img src="%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><p>两个子类 Fish 和 Cat 分别继承自 Animal。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> isPet;</span><br><span class="line"><span class="keyword">private</span> String state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String fishType;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> hasFeet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playToy</span><span class="params">(Doll doll)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现（Realization）"><a href="#实现（Realization）" class="headerlink" title="实现（Realization）"></a>实现（Realization）</h4><p>实现即 Java 中类对抽象类或接口的实现关系，是类与接口之间最常见的关系。</p><p><img src="%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ToyAction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toyMoved</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doll</span> <span class="keyword">implements</span> <span class="title">ToyAction</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> Body body;</span><br><span class="line"><span class="keyword">public</span> Cloth cloth;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toyMoved</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联（Association）"><a href="#关联（Association）" class="headerlink" title="关联（Association）"></a>关联（Association）</h4><p>关联关系是一种比较强的关系，他们的关系是比较持久的、稳定的，而且双方的关系一般是平等的，分单向关联、双向关联等。<br>表现在代码层面，就是类 B 作为类 A 的属性，也可能是类 A 引用了一个类型为 B 的全局变量。如 Person 类，他拥有一个宠物猫，他们之间是关联关系。</p><p><img src="%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Cat pet;</span><br><span class="line"><span class="keyword">public</span> Head head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) 单向关联<br>用带箭头的实线表示，箭头指向被引用或被包含的类。上面演示的就是一个单向关联关系。</p><p>(2) 双向关联<br>用不带箭头的实线来连接两个类，所谓的双向关联就是双方各自持有对方类型的成员变量。例如 Customer 类中维护一个 Product[] 数组，表示一个顾客购买了哪些商品；在 Product 类中维护一个 Customer 类型的成员变量表示这个产品被哪个顾客所购买。</p><p><img src="%E5%8F%8C%E5%90%91%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><p>(3) 自关联<br>系统中可能会存在一些类的属性对象类型为该类本身，例如二叉树中的 TreeNode 定义。</p><p><img src="%E8%87%AA%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><h4 id="依赖（Dependence）"><a href="#依赖（Dependence）" class="headerlink" title="依赖（Dependence）"></a>依赖（Dependence）</h4><p>就是一个类 A 使用到了另一个类 B ，这种使用关系是具有偶然性的、临时性的、非常弱的，但是类 B 的变化会影响到 A。<br>表现在代码层面，就是类 B 作为参数被类 A 在某个 method 方法中使用。如 Cat 类的 playToy 方法的参数就引用了 Doll 类，因此他们是依赖关系。</p><p><img src="%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><h4 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a>聚合（Aggregation）</h4><p>聚合关系强调的整体和部分、拥有的关系，即 has-a 的关系，其中部分可以脱离整体而存在，他们可以具有各自的生命周期。<br>如 Doll 类由 Body 和 Cloth 组成，即使失去了 Cloth，Doll 也可以正常存在。<br>表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</p><p><img src="%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cloth</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合（Composition）"><a href="#组合（Composition）" class="headerlink" title="组合（Composition）"></a>组合（Composition）</h4><p>组合关系也是强调整体和部分的关系，不同的是部分不能脱离整体而存在，它体现的是一种 contains-a 的关系，这种关系比聚合更强，也成为强聚合。<br>整体的生命周期结束也就意味着部分的生命周期结束，如人和大脑。<br>表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</p><p><img src="%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类关系强度：组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p><p>下面我们在 idea 中构建这几个类，将这几个放到同一 package 下，看下 idea 自动生成的UML类图：<br><img src="idea%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84UML%E7%B1%BB%E5%9B%BE.png" alt></p><p>和我们给出整体关系 UML 类图基本一致，区别是聚合关系和组合关系都是用实心菱形表示的。</p><h2 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h2><p>是类图的一个具体实例。</p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>从用户的角度出发描述系统的功能、需求，展示系统外部的各类角色与系统内部的各种用例之间的关系。</p><h2 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h2><p>表示对象之间动态合作的关系。</p><h2 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h2><p>描述对象之间的协作关系。</p><h2 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h2><p>描述系统中各种活动的执行顺序。</p><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><p>描述一类对象的所有可能的状态以及事件发生时状态的转移条件。</p><h2 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h2><p>定义系统中软硬件的物理体系结构。</p><h2 id="UML组件图"><a href="#UML组件图" class="headerlink" title="UML组件图"></a>UML组件图</h2><p>描述代码部件的物理结构以及各部件之间的依赖关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Java开发中的软技能之一，UML图。UML 即统一建模语言，它是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。&lt;br&gt;UML 展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。&lt;br&gt;我们知道开发一个软件系统，不光只有程序员参与，另外还有分析师、设计师、测试人员等等，为了让不同人能够理解交流这个软件系统，就诞生了这么一套语言。&lt;br&gt;这套语言是由图表组成的，最常用的有：用例图、类图、时序图、状态图、活动图、组件图和部署图等。大致可以将这些图归类为结构图和行为图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构图是静态图，如类图、对象图等&lt;/li&gt;
&lt;li&gt;行为图是动态图，像序列图、协作图等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink源码剖析-flink-annotations</title>
    <link href="http://yoursite.com/2020/04/13/Flink%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-flink-annotations/"/>
    <id>http://yoursite.com/2020/04/13/Flink源码剖析-flink-annotations/</id>
    <published>2020-04-13T04:05:32.000Z</published>
    <updated>2020-04-14T06:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将先介绍下java注解的实现，再说明下Flink自定义的几个注解及其使用。</p><a id="more"></a><h2 id="java注解"><a href="#java注解" class="headerlink" title="java注解"></a>java注解</h2><p>注解在一定程度上是在把元数据与源代码文件结合在一起，而不是保存在外部文档中这一大的趋势下所催生的。注解可以提供用来完整的描述程序所需的信息，而这些信息是无法用Java来表达的。<br>因此，注解存储有关程序的额外信息，是可以由编译器来测试和验证的。注解还可以用来生成描述符文件，甚至是新的类定义，并且有助于减轻编写“样板”代码的负担。通过使用注解，我们可以将这些元数据保存在Java源代码中，并利用 annotation API 为自己的注解构造处理工具，同时注解的优点还包括：更加干净易读的代码以及编译器类型检查等。</p><p>注解的使用场景：</p><ul><li>提供信息给编译器：编译器可以利用注解来探测错误和警告信息</li><li>编译阶段时的处理：软件工具可以利用注解信息来生成代码，HTML文档或其他相应处理</li><li>运行时的处理：某些注解可以在程序运行时接受代码的提取</li></ul><h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><ol><li><p>按运行机制划分<br>源码注解：只在源码中存在，编译成 .class 文件就不存在了<br>编译时注解：在源码和 .class 文件中都存在，像前面的 @Override、@Deprecated、@SuppressWarnings 都属于编译时注解<br>运行时注解：在运行阶段还有作用，甚至会影响运行逻辑，像 @Autowired 就属于运行时注解，它会在程序运行时把你的成员变量自动的注入进来</p></li><li><p>按来源划分<br>来自 JDK 的注解<br>来自第三方的注解<br>自定义注解</p></li><li><p>元注解</p></li></ol><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>负责注解的创建，是注解的注解。</p><p>元注解的类图关系如下：<br><img src="Annotation%E5%85%83%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9B%BE.png" alt></p><ol><li>@Target</li></ol><p>表示注解可以用在什么地方。ElementType可以是：</p><ul><li>TYPE：类，接口，枚举类上</li><li>FIELD：字段上，包括枚举实例</li><li>METHOD：方法上</li><li>PARAMETER：参数前</li><li>CONSTRUCTOR：构造函数上</li><li>LOCAL_VARIABLE：局部变量上</li><li>ANNOTATION_TYPE：注解类上</li><li>PACKAGE：包上</li><li>TYPE_PARAMETER：</li><li>TYPE_USE：<br>可以是某一个值或者以逗号分隔的形式指定多个值，如果想要将注解应用于所有的ElementType，也可以省去 @Target 元注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@Retention</li></ol><p>表示需要在什么级别上保留该注解信息。RetentionPolicy可以是：</p><ul><li>SOURCE：注解将被编译器丢弃</li><li>CLASS：注解在class中可用，但会被VM丢弃</li><li>RUNTIME：VM在运行期也将保留注解，因此可以通过反射机制读取注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@Documented</li></ol><p>将此注解中的元素包含到javadoc中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>@Inherited</li></ol><p>允许子类继承父类的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>@Repeatable</li></ol><p>注解的值可以是多个，元素是一个容器注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repeatable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates the &lt;em&gt;containing annotation type&lt;/em&gt; for the</span></span><br><span class="line"><span class="comment">     * repeatable annotation type.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the containing annotation type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Annotation&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解元素"><a href="#注解元素" class="headerlink" title="注解元素"></a>注解元素</h3><ol><li>基本语法</li></ol><p>使用 @interface 关键字定义注解，在注解上添加元注解。一般还要为注解添加元素，没有元素的注解称为标识注解。<br>注解只有成员变量，没有方法。注解的成员变量在注解的定义中以”无形参的方法”形式来声明，其方法名定义了该成员变量的名字，返回值定义了该成员变量的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> "Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注解元素可用的类型</li></ol><ul><li>所有基本类型（int,float,boolean等）</li><li>String</li><li>Class</li><li>enum</li><li>Annotation</li><li>以上类型的数组</li></ul><p>如果使用了其他类型，那编译器就会报错。也不允许使用任何包装类型。注解也可以作为元素的类型，也就是说注解可以嵌套。</p><ol start="3"><li>注解元素的默认值限制</li></ol><p>编译器对注解元素的默认值有些过分挑剔。首先，注解元素不能有不确定的值。也就是说，注解元素要么具有默认值，要么在使用注解时设置元素值。</p><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><p>所有的注解都继承自 java.lang.annotation.Annotation 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK 中有几种内置的注解：<br><img src="JDK%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3.png" alt></p><ol><li>@Override</li></ol><p>表示当前的方法定义将覆盖超类中的方法。如果不小心拼写错误或者方法签名对不上被覆盖的方法，编译器就会发出错误提示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> javac Override.java</span><br><span class="line"><span class="meta">$</span> javap -c Override.class</span><br></pre></td></tr></table></figure><p>得到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Compiled from &quot;Override.java&quot;</span><br><span class="line">public interface java.lang.Override extends java.lang.annotation.Annotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可以看出，注解的本质就是一个继承了 Annotation 接口的接口，是一种典型的标记式注解。<br>一旦编译器检测到某个方法被修饰了 @Override 注解，编译器就会检查当前方法的方法签名是否真正重写了父类的某个方法，也就是比较父类中是否具有一个同样的方法签名，如果没有，自然不能编译通过。<br>编译器只能识别已经熟知的注解类，比如 JDK 内置的几个注解，而我们自定义的注解，编译器是不会知道这个注解的作用的，当然也不知道应该如何处理。</p><ol start="2"><li>@Deprecated</li></ol><p>依然是一种标记式注解，永久存在，可以修饰所有类型，被标记的类、方法、字段等已经不再被推荐使用了，可能下一个版本就会删除。当然，编译器并不会强制要求你做什么，只是会在对象上画出一道线，建议你使用某个替代者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@SuppressWarnings</li></ol><p>抑制告警。它有一个 value 属性需要主动传值，传入需要被抑制的警告类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下 Date 的构造函数是过时的，在 main() 方法上加上 @SuppressWarning(value = “deprecated”) 注解后，编译器就不会再对这种告警进行检查了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarning</span>(value = <span class="string">"deprecated"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">11</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解的提取"><a href="#注解的提取" class="headerlink" title="注解的提取"></a>注解的提取</h3><p>解析一个类或方法的注解往往有两种形式：</p><ul><li>一种是编译期直接扫描：编译器在对java代码编译字节码的过程中会检测到某个类或方法被一些注解修饰，它就会对这些注解进行某些处理。</li><li>一种是运行期反射。</li></ul><p>上文中有创建注解 TestAnnotation ，下面我们来写一个注解的提取类 Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span>(<span class="string">"defaultValue"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注解通过反射获取，通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解</span></span><br><span class="line"><span class="keyword">boolean</span> hasAnnotation = Test.class.isAnnotationPresent(TestAnnotation.class);</span><br><span class="line"><span class="keyword">if</span> (hasAnnotation) &#123;</span><br><span class="line"><span class="comment">// 通过 getAnnotation() 方法来获取 Annotation 对象实例</span></span><br><span class="line">TestAnnotation testAnnotation = Test.class.getAnnotation(TestAnnotation.class);</span><br><span class="line">System.out.println(<span class="string">"id:"</span> + testAnnotation.id());</span><br><span class="line">System.out.println(<span class="string">"msg:"</span> + testAnnotation.msg());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们前面说过，注解本质上是继承了 Annotation 接口的接口，而当你通过反射，也就是 getAnnotation 方法去获取一个注解类实例的时候，其实 JDK 是通过动态代理生成了一个实现自定义注解（接口）的代理类。</p><p>运行 Test 类之前，先设置如下 VM 参数，让其生成代理类 class 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* jdk动态代理 设置此系统属性,让JVM生成的Proxy类写入文件.保存路径为：com/sun/proxy(如果不存在请手工创建) */</span><br><span class="line">-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</span><br><span class="line">/* cglib动态代理 设置此系统属性,让JVM生成的Proxy类写入文件.保存路径为：com/sun/proxy(如果不存在请手工创建) */</span><br><span class="line">-Dcglib.debugLocation=com/sun/proxy</span><br></pre></td></tr></table></figure><p>将生成的代理类 class 文件反编译成可视化文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ./com/sun/proxy</span><br><span class="line"><span class="meta">$</span> javap -c \$Proxy1.class &gt; Proxy1</span><br></pre></td></tr></table></figure><p>查看代理类内容，代理类实现接口 TestAnnotation 并重写其所有方法，包括id()、msg()、value()以及接口 TestAnnotation 从 Annotation 接口继承而来的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public final class com.sun.proxy.$Proxy1 extends java.lang.reflect.Proxy implements org.apache.flink.annotation.TestAnnotation &#123;</span><br><span class="line">  public com.sun.proxy.$Proxy1(java.lang.reflect.InvocationHandler) throws ;</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: aload_1</span><br><span class="line">       2: invokespecial #8                  // Method java/lang/reflect/Proxy.&quot;&lt;init&gt;&quot;:(Ljava/lang/reflect/InvocationHandler;)V</span><br><span class="line">       5: return</span><br><span class="line"></span><br><span class="line">  public final boolean equals(java.lang.Object) throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final java.lang.String toString() throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final java.lang.String msg() throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final java.lang.Class annotationType() throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final int id() throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final int hashCode() throws ;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  public final java.lang.String value() throws ;</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: getfield      #16                 // Field java/lang/reflect/Proxy.h:Ljava/lang/reflect/InvocationHandler;</span><br><span class="line">       4: aload_0</span><br><span class="line">       5: getstatic     #81                 // Field m3:Ljava/lang/reflect/Method;</span><br><span class="line">       8: aconst_null</span><br><span class="line">       9: invokeinterface #28,  4           // InterfaceMethod java/lang/reflect/InvocationHandler.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">      14: checkcast     #52                 // class java/lang/String</span><br><span class="line">      17: areturn</span><br><span class="line">      18: athrow</span><br><span class="line">      19: astore_1</span><br><span class="line">      20: new           #42                 // class java/lang/reflect/UndeclaredThrowableException</span><br><span class="line">      23: dup</span><br><span class="line">      24: aload_1</span><br><span class="line">      25: invokespecial #45                 // Method java/lang/reflect/UndeclaredThrowableException.&quot;&lt;init&gt;&quot;:(Ljava/lang/Throwable;)V</span><br><span class="line">      28: athrow</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           0    18    18   Class java/lang/Error</span><br><span class="line">           0    18    18   Class java/lang/RuntimeException</span><br><span class="line">           0    18    19   Class java/lang/Throwable</span><br><span class="line"></span><br><span class="line">  static &#123;&#125; throws ;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 InvocationHandler 指的就是 AnnotationInvocationHandler，它是 Java 中专门用于处理注解的 handler，下面就来让我们看看这个类的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解元素属性的键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类代理了 TestAnnotation 接口中的所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        String member = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="comment">// 如果当前调用的是 toString、equals、hashCode、annotationType。AnnotationInvocationHandler 实例中已经预定义好了这些方法的实现，直接调用即可。</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">"equals"</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">assert</span> paramTypes.length == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">"toString"</span>))</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">"hashCode"</span>))</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">"annotationType"</span>))</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="comment">// 从我们注解的 map 中获取这个注解属性对应的值，即通过方法名返回注解属性值。</span></span><br><span class="line">        Object result = memberValues.get(member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(type, member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">            <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">            result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ol><li>可重复注解</li></ol><p>创建容器注解 Persons，容器注解本身也是一个注解，是用来存放其他注解的地方。它必须要有一个 value 属性，属性类型是一个被 @Repeatable 注解过的注解数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Persons &#123;</span><br><span class="line">Person[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 @Repeatable 注解了 Person，而 @Repeatable 后面括号中的类是一个容器注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable</span>(Persons.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Person &#123;</span><br><span class="line"><span class="function">String <span class="title">role</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 Superman 这个类贴上多个角色标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Person</span>(role=<span class="string">"Painter"</span>)</span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"Musician"</span>)</span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"Actor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Superman</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>测试用例注解<br>实现一个注解，用来跟踪一个项目中的用例。如果一个方法实现了某个用例的需求，那么可以为此方法加上该注解。于是，项目经理通过计算已经实现的用例，就可以很好的掌控项目的进展。而且把实现方法和用例绑定，如果要更新或修改系统的业务逻辑，维护该项目的开发人员也可以很容易的在代码中找到对应的用例。</li></ol><p>定义 UseCase 注解，id 表示用例编号，description 设置了默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UseCase &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用例id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用例描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义需求实现类 PasswordUtils，每一个方法都对应一个需求用例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UseCase</span>(id = <span class="number">47</span> , description = <span class="string">"Passwords must contain at least one numeric"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validatePassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password.matches(<span class="string">"\\w*\\d\\w*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@UseCase</span>(id = <span class="number">48</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryptPassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(password).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UseCase</span>(id = <span class="number">49</span>,description = <span class="string">"New passwords can't equal previously used ones"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkForNewPassword</span><span class="params">(List&lt;String&gt; prevPasswords, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !prevPasswords.contains(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有用来读取注解的工具，那注解也不会比注释更有用。使用注解的过程中，很重要的一部分就是创建与使用注解处理器。<br>下面实现了一个非常简单的注解处理器 UseCaseTracker ，将用它来读取 PasswordUtils 类，并使用反射机制查找 @UseCase 注解。<br>我们提供了一组 id 值，然后它会列出在 PasswordUtils 中找到的用例，以及缺失的用例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseCaseTracker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trackUseCases</span><span class="params">(List&lt;Integer&gt; useCases, Class&lt;?&gt; cl)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Method m : cl.getDeclaredMethods()) &#123;</span><br><span class="line"><span class="comment">// 返回指定类型的注解对象</span></span><br><span class="line">UseCase uc = m.getAnnotation(UseCase.class);</span><br><span class="line"><span class="keyword">if</span> (uc != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Found Use Case: "</span> + uc.id() + <span class="string">" "</span> + uc.description());</span><br><span class="line">useCases.remove(<span class="keyword">new</span> Integer(uc.id()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Integer i : useCases) &#123;</span><br><span class="line">System.out.println(<span class="string">"Warning: Missing use case-"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; useCases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(useCases, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>);</span><br><span class="line">trackUseCases(useCases, PasswordUtils.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Found Use Case: 47 Passwords must contain at least one numeric</span><br><span class="line">Found Use Case: 48 no description</span><br><span class="line">Found Use Case: 49 New passwords can&apos;t equal previously used ones</span><br><span class="line">Warning: Missing use case-50</span><br></pre></td></tr></table></figure><ol start="3"><li>利用注解生成SQL语句</li></ol><p>定义表名注解，它告诉处理器，你需要把我这个类生成一个数据库 DDL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DBTable &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库表表名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义数据库表字段约束的注解：是否为主键，是否可以为空，唯一性约束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Constraints &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">primaryKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">allowNull</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unique</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义表字段类型为 String 的注解：字符串长度，字段名， 字段约束。这里的字段约束就用到了嵌套注解的语法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value = ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SQLString &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">Constraints <span class="title">constraints</span><span class="params">()</span> <span class="keyword">default</span> @Constraints</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义表字段类型为 Integer 的注解：字段名，字段约束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SQLInteger &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">Constraints <span class="title">constraints</span><span class="params">()</span> <span class="keyword">default</span> @Constraints</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个 Member 类，应用了以上定义的注解。类的注解 @DBTable 给定了值 MEMBER，它将会用来作为表的名字。字段属性 firstName 和 lastName 都被注解为 @SQLString 类型，并分别设置了长度为 30 和 50。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DBTable</span>(name = <span class="string">"MEMBER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SQLString</span>(len = <span class="number">30</span>)</span><br><span class="line">String firstName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SQLString</span>(len = <span class="number">50</span>)</span><br><span class="line">String lastName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SQLInteger</span></span><br><span class="line">Integer age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SQLString</span>(len = <span class="number">30</span>, constraints = <span class="meta">@Constraints</span>(primaryKey = <span class="keyword">true</span>))</span><br><span class="line">String handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> memberCount;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现处理器 TableCreator ，它将读取一个类文件，检查其上的数据库表注解，并生成用来创建数据库表的 SQL 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">String className = Member.class.getName();</span><br><span class="line">Class&lt;?&gt; cl = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查类上是否带有 @DBTable 注解</span></span><br><span class="line">DBTable dbtable = cl.getAnnotation(DBTable.class);</span><br><span class="line"><span class="keyword">if</span> (dbtable == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"No DbTable annotations in class "</span> + className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取 @DBTable 注解的 name</span></span><br><span class="line">String tableName = dbtable.name();</span><br><span class="line"><span class="comment">// If the name is empty , use the Class name:</span></span><br><span class="line"><span class="keyword">if</span> (tableName.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">tableName = cl.getName().toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; columnDefs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 遍历 Member 类的所有字段</span></span><br><span class="line"><span class="keyword">for</span> (Field field : cl.getDeclaredFields()) &#123;</span><br><span class="line">String columnName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段属性上的所有注解</span></span><br><span class="line">Annotation[] annotations = field.getDeclaredAnnotations();</span><br><span class="line"><span class="keyword">if</span> (annotations.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">// Not a db table column</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (annotations[<span class="number">0</span>] <span class="keyword">instanceof</span> SQLInteger) &#123;</span><br><span class="line"><span class="comment">// 处理 @SQLInteger 注解的属性字段</span></span><br><span class="line">SQLInteger sInt = (SQLInteger) annotations[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// Use field name if name not specified</span></span><br><span class="line"><span class="keyword">if</span> (sInt.name().length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">columnName = field.getName().toUpperCase();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">columnName = sInt.name();</span><br><span class="line">&#125;</span><br><span class="line">columnDefs.add(columnName + <span class="string">" INT"</span> + getConstraints(sInt.constraints()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (annotations[<span class="number">0</span>] <span class="keyword">instanceof</span> SQLString) &#123;</span><br><span class="line"><span class="comment">// 处理 @SQLString 注解的属性字段</span></span><br><span class="line">SQLString sString = (SQLString) annotations[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// Use field name if name not specified.</span></span><br><span class="line"><span class="keyword">if</span> (sString.name().length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">columnName = field.getName().toUpperCase();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">columnName = sString.name();</span><br><span class="line">&#125;</span><br><span class="line">columnDefs.add(columnName + <span class="string">" VARCHAR("</span> + sString.len() + <span class="string">")"</span> + getConstraints(sString.constraints()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder createCommand = <span class="keyword">new</span> StringBuilder(<span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span>);</span><br><span class="line"><span class="keyword">for</span> (String columnDef : columnDefs) &#123;</span><br><span class="line">createCommand.append(<span class="string">"\n    "</span> + columnDef + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Remove trailing comma</span></span><br><span class="line">String tableCreate = createCommand.substring(<span class="number">0</span>, (createCommand.length() - <span class="number">1</span>)) + <span class="string">");"</span>;</span><br><span class="line">System.out.println(<span class="string">"Table.Creation SQL for "</span> + className + <span class="string">" is :\n "</span> + tableCreate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConstraints</span><span class="params">(Constraints con)</span> </span>&#123;</span><br><span class="line">String constraints = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (!con.allowNull()) &#123;</span><br><span class="line">constraints += <span class="string">" NOT NULL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (con.primaryKey()) &#123;</span><br><span class="line">constraints += <span class="string">" PRIMARY KEY"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (con.unique()) &#123;</span><br><span class="line">constraints += <span class="string">" UNIQUE"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> constraints;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table.Creation SQL for org.apache.flink.annotation.dbtable.Member is :</span><br><span class="line"> CREATE TABLE MEMBER(</span><br><span class="line">    FIRSTNAME VARCHAR(30),</span><br><span class="line">    LASTNAME VARCHAR(50),</span><br><span class="line">    AGE INT,</span><br><span class="line">    HANDLE VARCHAR(30) PRIMARY KEY);</span><br></pre></td></tr></table></figure><h2 id="flink中的注解"><a href="#flink中的注解" class="headerlink" title="flink中的注解"></a>flink中的注解</h2><p><img src="flink%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3.png" alt></p><h3 id="docs相关注解"><a href="#docs相关注解" class="headerlink" title="docs相关注解"></a>docs相关注解</h3><ol><li>@ConfigGroup</li></ol><p>指定一组配置选项，组的名称将用作生成 HTML 文件名，keyPrefix 用于匹配配置项名称前缀。<br>如 @ConfigGroup(name = “firstGroup”, keyPrefix = “first”)，生成的 HTML 文件名为 firstGroup ，其中的配置项名称都是以 first 开头的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;&#125;)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigGroup &#123;</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">keyPrefix</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@ConfigGroups</li></ol><p>允许一个配置类中的配置项可以按照配置项名称前缀分成不同的组，生成多个 HTML 文件。<br>如：<br>@ConfigGroups(groups = {<br>        @ConfigGroup(name = “firstGroup”, keyPrefix = “first”),<br>        @ConfigGroup(name = “secondGroup”, keyPrefix = “second”)})<br>可以从配置类生成 3 个 HTML 文件，分别为 firstGroup、secondGroup、default，具体可以接着往下看，下面会有示例说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigGroups &#123;</span><br><span class="line">ConfigGroup[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个示例来说明这两个注解的用途。<br>查看测试类 ConfigOptionsDocGeneratorTest 中应用到 @ConfigGroups 和 @ConfigGroup 的单测 <code>testCreatingMultipleGroups</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreatingMultipleGroups</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Tuple2&lt;ConfigGroup, String&gt;&gt; tables = ConfigOptionsDocGenerator.generateTablesForClass(</span><br><span class="line">TestConfigMultipleSubGroup.class);</span><br><span class="line"></span><br><span class="line">assertEquals(tables.size(), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">final</span> HashMap&lt;String, String&gt; tablesConverted = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Tuple2&lt;ConfigGroup, String&gt; table : tables) &#123;</span><br><span class="line">tablesConverted.put(table.f0 != <span class="keyword">null</span> ? table.f0.name() : <span class="string">"default"</span>, table.f1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestConfigMultipleSubGroup</code> 类 mock 了一个配置项类：<br>@ConfigGroup(name = “firstGroup”, keyPrefix = “first”) 将 key 以 first 开头的 ConfigOption 归为 firstGroup，<br>@ConfigGroup(name = “secondGroup”, keyPrefix = “second”) 将 key 以 second 开头的 ConfigOption 归为 secondGroup。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigGroups</span>(groups = &#123;</span><br><span class="line"><span class="meta">@ConfigGroup</span>(name = <span class="string">"firstGroup"</span>, keyPrefix = <span class="string">"first"</span>),</span><br><span class="line"><span class="meta">@ConfigGroup</span>(name = <span class="string">"secondGroup"</span>, keyPrefix = <span class="string">"second"</span>)&#125;)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfigMultipleSubGroup</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;Integer&gt; firstOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"first.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">2</span>)</span><br><span class="line">.withDescription(<span class="string">"This is example description for the first option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;String&gt; secondOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"second.option.a"</span>)</span><br><span class="line">.noDefaultValue()</span><br><span class="line">.withDescription(<span class="string">"This is long example description for the second option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;Integer&gt; thirdOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"third.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">2</span>)</span><br><span class="line">.withDescription(<span class="string">"This is example description for the third option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;String&gt; fourthOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"fourth.option.a"</span>)</span><br><span class="line">.noDefaultValue()</span><br><span class="line">.withDescription(<span class="string">"This is long example description for the fourth option."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再看下 <code>ConfigOptionsDocGenerator.generateTablesForClass(Class&lt;?&gt; optionsClass)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Tuple2&lt;ConfigGroup, String&gt;&gt; generateTablesForClass(Class&lt;?&gt; optionsClass) &#123;</span><br><span class="line"><span class="comment">// 获取 optionsClass 类上定义的 @ConfigGroups</span></span><br><span class="line">ConfigGroups configGroups = optionsClass.getAnnotation(ConfigGroups.class);</span><br><span class="line"><span class="comment">// 抽取 optionsClass 中的所有 ConfigOption 配置项</span></span><br><span class="line">List&lt;OptionWithMetaInfo&gt; allOptions = extractConfigOptions(optionsClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 @ConfigGroups 注解中的 ConfigGroup[] groups()</span></span><br><span class="line">List&lt;Tuple2&lt;ConfigGroup, String&gt;&gt; tables;</span><br><span class="line"><span class="keyword">if</span> (configGroups != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 解析 optionsClass 上的 ConfigGroup 注解，即是有分组的。另外一个是默认的 ConfigGroup</span></span><br><span class="line">tables = <span class="keyword">new</span> ArrayList&lt;&gt;(configGroups.groups().length + <span class="number">1</span>);</span><br><span class="line">Tree tree = <span class="keyword">new</span> Tree(configGroups.groups(), allOptions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ConfigGroup group : configGroups.groups()) &#123;</span><br><span class="line">List&lt;OptionWithMetaInfo&gt; configOptions = tree.findConfigOptions(group);</span><br><span class="line"><span class="comment">// 按照 ConfigOption 的 key 进行排序</span></span><br><span class="line"> sortOptions(configOptions);</span><br><span class="line">tables.add(Tuple2.of(group, toHtmlTable(configOptions)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有 @ConfigGroup 前缀都匹配不上的其他 ConfigOption 归为 default 组</span></span><br><span class="line">List&lt;OptionWithMetaInfo&gt; configOptions = tree.getDefaultOptions();</span><br><span class="line">sortOptions(configOptions);</span><br><span class="line">tables.add(Tuple2.of(<span class="keyword">null</span>, toHtmlTable(configOptions)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sortOptions(allOptions);</span><br><span class="line">tables = Collections.singletonList(Tuple2.of(<span class="keyword">null</span>, toHtmlTable(allOptions)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tables;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行单测 <code>testCreatingMultipleGroups</code> 的输出结果如下：<br>firstGroup 配置项组里的配置项名称都是以 first 为前缀的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>first.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is example description for the first option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>secondGroup 配置项组里的配置项名称都是以 second 为前缀的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>second.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>(none)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>String<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is long example description for the second option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TestConfigMultipleSubGroup 中的其他配置项都是没有分组的，默认都放到 default 组中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>fourth.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>(none)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>String<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is long example description for the fourth option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>third.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is example description for the third option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Documentation 类中定义了修改文档生成器行为的注解结合，包括 @OverrideDefault、@CommonOption、@TableOption、@ExcludeFromDocumentation。下面依次介绍。</p><ol start="3"><li>@Documentation.OverrideDefault</li></ol><p>作用在 ConfigOption 上的注解，覆盖其默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OverrideDefault &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个示例来说明这个注解的用途。<br>查看测试类 ConfigOptionsDocGeneratorTest 中应用到 @Documentation.OverrideDefault 的单测 <code>testOverrideDefault</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOverrideDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String htmlTable = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigGroupWithOverriddenDefault.class).get(<span class="number">0</span>).f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestConfigGroupWithOverriddenDefault</code> 类 mock 了一个配置项类，每个配置项都使用了 @Documentation.OverrideDefault 注解覆盖配置项的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfigGroupWithOverriddenDefault</span> </span>&#123;</span><br><span class="line"><span class="meta">@Documentation</span>.OverrideDefault(<span class="string">"default_1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;Integer&gt; firstOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"first.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">2</span>)</span><br><span class="line">.withDescription(<span class="string">"This is example description for the first option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documentation</span>.OverrideDefault(<span class="string">"default_2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;String&gt; secondOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"second.option.a"</span>)</span><br><span class="line">.noDefaultValue()</span><br><span class="line">.withDescription(<span class="string">"This is long example description for the second option."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行单测 <code>testOverrideDefault</code> 的输出结果如下：<br>将 firstOption 的默认值覆盖成了 default_1，secondOption 原先没有默认值，被设置成了 default_2。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>first.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>default_1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is example description for the first option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>second.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>default_2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>String<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is long example description for the second option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>@Documentation.CommonOption</li></ol><p>作用在 ConfigOption 上的注解，使其包含在 “Common Options” 片段中，<br>按 position 值排序，position 值小的配置项排在前面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CommonOption &#123;</span><br><span class="line"><span class="keyword">int</span> POSITION_MEMORY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> POSITION_PARALLELISM_SLOTS = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> POSITION_FAULT_TOLERANCE = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> POSITION_HIGH_AVAILABILITY = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> POSITION_SECURITY = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">position</span><span class="params">()</span> <span class="keyword">default</span> Integer.MAX_VALUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个示例来说明这个注解的用途。<br>查看测试类 ConfigOptionsDocGeneratorTest 中应用到 @Documentation.CommonOption 的单测 <code>testCommonOptions</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCommonOptions</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String projectRootDir = System.getProperty(<span class="string">"rootDir"</span>);</span><br><span class="line"><span class="keyword">final</span> String outputDirectory = TMP.newFolder().getAbsolutePath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> OptionsClassLocation[] locations = <span class="keyword">new</span> OptionsClassLocation[] &#123;</span><br><span class="line"><span class="keyword">new</span> OptionsClassLocation(<span class="string">"flink-docs"</span>, TestCommonOptions.class.getPackage().getName())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ConfigOptionsDocGenerator.generateCommonSection(projectRootDir, outputDirectory, locations, <span class="string">"src/test/java"</span>);</span><br><span class="line">Formatter formatter = <span class="keyword">new</span> HtmlFormatter();</span><br><span class="line">String output = FileUtils.readFile(Paths.get(outputDirectory, ConfigOptionsDocGenerator.COMMON_SECTION_FILE_NAME).toFile(), StandardCharsets.UTF_8.name());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestCommonOptions</code> 类 mock 了一个配置项类：<br>COMMON_OPTION 使用了 @Documentation.CommonOption 注解，position 使用默认值为 Integer.MAX_VALUE，<br>COMMON_POSITIONED_OPTION 也是用了 @Documentation.CommonOption 注解，position 值指定为2，这个配置项肯定排在 COMMON_OPTION 前面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCommonOptions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documentation</span>.CommonOption</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ConfigOption&lt;Integer&gt; COMMON_OPTION = ConfigOptions</span><br><span class="line">.key(<span class="string">"first.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">2</span>)</span><br><span class="line">.withDescription(<span class="string">"This is the description for the common option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ConfigOption&lt;String&gt; GENERIC_OPTION = ConfigOptions</span><br><span class="line">.key(<span class="string">"second.option.a"</span>)</span><br><span class="line">.noDefaultValue()</span><br><span class="line">.withDescription(<span class="string">"This is the description for the generic option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documentation</span>.CommonOption(position = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ConfigOption&lt;Integer&gt; COMMON_POSITIONED_OPTION = ConfigOptions</span><br><span class="line">.key(<span class="string">"third.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">3</span>)</span><br><span class="line">.withDescription(<span class="string">"This is the description for the positioned common option."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行单测 <code>testCommonOptions</code> 的输出结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>third.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is the description for the positioned common option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>first.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is the description for the common option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>@Documentation.TableOption</li></ol><p>作用于 table 配置项上，用于添加元数据标签，配置执行模式（批处理、流式处理、两者兼有）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableOption &#123;</span><br><span class="line"><span class="function">ExecMode <span class="title">execMode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看下 <code>ConfigOptionsDocGenerator</code> 类中的 toHtmlString 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHtmlString</span><span class="params">(<span class="keyword">final</span> OptionWithMetaInfo optionWithMetaInfo)</span> </span>&#123;</span><br><span class="line">ConfigOption&lt;?&gt; option = optionWithMetaInfo.option;</span><br><span class="line">String defaultValue = stringifyDefault(optionWithMetaInfo);</span><br><span class="line">String type = typeToHtml(optionWithMetaInfo);</span><br><span class="line">Documentation.TableOption tableOption = optionWithMetaInfo.field.getAnnotation(Documentation.TableOption.class);</span><br><span class="line">StringBuilder execModeStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">if</span> (tableOption != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果 ConfigOption 上有 @Documentation.TableOption 注解，则读取它的 execMode 字段，拼接到 html 内容中。</span></span><br><span class="line">Documentation.ExecMode execMode = tableOption.execMode();</span><br><span class="line"><span class="keyword">if</span> (Documentation.ExecMode.BATCH_STREAMING.equals(execMode)) &#123;</span><br><span class="line">execModeStringBuilder.append(<span class="string">"&lt;br&gt; &lt;span class=\"label label-primary\"&gt;"</span>)</span><br><span class="line">.append(Documentation.ExecMode.BATCH.toString())</span><br><span class="line">.append(<span class="string">"&lt;/span&gt; &lt;span class=\"label label-primary\"&gt;"</span>)</span><br><span class="line">.append(Documentation.ExecMode.STREAMING.toString())</span><br><span class="line">.append(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">execModeStringBuilder.append(<span class="string">"&lt;br&gt; &lt;span class=\"label label-primary\"&gt;"</span>)</span><br><span class="line">.append(execMode.toString())</span><br><span class="line">.append(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span> +</span><br><span class="line"><span class="string">"        &lt;tr&gt;\n"</span> +</span><br><span class="line"><span class="string">"            &lt;td&gt;&lt;h5&gt;"</span> + escapeCharacters(option.key()) + <span class="string">"&lt;/h5&gt;"</span> + execModeStringBuilder.toString() + <span class="string">"&lt;/td&gt;\n"</span> +</span><br><span class="line"><span class="string">"            &lt;td style=\"word-wrap: break-word;\"&gt;"</span> + escapeCharacters(addWordBreakOpportunities(defaultValue)) + <span class="string">"&lt;/td&gt;\n"</span> +</span><br><span class="line"><span class="string">"            &lt;td&gt;"</span> + type + <span class="string">"&lt;/td&gt;\n"</span> +</span><br><span class="line"><span class="string">"            &lt;td&gt;"</span> + formatter.format(option.description()) + <span class="string">"&lt;/td&gt;\n"</span> +</span><br><span class="line"><span class="string">"        &lt;/tr&gt;\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>@Documentation.ExcludeFromDocumentation</li></ol><p>作用于 ConfigOption 配置项，用于从最终生成的 HTML 文档中移除配置项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExcludeFromDocumentation &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The optional reason why the config option is excluded from documentation.</span></span><br><span class="line"><span class="comment"> * 解释下从文档中移除配置项的原因</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个示例来说明这个注解的用途。<br>查看测试类 ConfigOptionsDocGeneratorTest 中应用到 @Documentation.ExcludeFromDocumentation 的单测 <code>testConfigOptionExclusion</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigOptionExclusion</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String htmlTable = ConfigOptionsDocGenerator.generateTablesForClass(TestConfigGroupWithExclusion.class).get(<span class="number">0</span>).f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestConfigGroupWithExclusion</code> 类 mock 了一个配置项类：<br>excludedOption 使用了 @Documentation.ExcludeFromDocumentation 注解，在生成的 HTML 文档中它将被移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfigGroupWithExclusion</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;Integer&gt; firstOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"first.option.a"</span>)</span><br><span class="line">.defaultValue(<span class="number">2</span>)</span><br><span class="line">.withDescription(<span class="string">"This is example description for the first option."</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documentation</span>.ExcludeFromDocumentation</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigOption&lt;String&gt; excludedOption = ConfigOptions</span><br><span class="line">.key(<span class="string">"excluded.option.a"</span>)</span><br><span class="line">.noDefaultValue()</span><br><span class="line">.withDescription(<span class="string">"This should not be documented."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行单测 <code>testConfigOptionExclusion</code> 的输出结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 20%"</span>&gt;</span>Key<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 15%"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 10%"</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span> <span class="attr">style</span>=<span class="string">"width: 55%"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>first.option.a<span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"word-wrap: break-word;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Integer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>This is example description for the first option.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他标记注解"><a href="#其他标记注解" class="headerlink" title="其他标记注解"></a>其他标记注解</h3><p>关于这几种标记注解，源码中暂时还没有找到相关测试用例，后续补充。</p><ol><li>@Experimental</li></ol><p>表示标记对象是试验使用的注解，带有此注解的类是没有经过严格测试和不稳定的，可能在以后的版本中被修改或移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR &#125;)</span><br><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Experimental &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@Internal</li></ol><p>将稳定的公共的api注解为内部开发者api，内部开发者api是稳定的，面向Flink内部，可能随着版本变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR &#125;)</span><br><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Internal &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@Public</li></ol><p>标注类为开放的，稳定的。<br>类、方法、属性被这个这个注解修饰时，表示在小版本迭代(1.0,1.1,1.2)中，都维持稳定，应用程序将根据同一大版本进行编译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Public &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>@PublicEvolving</li></ol><p>带有此注解的类和方法用于公共使用，并且具有稳定的行为。但是，它们的接口和签名不被认为是稳定的，并且当跨版本时可能会变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR &#125;)</span><br><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PublicEvolving &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>@VisibleForTesting</li></ol><p>标注有些方法、属性、构造函数、类等在 test 阶段可见，用于测试。<br>例如，当方法是 private 的，不打算在外部去调用的，但是有些内部测试需要访问它，所以加上 VisibleForTesting 注解进行内部测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR &#125;)</span><br><span class="line"><span class="meta">@Internal</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> VisibleForTesting &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将先介绍下java注解的实现，再说明下Flink自定义的几个注解及其使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink源码剖析-flink-metrics</title>
    <link href="http://yoursite.com/2020/04/05/Flink%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-Flink-Metrics/"/>
    <id>http://yoursite.com/2020/04/05/Flink源码剖析-Flink-Metrics/</id>
    <published>2020-04-04T18:31:00.000Z</published>
    <updated>2020-04-14T08:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将详细介绍下Flink中的指标实现，包括自带的指标名和如何自定义指标。还会介绍下现在已经支持的reporter，如jmx、slf4j、influxdb、graphite、prometheus、pushgateway等。<br>最后介绍下flink指标平台化实践。</p><a id="more"></a><h2 id="flink-metrics-core"><a href="#flink-metrics-core" class="headerlink" title="flink-metrics-core"></a>flink-metrics-core</h2><ul><li>Metric：<br><img src="Metric%E7%B1%BB%E5%9B%BE.png" alt></li></ul><p>指标类型有Gauge、Count、Meter、Histogram。</p><ul><li><p>MetricConfig：<br><img src="MetricConfig%E7%B1%BB%E5%9B%BE.png" alt></p></li><li><p>MetricGroup：<br><img src="MetricGroup%E7%B1%BB%E5%9B%BE.png" alt></p></li></ul><p>Metric 在 flink 内部以 Group 的方式组织，有多层结构，Metric Group + Metric Name 是 Metric 的唯一标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskManagerMetricGroup</span><br><span class="line">    •TaskManagerJobMetricGroup</span><br><span class="line">        •TaskMetricGroup</span><br><span class="line">            •TaskIOMetricGroup</span><br><span class="line">            •OperatorMetricGroup</span><br><span class="line">                •$&#123;User-defined Group&#125; / $&#123;User-defined Metrics&#125;</span><br><span class="line">                •OperatorIOMetricGroup</span><br><span class="line">•JobManagerMetricGroup</span><br><span class="line">    •JobManagerJobMetricGroup</span><br></pre></td></tr></table></figure><p>可以根据需要埋点自定义指标。</p><ul><li><p>添加一个统计脏数据的指标，指标名为flink_taskmanager_job_task_operator_dtDirtyData ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 RichFunction 中 getRuntimeContext() </span></span><br><span class="line">dirtyDataCounter = runtimeContext.getMetricGroup().counter(MetricConstant.DT_DIRTY_DATA_COUNTER);</span><br></pre></td></tr></table></figure></li><li><p>添加一个消费延迟指标，自定了两层Group，分别是topic、partition，指标名为flink_taskmanager_job_task_operator_topic_partition_dtTopicPartitionLag ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(TopicPartition topicPartition : assignedPartitions)&#123;</span><br><span class="line">    MetricGroup metricGroup = getRuntimeContext().getMetricGroup().addGroup(DT_TOPIC_GROUP, topicPartition.topic())</span><br><span class="line">                    .addGroup(DT_PARTITION_GROUP, String.valueOf(topicPartition.partition()));</span><br><span class="line">    metricGroup.gauge(DT_TOPIC_PARTITION_LAG_GAUGE, <span class="keyword">new</span> KafkaTopicPartitionLagMetric(subscriptionState, topicPartition));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MetricReporter：<br><img src="MetricReporter%E7%B1%BB%E5%9B%BE.png" alt><br>flink 内置了多种指标 reporter ，如jmx、slf4j、graphite、prometheus、influxdb、statsd、datadog等。</p></li></ul><h2 id="指标-Reporters"><a href="#指标-Reporters" class="headerlink" title="指标 Reporters"></a>指标 Reporters</h2><h3 id="flink-metrics-dropwizard"><a href="#flink-metrics-dropwizard" class="headerlink" title="flink-metrics-dropwizard"></a>flink-metrics-dropwizard</h3><p>只是将flink内部定义的指标<code>org.apache.flink.metrics.Metric</code>和dropwizard中定义的指标<code>com.codahale.metrics.Metric</code>接口和子类互相包装转换。<br>并且实现了 ScheduledDropwizardReporter ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_HOST = <span class="string">"host"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PORT = <span class="string">"port"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PREFIX = <span class="string">"prefix"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_CONVERSION_RATE = <span class="string">"rateConversion"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_CONVERSION_DURATION = <span class="string">"durationConversion"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dropwizard 包中的 MetricRegistry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> MetricRegistry registry;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dropwizard 包中的 ScheduledReporter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> ScheduledReporter reporter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Gauge&lt;?&gt;, String&gt; gauges = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Counter, String&gt; counters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Histogram, String&gt; histograms = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Meter, String&gt; meters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加指标，添加指标，需要将flink内部的Metric转换成dropwizard中的Metric，</span></span><br><span class="line"><span class="comment"> * 再注册到 dropwizard 的 MetricRegistry 中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyOfAddedMetric</span><span class="params">(Metric metric, String metricName, MetricGroup group)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String fullName = group.getMetricIdentifier(metricName, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Counter) &#123;</span><br><span class="line">counters.put((Counter) metric, fullName);</span><br><span class="line">registry.register(fullName, <span class="keyword">new</span> FlinkCounterWrapper((Counter) metric));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Gauge) &#123;</span><br><span class="line">gauges.put((Gauge&lt;?&gt;) metric, fullName);</span><br><span class="line">registry.register(fullName, FlinkGaugeWrapper.fromGauge((Gauge&lt;?&gt;) metric));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Histogram) &#123;</span><br><span class="line">Histogram histogram = (Histogram) metric;</span><br><span class="line">histograms.put(histogram, fullName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (histogram <span class="keyword">instanceof</span> DropwizardHistogramWrapper) &#123;</span><br><span class="line">registry.register(fullName, ((DropwizardHistogramWrapper) histogram).getDropwizardHistogram());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">registry.register(fullName, <span class="keyword">new</span> FlinkHistogramWrapper(histogram));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Meter) &#123;</span><br><span class="line">Meter meter = (Meter) metric;</span><br><span class="line">meters.put(meter, fullName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (meter <span class="keyword">instanceof</span> DropwizardMeterWrapper) &#123;</span><br><span class="line">registry.register(fullName, ((DropwizardMeterWrapper) meter).getDropwizardMeter());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">registry.register(fullName, <span class="keyword">new</span> FlinkMeterWrapper(meter));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">"Cannot add metric of type &#123;&#125;. This indicates that the reporter "</span> +</span><br><span class="line"><span class="string">"does not support this metric type."</span>, metric.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * report 时直接从 dropwizard 的 MetricRegistry 中捞取所有指标，执行 ScheduledReporter 的 report 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// we do not need to lock here, because the dropwizard registry is</span></span><br><span class="line"><span class="comment">// internally a concurrent map</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">final</span> SortedMap&lt;String, com.codahale.metrics.Gauge&gt; gauges = registry.getGauges();</span><br><span class="line"><span class="keyword">final</span> SortedMap&lt;String, com.codahale.metrics.Counter&gt; counters = registry.getCounters();</span><br><span class="line"><span class="keyword">final</span> SortedMap&lt;String, com.codahale.metrics.Histogram&gt; histograms = registry.getHistograms();</span><br><span class="line"><span class="keyword">final</span> SortedMap&lt;String, com.codahale.metrics.Meter&gt; meters = registry.getMeters();</span><br><span class="line"><span class="keyword">final</span> SortedMap&lt;String, com.codahale.metrics.Timer&gt; timers = registry.getTimers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.reporter.report(gauges, counters, histograms, meters, timers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ScheduledReporter <span class="title">getReporter</span><span class="params">(MetricConfig config)</span></span>;</span><br></pre></td></tr></table></figure><p>只有<code>flink-metrics-graphite</code>模块会引用这个模块，直接复用 dropwizard 包提供的 GraphiteReporter 功能。</p><h3 id="flink-metrics-graphite"><a href="#flink-metrics-graphite" class="headerlink" title="flink-metrics-graphite"></a>flink-metrics-graphite</h3><p>GraphiteReporter 继承了 flink-metrics-dropwizard 模块中的 ScheduledDropwizardReporter。<br>只需要实现其中的 getReporter() 抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ScheduledReporter <span class="title">getReporter</span><span class="params">(MetricConfig config)</span> </span>&#123;</span><br><span class="line">String host = config.getString(ARG_HOST, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">int</span> port = config.getInteger(ARG_PORT, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (host == <span class="keyword">null</span> || host.length() == <span class="number">0</span> || port &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid host/port configuration. Host: "</span> + host + <span class="string">" Port: "</span> + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String prefix = config.getString(ARG_PREFIX, <span class="keyword">null</span>);</span><br><span class="line">String conversionRate = config.getString(ARG_CONVERSION_RATE, <span class="keyword">null</span>);</span><br><span class="line">String conversionDuration = config.getString(ARG_CONVERSION_DURATION, <span class="keyword">null</span>);</span><br><span class="line">String protocol = config.getString(ARG_PROTOCOL, <span class="string">"TCP"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用 dropwizard 包提供的 GraphiteReporter</span></span><br><span class="line">com.codahale.metrics.graphite.GraphiteReporter.Builder builder =</span><br><span class="line">com.codahale.metrics.graphite.GraphiteReporter.forRegistry(registry);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.prefixedWith(prefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conversionRate != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.convertRatesTo(TimeUnit.valueOf(conversionRate));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conversionDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.convertDurationsTo(TimeUnit.valueOf(conversionDuration));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Protocol prot;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">prot = Protocol.valueOf(protocol);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">log.warn(<span class="string">"Invalid protocol configuration: "</span> + protocol + <span class="string">" Expected: TCP or UDP, defaulting to TCP."</span>);</span><br><span class="line">prot = Protocol.TCP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Configured GraphiteReporter with &#123;host:&#123;&#125;, port:&#123;&#125;, protocol:&#123;&#125;&#125;"</span>, host, port, prot);</span><br><span class="line"><span class="keyword">switch</span>(prot) &#123;</span><br><span class="line"><span class="keyword">case</span> UDP:</span><br><span class="line"><span class="keyword">return</span> builder.build(<span class="keyword">new</span> GraphiteUDP(host, port));</span><br><span class="line"><span class="keyword">case</span> TCP:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> builder.build(<span class="keyword">new</span> Graphite(host, port));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>复制 flink-metrics-graphite-xxx.jar 到 $FLINK_HOME/lib 下</li><li>在 flink-conf.yml 增加如下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.grph.class:</span> <span class="string">org.apache.flink.metrics.graphite.GraphiteReporter</span></span><br><span class="line"><span class="string">metrics.reporter.grph.host:</span> <span class="string">localhost</span>  <span class="comment"># Graphite server host</span></span><br><span class="line"><span class="string">metrics.reporter.grph.port:</span> <span class="number">2003</span>       <span class="comment"># Graphite server port</span></span><br><span class="line"><span class="string">metrics.reporter.grph.protocol:</span> <span class="string">TCP</span>    <span class="comment"># protocol to use (TCP/UDP)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flink-metrics-influxdb"><a href="#flink-metrics-influxdb" class="headerlink" title="flink-metrics-influxdb"></a>flink-metrics-influxdb</h3><h4 id="influxdb基本概念"><a href="#influxdb基本概念" class="headerlink" title="influxdb基本概念"></a>influxdb基本概念</h4><p>使用方法参考：<a href="https://www.jianshu.com/p/a1344ca86e9b" target="_blank" rel="noopener">时序数据库 Influxdb 使用详解</a><br>为了方便理解 InfluxdbReporter 的实现，这里简单说下 Influxdb 中的几个概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: census</span><br><span class="line">-————————————</span><br><span class="line">time                     butterflies     honeybees     location   scientist</span><br><span class="line">2015-08-18T00:00:00Z      12                23           1         langstroth</span><br><span class="line">2015-08-18T00:00:00Z      1                 30           1         perpetua</span><br><span class="line">2015-08-18T00:06:00Z      11                28           1         langstroth</span><br><span class="line">2015-08-18T00:06:00Z      3                 28           1         perpetua</span><br><span class="line">2015-08-18T05:54:00Z      2                 11           2         langstroth</span><br><span class="line">2015-08-18T06:00:00Z      1                 10           2         langstroth</span><br><span class="line">2015-08-18T06:06:00Z      8                 23           2         perpetua</span><br><span class="line">2015-08-18T06:12:00Z      7                 22           2         perpetua</span><br></pre></td></tr></table></figure><ul><li><p>timestamp<br>既然是时间序列数据库，influxdb 的数据都有一列名为 time 的列。</p></li><li><p>field key,field value,field set<br>bufferflies 和 honeybees 为 field key，它们为String类型，用于存储元数据。<br>数据 12-7 为 bufferflies 的field value，数据 23-22 为 honeybees 的field value。field value可以为String,float,integer或boolean类型。<br>field key 和 field value 对组成的集合称之为 field set，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">butterflies = 12 honeybees = 23</span><br><span class="line">butterflies = 1 honeybees = 30</span><br><span class="line">butterflies = 11 honeybees = 28</span><br><span class="line">butterflies = 3 honeybees = 28</span><br><span class="line">butterflies = 2 honeybees = 11</span><br><span class="line">butterflies = 1 honeybees = 10</span><br><span class="line">butterflies = 8 honeybees = 23</span><br><span class="line">butterflies = 7 honeybees = 22</span><br></pre></td></tr></table></figure></li></ul><p>在 influxdb 中，field 是必须的，但是字段是没有索引的，如果字段作为查询条件，会扫描所有符合查询条件的所有字段值。相当于SQL的没有索引的列。    </p><ul><li>tag key,tag value,tag set<br>location 和 scientist 是两个tag，location 有两个 tag value：1和2，scientist 有两个 tag value：langstroth 和 perpetua。<br>tag key 和 tag value 对组成的集合称之为 tag set，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location = 1, scientist = langstroth</span><br><span class="line">location = 2, scientist = langstroth</span><br><span class="line">location = 1, scientist = perpetua</span><br><span class="line">location = 2, scientist = perpetua</span><br></pre></td></tr></table></figure></li></ul><p>在 influxdb 中，tag 是可选的，但 tag 相当于SQL中有索引的列，因此强烈建议使用。</p><ul><li><p>measurement<br>指标项，是 fields，tags 以及 time 列的容器。</p></li><li><p>retention policy<br>数据保留策略，默认是 autogen，表示数据一直保留永不过期，副本数量为1。</p></li><li><p>series<br>指共享同一个 retention policy，measurement 以及 tag set 的数据集合，如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">｜ Arbitrary series number ｜ Retention policy ｜ Measurement ｜ Tag set ｜</span><br><span class="line">｜ ----------------------- ｜ ---------------- ｜ ----------- ｜ ------------------------------- ｜</span><br><span class="line">｜        series 1         ｜       autogen    ｜     census  ｜ location=1,scientist=langstroth ｜</span><br><span class="line">｜        series 2         ｜       autogen    ｜     census  ｜ location=2,scientist=perpetua   ｜</span><br><span class="line">｜        series 3         ｜       autogen    ｜     census  ｜ location=1,scientist=langstroth ｜</span><br><span class="line">｜        series 4         ｜       autogen    ｜     census  ｜ location=2,scientist=perpetua   ｜</span><br></pre></td></tr></table></figure><ul><li>point<br>指的是同一个series中具有相同时间的 field set，points 相当于SQL中的数据行。如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name: census</span><br><span class="line">-----------------</span><br><span class="line">time                  butterflies    honeybees   location    scientist</span><br><span class="line">2015-08-18T00:00:00Z       1            30           1        perpetua</span><br></pre></td></tr></table></figure><ul><li>database</li></ul><p>一个数据库可以有多个 measurement,retention policy,continuous queries以及user。提供InfluxQL语言查询和修改数据。</p><h4 id="Reporter实现"><a href="#Reporter实现" class="headerlink" title="Reporter实现"></a>Reporter实现</h4><p>InfluxdbReporter的详细类图如下，包括继承以及依赖关系：<br><img src="InfluxdbReporter%E7%B1%BB%E5%9B%BE.png" alt></p><ul><li><p>MeasurementInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指标项名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * tag key 和 tag value对集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; tags;</span><br></pre></td></tr></table></figure></li><li><p>MeasurementInfoProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 metricName 和 MetricGroup，将该指标项封装成 MeasurementInfo 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MeasurementInfo <span class="title">getMetricInfo</span><span class="params">(String metricName, MetricGroup group)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MeasurementInfo(getScopedName(metricName, group), getTags(group));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>InfluxdbReporterOptions<br>连接 influxdb 写指标的配置项，类似正常写RDBMS需要的配置</p></li><li><p>MetricMapper<br>将 MeasurementInfo 转成 influxdb 中的 Point</p></li><li><p>InfluxdbReporter extends AbstractReporter</p></li></ul><p>构造函数中设置 MeasurementInfoProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InfluxdbReporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设置 MeasurementInfoProvider</span></span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> MeasurementInfoProvider());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>open() 方法中要根据指标配置文件初始化 InfluxDB 操作类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置项初始化得到 InfluxDB 操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(MetricConfig config)</span> </span>&#123;</span><br><span class="line">String host = getString(config, HOST);</span><br><span class="line"><span class="keyword">int</span> port = getInteger(config, PORT);</span><br><span class="line"><span class="keyword">if</span> (!isValidHost(host) || !NetUtils.isValidClientPort(port)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid host/port configuration. Host: "</span> + host + <span class="string">" Port: "</span> + port);</span><br><span class="line">&#125;</span><br><span class="line">String database = getString(config, DB);</span><br><span class="line"><span class="keyword">if</span> (database == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'"</span> + DB.key() + <span class="string">"' configuration option is not set"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String url = String.format(<span class="string">"http://%s:%d"</span>, host, port);</span><br><span class="line">String username = getString(config, USERNAME);</span><br><span class="line">String password = getString(config, PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.database = database;</span><br><span class="line"><span class="keyword">this</span>.retentionPolicy = getString(config, RETENTION_POLICY);</span><br><span class="line"><span class="keyword">this</span>.consistency = getConsistencyLevel(config, CONSISTENCY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> connectTimeout = getInteger(config, CONNECT_TIMEOUT);</span><br><span class="line"><span class="keyword">int</span> writeTimeout = getInteger(config, WRITE_TIMEOUT);</span><br><span class="line"><span class="comment">// 使用 okhttp 包中提供的 HttpClient</span></span><br><span class="line">OkHttpClient.Builder client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">.connectTimeout(connectTimeout, TimeUnit.MILLISECONDS)</span><br><span class="line">.writeTimeout(writeTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span>) &#123;</span><br><span class="line">influxDB = InfluxDBFactory.connect(url, username, password, client);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">influxDB = InfluxDBFactory.connect(url, client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Configured InfluxDBReporter with &#123;host:&#123;&#125;, port:&#123;&#125;, db:&#123;&#125;, retentionPolicy:&#123;&#125; and consistency:&#123;&#125;&#125;"</span>,</span><br><span class="line">host, port, database, retentionPolicy, consistency.name());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractReporter 中的 notifyOfAddedMetric() 方法中添加指标时将 flink 内部定义的 Metric 转成 MeasurementInfo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyOfAddedMetric</span><span class="params">(Metric metric, String metricName, MetricGroup group)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> MetricInfo metricInfo = metricInfoProvider.getMetricInfo(metricName, group);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Counter) &#123;</span><br><span class="line">counters.put((Counter) metric, metricInfo);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Gauge) &#123;</span><br><span class="line">gauges.put((Gauge&lt;?&gt;) metric, metricInfo);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Histogram) &#123;</span><br><span class="line">histograms.put((Histogram) metric, metricInfo);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Meter) &#123;</span><br><span class="line">meters.put((Meter) metric, metricInfo);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">"Cannot add unknown metric type &#123;&#125;. This indicates that the reporter "</span> +</span><br><span class="line"><span class="string">"does not support this metric type."</span>, metric.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>report()方法要将 MeasurementInfo 转成 influxdb 中的 Point 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BatchPoints report = buildReport();</span><br><span class="line"><span class="keyword">if</span> (report != <span class="keyword">null</span>) &#123;</span><br><span class="line">influxDB.write(report);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将指标信息封装成 influxdb 中的 BatchPoints</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> BatchPoints</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BatchPoints <span class="title">buildReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 取当前时间点</span></span><br><span class="line">Instant timestamp = Instant.now();</span><br><span class="line">BatchPoints.Builder report = BatchPoints.database(database);</span><br><span class="line"><span class="comment">// 设置保留策略</span></span><br><span class="line">report.retentionPolicy(retentionPolicy);</span><br><span class="line">report.consistency(consistency);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Gauge&lt;?&gt;, MeasurementInfo&gt; entry : gauges.entrySet()) &#123;</span><br><span class="line"><span class="comment">// MeasurementInfo -&gt; Point</span></span><br><span class="line">report.point(MetricMapper.map(entry.getValue(), timestamp, entry.getKey()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Counter, MeasurementInfo&gt; entry : counters.entrySet()) &#123;</span><br><span class="line">report.point(MetricMapper.map(entry.getValue(), timestamp, entry.getKey()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Histogram, MeasurementInfo&gt; entry : histograms.entrySet()) &#123;</span><br><span class="line">report.point(MetricMapper.map(entry.getValue(), timestamp, entry.getKey()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Meter, MeasurementInfo&gt; entry : meters.entrySet()) &#123;</span><br><span class="line">report.point(MetricMapper.map(entry.getValue(), timestamp, entry.getKey()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ConcurrentModificationException | NoSuchElementException e) &#123;</span><br><span class="line"><span class="comment">// ignore - may happen when metrics are concurrently added or removed</span></span><br><span class="line"><span class="comment">// report next time</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> report.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ul><li>复制 flink-metrics-influxdb-xxx.jar 到 $FLINK_HOME/lib 下</li><li>在 flink-conf.yml 增加如下配置：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.influxdb.class:</span> <span class="string">org.apache.flink.metrics.influxdb.InfluxdbReporter</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.host:</span> <span class="string">localhost</span>           <span class="comment"># the InfluxDB server host</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.port:</span> <span class="number">8086</span>                <span class="comment"># (optional) the InfluxDB server port, defaults to 8086</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.db:</span> <span class="string">flink</span>                 <span class="comment"># the InfluxDB database to store metrics</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.username:</span> <span class="string">flink-metrics</span>   <span class="comment"># (optional) InfluxDB username</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.password:</span> <span class="string">qwerty</span>          <span class="comment"># (optional) InfluxDB username’s password</span></span><br><span class="line"><span class="string">metrics.reporter.influxdb.retentionPolicy:</span> <span class="string">one_hour</span> <span class="comment"># (optional) InfluxDB retention policy</span></span><br></pre></td></tr></table></figure><h3 id="flink-metrics-prometheus"><a href="#flink-metrics-prometheus" class="headerlink" title="flink-metrics-prometheus"></a>flink-metrics-prometheus</h3><h4 id="prometheus基本概念"><a href="#prometheus基本概念" class="headerlink" title="prometheus基本概念"></a>prometheus基本概念</h4><h4 id="Reporter实现-1"><a href="#Reporter实现-1" class="headerlink" title="Reporter实现"></a>Reporter实现</h4><p>Prometheus Reporter的详细类图如下，包括继承以及依赖关系：<br><img src="PrometheusReporter%E7%B1%BB%E5%9B%BE.png" alt></p><ul><li>AbstractPrometheusReporter<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyOfAddedMetric</span><span class="params">(<span class="keyword">final</span> Metric metric, <span class="keyword">final</span> String metricName, <span class="keyword">final</span> MetricGroup group)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 维度key集合</span></span><br><span class="line">List&lt;String&gt; dimensionKeys = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="comment">// 维度value集合</span></span><br><span class="line">List&lt;String&gt; dimensionValues = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, String&gt; dimension : group.getAllVariables().entrySet()) &#123;</span><br><span class="line"><span class="keyword">final</span> String key = dimension.getKey();</span><br><span class="line">dimensionKeys.add(CHARACTER_FILTER.filterCharacters(key.substring(<span class="number">1</span>, key.length() - <span class="number">1</span>)));</span><br><span class="line">dimensionValues.add(labelValueCharactersFilter.filterCharacters(dimension.getValue()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String scopedMetricName = getScopedName(metricName, group);</span><br><span class="line"><span class="keyword">final</span> String helpString = metricName + <span class="string">" (scope: "</span> + getLogicalScope(group) + <span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Collector collector;</span><br><span class="line">Integer count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (collectorsWithCountByMetricName.containsKey(scopedMetricName)) &#123;</span><br><span class="line"><span class="keyword">final</span> AbstractMap.SimpleImmutableEntry&lt;Collector, Integer&gt; collectorWithCount = collectorsWithCountByMetricName.get(scopedMetricName);</span><br><span class="line">collector = collectorWithCount.getKey();</span><br><span class="line">count = collectorWithCount.getValue();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">collector = createCollector(metric, dimensionKeys, dimensionValues, scopedMetricName, helpString);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 注册当前的 collector 到 CollectorRegistry.defaultRegistry 中</span></span><br><span class="line">collector.register();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.warn(<span class="string">"There was a problem registering metric &#123;&#125;."</span>, metricName, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">addMetric(metric, dimensionValues, collector);</span><br><span class="line">collectorsWithCountByMetricName.put(scopedMetricName, <span class="keyword">new</span> AbstractMap.SimpleImmutableEntry&lt;&gt;(collector, count + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将 Metric 转成 prometheus 的 Collector</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collector <span class="title">createCollector</span><span class="params">(Metric metric, List&lt;String&gt; dimensionKeys, List&lt;String&gt; dimensionValues, String scopedMetricName, String helpString)</span> </span>&#123;</span><br><span class="line">Collector collector;</span><br><span class="line"><span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Gauge || metric <span class="keyword">instanceof</span> Counter || metric <span class="keyword">instanceof</span> Meter) &#123;</span><br><span class="line">collector = io.prometheus.client.Gauge</span><br><span class="line">.build()</span><br><span class="line">.name(scopedMetricName)</span><br><span class="line">.help(helpString)</span><br><span class="line">.labelNames(toArray(dimensionKeys))</span><br><span class="line">.create();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Histogram) &#123;</span><br><span class="line">collector = <span class="keyword">new</span> HistogramSummaryProxy((Histogram) metric, scopedMetricName, helpString, dimensionKeys, dimensionValues);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">"Cannot create collector for unknown metric type: &#123;&#125;. This indicates that the metric type is not supported by this reporter."</span>,</span><br><span class="line">metric.getClass().getName());</span><br><span class="line">collector = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> collector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 取出 Metric 中的值，为 Collector 设置 label values</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMetric</span><span class="params">(Metric metric, List&lt;String&gt; dimensionValues, Collector collector)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Gauge) &#123;</span><br><span class="line">((io.prometheus.client.Gauge) collector).setChild(gaugeFrom((Gauge) metric), toArray(dimensionValues));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Counter) &#123;</span><br><span class="line">((io.prometheus.client.Gauge) collector).setChild(gaugeFrom((Counter) metric), toArray(dimensionValues));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Meter) &#123;</span><br><span class="line">((io.prometheus.client.Gauge) collector).setChild(gaugeFrom((Meter) metric), toArray(dimensionValues));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Histogram) &#123;</span><br><span class="line">((HistogramSummaryProxy) collector).addChild((Histogram) metric, dimensionValues);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">"Cannot add unknown metric type: &#123;&#125;. This indicates that the metric type is not supported by this reporter."</span>,</span><br><span class="line">metric.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：从Gauge中取值时不支持返回值为String：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line">io.prometheus.client.Gauge.<span class="function">Child <span class="title">gaugeFrom</span><span class="params">(Gauge gauge)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> io.prometheus.client.Gauge.Child() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Object value = gauge.getValue();</span><br><span class="line"><span class="comment">// 注意：这里只支持 Gauge 的返回值为 Double、Number、Boolean 的，暂时不支持String</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">log.debug(<span class="string">"Gauge &#123;&#125; is null-valued, defaulting to 0."</span>, gauge);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>) value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line"><span class="keyword">return</span> ((Number) value).doubleValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line"><span class="keyword">return</span> ((Boolean) value) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">log.debug(<span class="string">"Invalid type for Gauge &#123;&#125;: &#123;&#125;, only number types and booleans are supported by this reporter."</span>,</span><br><span class="line">gauge, value.getClass().getName());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如 LatestCompletedCheckpointExternalPathGauge 这个指标，用来记录上次完成的 checkpoint 路径，它的返回值是 String 类型，在向 PrometheusPushgateway 推送的时候会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LatestCompletedCheckpointExternalPathGauge</span> <span class="keyword">implements</span> <span class="title">Gauge</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompletedCheckpointStats completed = latestCompletedCheckpoint;</span><br><span class="line"><span class="keyword">if</span> (completed != <span class="keyword">null</span> &amp;&amp; completed.getExternalPath() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> completed.getExternalPath();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"n/a"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">20:06:36.782 [Flink-MetricRegistry-thread-1] DEBUG org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporter - Invalid type for Gauge org.apache.flink.runtime.checkpoint.CheckpointStatsTracker$LatestCompletedCheckpointExternalPathGauge@78b86b65: java.lang.String, only number types and booleans are supported by this reporter.</span><br><span class="line">20:06:36.810 [Flink-MetricRegistry-thread-1] WARN org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporter - Failed to push metrics to PushGateway with jobName flinkSql_KUDUside_KUDUsink_20200324110200_69196657381606602020032420061183311.</span><br><span class="line">java.io.IOException: Response code from http://xx.xx.xx.xx:8891/metrics/job/flinkSql_KUDUside_KUDUsink_20200324110200_69196657381606602020032420061183311 was 200</span><br><span class="line">at org.apache.flink.shaded.io.prometheus.client.exporter.PushGateway.doRequest(PushGateway.java:297)</span><br><span class="line">at org.apache.flink.shaded.io.prometheus.client.exporter.PushGateway.push(PushGateway.java:105)</span><br><span class="line">at org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporter.report(PrometheusPushGatewayReporter.java:76)</span><br><span class="line">at org.apache.flink.runtime.metrics.MetricRegistryImpl$ReporterTask.run(MetricRegistryImpl.java:436)</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><ul><li><p>PrometheusPushGatewayReporterOptions<br>连接 PrometheusPushGateway 写指标的配置项</p></li><li><p>PrometheusPushGatewayReporter</p></li></ul><p>open() 方法中要根据指标配置文件初始化 PushGateway 操作类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置项初始化得到 PushGateway 操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(MetricConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open(config);</span><br><span class="line"></span><br><span class="line">String host = config.getString(HOST.key(), HOST.defaultValue());</span><br><span class="line"><span class="keyword">int</span> port = config.getInteger(PORT.key(), PORT.defaultValue());</span><br><span class="line">String configuredJobName = config.getString(JOB_NAME.key(), JOB_NAME.defaultValue());</span><br><span class="line"><span class="keyword">boolean</span> randomSuffix = config.getBoolean(RANDOM_JOB_NAME_SUFFIX.key(), RANDOM_JOB_NAME_SUFFIX.defaultValue());</span><br><span class="line">deleteOnShutdown = config.getBoolean(DELETE_ON_SHUTDOWN.key(), DELETE_ON_SHUTDOWN.defaultValue());</span><br><span class="line">groupingKey = parseGroupingKey(config.getString(GROUPING_KEY.key(), GROUPING_KEY.defaultValue()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (host == <span class="keyword">null</span> || host.isEmpty() || port &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid host/port configuration. Host: "</span> + host + <span class="string">" Port: "</span> + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (randomSuffix) &#123;</span><br><span class="line"><span class="keyword">this</span>.jobName = configuredJobName + <span class="keyword">new</span> AbstractID();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.jobName = configuredJobName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushGateway = <span class="keyword">new</span> PushGateway(host + <span class="string">':'</span> + port);</span><br><span class="line">log.info(<span class="string">"Configured PrometheusPushGatewayReporter with &#123;host:&#123;&#125;, port:&#123;&#125;, jobName:&#123;&#125;, randomJobNameSuffix:&#123;&#125;, deleteOnShutdown:&#123;&#125;, groupingKey:&#123;&#125;&#125;"</span>,</span><br><span class="line">host, port, jobName, randomSuffix, deleteOnShutdown, groupingKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>report() 方法中调用 pushgateway 的 push() 方法，直接走HTTP将指标推送出去了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 使用 PushGateway 的 push 方法，走 HTTP 协议，将指标推送到 PushGateway</span></span><br><span class="line">pushGateway.push(CollectorRegistry.defaultRegistry, jobName, groupingKey);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.warn(<span class="string">"Failed to push metrics to PushGateway with jobName &#123;&#125;, groupingKey &#123;&#125;."</span>, jobName, groupingKey, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PrometheusReporter</li></ul><p>open() 方法中要根据指标配置文件初始化一个HttpServer，让 Prometheus 来拉取：<br>注意：PrometheusReporter 类没有实现 Scheduled 接口，没有 report() 方法，因为它的指标是拉的，不是主动推的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置项初始化一个 HttpServer，让 Prometheus 来拉取指标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(MetricConfig config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open(config);</span><br><span class="line"></span><br><span class="line">String portsConfig = config.getString(ARG_PORT, DEFAULT_PORT);</span><br><span class="line">Iterator&lt;Integer&gt; ports = NetUtils.getPortRangeFromString(portsConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ports.hasNext()) &#123;</span><br><span class="line"><span class="keyword">int</span> port = ports.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// internally accesses CollectorRegistry.defaultRegistry</span></span><br><span class="line">httpServer = <span class="keyword">new</span> HTTPServer(port);</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">log.info(<span class="string">"Started PrometheusReporter HTTP server on port &#123;&#125;."</span>, port);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123; <span class="comment">//assume port conflict</span></span><br><span class="line">log.debug(<span class="string">"Could not start PrometheusReporter HTTP server on port &#123;&#125;."</span>, port, ioe);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (httpServer == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not start PrometheusReporter HTTP server on any configured port. Ports: "</span> + portsConfig);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><ul><li><p>复制 flink-metrics-prometheus-xxx.jar 到 $FLINK_HOME/lib 下</p></li><li><p>如果使用 PrometheusReporter ，则在 flink-conf.yml 增加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.prom.class:</span> <span class="string">org.apache.flink.metrics.prometheus.PrometheusReporter</span></span><br><span class="line"><span class="string">metrics.reporter.prom.port:</span> <span class="number">9249</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用 PrometheusPushGatewayReporter ，则在 flink-conf.yml 增加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.promgateway.class:</span> <span class="string">org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporter</span></span><br><span class="line"><span class="string">metrics.reporter.promgateway.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="string">metrics.reporter.promgateway.port:</span> <span class="number">9091</span></span><br><span class="line"><span class="string">metrics.reporter.promgateway.jobName:</span> <span class="string">myJob</span></span><br><span class="line"><span class="string">metrics.reporter.promgateway.randomJobNameSuffix:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">metrics.reporter.promgateway.deleteOnShutdown:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flink-metrics-jmx"><a href="#flink-metrics-jmx" class="headerlink" title="flink-metrics-jmx"></a>flink-metrics-jmx</h3><h4 id="jmx基本概念"><a href="#jmx基本概念" class="headerlink" title="jmx基本概念"></a>jmx基本概念</h4><p>JMX（Java Management Extensions）是一个应用程序植入管理功能的框架。JMX 是一套标准的代理和服务，实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。</p><p>JMX 架构图如下：<br><img src="JMX%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><h4 id="Reporter实现-2"><a href="#Reporter实现-2" class="headerlink" title="Reporter实现"></a>Reporter实现</h4><ul><li>JMXReporter：<br><img src="JMXReporter%E7%B1%BB%E5%9B%BE.png" alt></li></ul><p>首先通过 <code>ManagementFactory.getPlatformMBeanServer()</code> 获取JVM中全局唯一的 MBeanServer 单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">JMXReporter(<span class="meta">@Nullable</span> <span class="keyword">final</span> String portsConfig) &#123;</span><br><span class="line"><span class="comment">// 获取 MBeanServer 单例</span></span><br><span class="line"><span class="keyword">this</span>.mBeanServer = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line"><span class="comment">// 存放注册指标的Map</span></span><br><span class="line"><span class="keyword">this</span>.registeredMetrics = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (portsConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">Iterator&lt;Integer&gt; ports = NetUtils.getPortRangeFromString(portsConfig);</span><br><span class="line"></span><br><span class="line">JMXServer successfullyStartedServer = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (ports.hasNext() &amp;&amp; successfullyStartedServer == <span class="keyword">null</span>) &#123;</span><br><span class="line">JMXServer server = <span class="keyword">new</span> JMXServer();</span><br><span class="line"><span class="keyword">int</span> port = ports.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建并启动 Registry 和 JMXConnectorServer</span></span><br><span class="line">server.start(port);</span><br><span class="line">LOG.info(<span class="string">"Started JMX server on port "</span> + port + <span class="string">"."</span>);</span><br><span class="line">successfullyStartedServer = server;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123; <span class="comment">//assume port conflict</span></span><br><span class="line">LOG.debug(<span class="string">"Could not start JMX server on port "</span> + port + <span class="string">"."</span>, ioe);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">server.stop();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.debug(<span class="string">"Could not stop JMX server."</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (successfullyStartedServer == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not start JMX server on any configured port. Ports: "</span> + portsConfig);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.jmxServer = successfullyStartedServer;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.jmxServer = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">LOG.info(<span class="string">"Configured JMXReporter with &#123;port:&#123;&#125;&#125;"</span>, portsConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JMXRreporter中的MetricMBean：<br><img src="JMXRreporter%E4%B8%AD%E7%9A%84MetricMBean%E7%B1%BB%E5%9B%BE.png" alt></li></ul><p>添加指标项时，需要将 flink 中的 Metric 对象转换成 MetricBean ，再注册到 MBeanServer 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyOfAddedMetric</span><span class="params">(Metric metric, String metricName, MetricGroup group)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String domain = generateJmxDomain(metricName, group);</span><br><span class="line"><span class="keyword">final</span> Hashtable&lt;String, String&gt; table = generateJmxTable(group.getAllVariables());</span><br><span class="line"></span><br><span class="line">AbstractBean jmxMetric;</span><br><span class="line">ObjectName jmxName;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jmxName = <span class="keyword">new</span> ObjectName(domain, table);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedObjectNameException e) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * There is an implementation error on our side if this occurs. Either the domain was modified and no longer</span></span><br><span class="line"><span class="comment"> * conforms to the JMX domain rules or the table wasn't properly generated.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOG.debug(<span class="string">"Implementation error. The domain or table does not conform to JMX rules."</span> , e);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 flink 中的 Metric 转成 MBean</span></span><br><span class="line"><span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Gauge) &#123;</span><br><span class="line">jmxMetric = <span class="keyword">new</span> JmxGauge((Gauge&lt;?&gt;) metric);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Counter) &#123;</span><br><span class="line">jmxMetric = <span class="keyword">new</span> JmxCounter((Counter) metric);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Histogram) &#123;</span><br><span class="line">jmxMetric = <span class="keyword">new</span> JmxHistogram((Histogram) metric);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metric <span class="keyword">instanceof</span> Meter) &#123;</span><br><span class="line">jmxMetric = <span class="keyword">new</span> JmxMeter((Meter) metric);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"Cannot add unknown metric type: &#123;&#125;. This indicates that the metric type "</span> +</span><br><span class="line"><span class="string">"is not supported by this reporter."</span>, metric.getClass().getName());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// 注册到 MetricBean 到 MBeanServer 中</span></span><br><span class="line">mBeanServer.registerMBean(jmxMetric, jmxName);</span><br><span class="line">registeredMetrics.put(metric, jmxName);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NotCompliantMBeanException e) &#123;</span><br><span class="line"><span class="comment">// implementation error on our side</span></span><br><span class="line">LOG.debug(<span class="string">"Metric did not comply with JMX MBean rules."</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstanceAlreadyExistsException e) &#123;</span><br><span class="line">LOG.warn(<span class="string">"A metric with the name "</span> + jmxName + <span class="string">" was already registered."</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">LOG.warn(<span class="string">"Failed to register metric"</span>, t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><ul><li>在 flink-conf.yml 增加如下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.jmx.factory.class:</span> <span class="string">org.apache.flink.metrics.jmx.JMXReporterFactory</span></span><br><span class="line"><span class="string">metrics.reporter.jmx.port:</span> <span class="number">8789</span>  <span class="comment"># 如果有多个 TM 在同一台机器，端口可以设置成范围 9250-9260</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flink-metrics-slf4j"><a href="#flink-metrics-slf4j" class="headerlink" title="flink-metrics-slf4j"></a>flink-metrics-slf4j</h3><p>Slf4jReporter 继承了 flink-metrics-core 模块中的 AbstractReporter，复用其添加移除指标的方法。<br>report() 方法的逻辑其实就是遍历所有的指标项，拼接成字符串，打印到日志文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// initialize with previous size to avoid repeated resizing of backing array</span></span><br><span class="line"><span class="comment">// pad the size to allow deviations in the final string, for example due to different double value representations</span></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) (previousSize * <span class="number">1.1</span>));</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"=========================== Starting metrics report ==========================="</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"-- Counters -------------------------------------------------------------------"</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Counter, String&gt; metric : counters.entrySet()) &#123;</span><br><span class="line">builder</span><br><span class="line">.append(metric.getValue()).append(<span class="string">": "</span>).append(metric.getKey().getCount())</span><br><span class="line">.append(lineSeparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"-- Gauges ---------------------------------------------------------------------"</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Gauge&lt;?&gt;, String&gt; metric : gauges.entrySet()) &#123;</span><br><span class="line">builder</span><br><span class="line">.append(metric.getValue()).append(<span class="string">": "</span>).append(metric.getKey().getValue())</span><br><span class="line">.append(lineSeparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"-- Meters ---------------------------------------------------------------------"</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Meter, String&gt; metric : meters.entrySet()) &#123;</span><br><span class="line">builder</span><br><span class="line">.append(metric.getValue()).append(<span class="string">": "</span>).append(metric.getKey().getRate())</span><br><span class="line">.append(lineSeparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"-- Histograms -----------------------------------------------------------------"</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Histogram, String&gt; metric : histograms.entrySet()) &#123;</span><br><span class="line">HistogramStatistics stats = metric.getKey().getStatistics();</span><br><span class="line">builder</span><br><span class="line">.append(metric.getValue()).append(<span class="string">": count="</span>).append(stats.size())</span><br><span class="line">.append(<span class="string">", min="</span>).append(stats.getMin())</span><br><span class="line">.append(<span class="string">", max="</span>).append(stats.getMax())</span><br><span class="line">.append(<span class="string">", mean="</span>).append(stats.getMean())</span><br><span class="line">.append(<span class="string">", stddev="</span>).append(stats.getStdDev())</span><br><span class="line">.append(<span class="string">", p50="</span>).append(stats.getQuantile(<span class="number">0.50</span>))</span><br><span class="line">.append(<span class="string">", p75="</span>).append(stats.getQuantile(<span class="number">0.75</span>))</span><br><span class="line">.append(<span class="string">", p95="</span>).append(stats.getQuantile(<span class="number">0.95</span>))</span><br><span class="line">.append(<span class="string">", p98="</span>).append(stats.getQuantile(<span class="number">0.98</span>))</span><br><span class="line">.append(<span class="string">", p99="</span>).append(stats.getQuantile(<span class="number">0.99</span>))</span><br><span class="line">.append(<span class="string">", p999="</span>).append(stats.getQuantile(<span class="number">0.999</span>))</span><br><span class="line">.append(lineSeparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builder</span><br><span class="line">.append(lineSeparator)</span><br><span class="line">.append(<span class="string">"=========================== Finished metrics report ==========================="</span>)</span><br><span class="line">.append(lineSeparator);</span><br><span class="line">LOG.info(builder.toString());</span><br><span class="line"></span><br><span class="line">previousSize = builder.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><ul><li>复制 flink-metrics-slf4j-xxx.jar 到 $FLINK_HOME/lib 下</li><li>在 flink-conf.yml 增加如下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.slf4j.class:</span> <span class="string">org.apache.flink.metrics.slf4j.Slf4jReporter</span></span><br><span class="line"><span class="string">metrics.reporter.slf4j.interval:</span> <span class="number">60</span> <span class="string">SECONDS</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flink-metrics-statsd"><a href="#flink-metrics-statsd" class="headerlink" title="flink-metrics-statsd"></a>flink-metrics-statsd</h3><h4 id="statsd基本概念"><a href="#statsd基本概念" class="headerlink" title="statsd基本概念"></a>statsd基本概念</h4><p>statsd 从狭义上讲，其实就是一个监听 UDP（Default）/TCP的守护程序。<br>statsd 系统包括三部分：客户端（client）、服务器（server）和后端（backend）<br>StatsDReporter 相当于 statsd 系统的客户端，将 metrics 上报给 statsd server，statsd server 聚合这些 metrics 之后，定时发送给 backend，<br>backend 则负责存储这些时间序列数据，并通过适当的图表工具展示。</p><p>statsd 经常与 graphite 一起使用，statsd 负责收集并聚合测量值，之后将数据传给 graphite ，graphite 以时间序列为依据存储数据，并绘制图表。</p><h4 id="Reporter实现-3"><a href="#Reporter实现-3" class="headerlink" title="Reporter实现"></a>Reporter实现</h4><p>这里我们只关注下发送 UDP 数据包的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> String value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// statsd 的协议其实非常简单，每一行就是一条数据，g 表示 Gauge</span></span><br><span class="line"><span class="comment">// 如 "system.load.1min:0.5|g"，表示某一时刻系统1分钟的负载为0.5</span></span><br><span class="line">String formatted = String.format(<span class="string">"%s:%s|g"</span>, name, value);</span><br><span class="line"><span class="keyword">byte</span>[] data = formatted.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"><span class="comment">// 默认通过 socket 发送 UDP 数据包到 StatsD</span></span><br><span class="line"><span class="comment">// 因为 UDP 比 TCP 更快，不想为了追踪应用的表现而减慢其速度</span></span><br><span class="line">socket.send(<span class="keyword">new</span> DatagramPacket(data, data.length, <span class="keyword">this</span>.address));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">LOG.error(<span class="string">"unable to send packet to statsd at '&#123;&#125;:&#123;&#125;'"</span>, address.getHostName(), address.getPort());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><ul><li>复制 flink-metrics-statsd-xxx.jar 到 $FLINK_HOME/lib 下</li><li>在 flink-conf.yml 增加如下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.stsd.class:</span> <span class="string">org.apache.flink.metrics.statsd.StatsDReporter</span></span><br><span class="line"><span class="string">metrics.reporter.stsd.host:</span> <span class="string">localhost</span>    <span class="comment"># the StatsD server host</span></span><br><span class="line"><span class="string">metrics.reporter.stsd.port:</span> <span class="number">8125</span>         <span class="comment"># the StatsD server port</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flink-metrics-datadog"><a href="#flink-metrics-datadog" class="headerlink" title="flink-metrics-datadog"></a>flink-metrics-datadog</h3><p>datadog这里就不详细说了，其实就是添加指标时将 flink 中的 Metric 转成 DMetric<br>汇报时将 DMetric 指标封装成 DatadogHttpRequest，使用 HttpClient 发送出去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DatadogHttpRequest request = <span class="keyword">new</span> DatadogHttpRequest();</span><br><span class="line"></span><br><span class="line">List&lt;Gauge&gt; gaugesToRemove = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Gauge, DGauge&gt; entry : gauges.entrySet()) &#123;</span><br><span class="line">DGauge g = entry.getValue();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Will throw exception if the Gauge is not of Number type</span></span><br><span class="line"><span class="comment">// Flink uses Gauge to store many types other than Number</span></span><br><span class="line">g.getMetricValue();</span><br><span class="line">request.addGauge(g);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">LOGGER.info(<span class="string">"The metric &#123;&#125; will not be reported because only number types are supported by this reporter."</span>, g.getMetric());</span><br><span class="line">gaugesToRemove.add(entry.getKey());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">LOGGER.debug(<span class="string">"The metric &#123;&#125; will not be reported because it threw an exception."</span>, g.getMetric(), e);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOGGER.info(<span class="string">"The metric &#123;&#125; will not be reported because it threw an exception."</span>, g.getMetric());</span><br><span class="line">&#125;</span><br><span class="line">gaugesToRemove.add(entry.getKey());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">gaugesToRemove.forEach(gauges::remove);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DCounter c : counters.values()) &#123;</span><br><span class="line">request.addCounter(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DMeter m : meters.values()) &#123;</span><br><span class="line">request.addMeter(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.send(request);</span><br><span class="line">LOGGER.debug(<span class="string">"Reported series with size &#123;&#125;."</span>, request.getSeries().getSeries().size());</span><br><span class="line">&#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line">LOGGER.warn(<span class="string">"Failed reporting metrics to Datadog because of socket timeout: &#123;&#125;."</span>, e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOGGER.warn(<span class="string">"Failed reporting metrics to Datadog."</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h4><ul><li>复制 flink-metrics-datadog-xxx.jar 到 $FLINK_HOME/lib 下</li><li>在 flink-conf.yml 增加如下配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metrics.reporter.dghttp.class:</span> <span class="string">org.apache.flink.metrics.datadog.DatadogHttpReporter</span></span><br><span class="line"><span class="string">metrics.reporter.dghttp.apikey:</span> <span class="string">xxx</span>                   <span class="comment"># the Datadog API key</span></span><br><span class="line"><span class="comment">#(optional) the global tags that will be applied to metrics when sending to Datadog. Tags should be separated by comma only</span></span><br><span class="line"><span class="string">metrics.reporter.dghttp.tags:</span> <span class="string">myflinkapp,prod</span> </span><br><span class="line"><span class="string">metrics.reporter.dghttp.proxyHost:</span> <span class="string">my.web.proxy.com</span>   <span class="comment">#(optional) The proxy host to use when sending to Datadog</span></span><br><span class="line"><span class="string">metrics.reporter.dghttp.proxyPort:</span> <span class="number">8080</span>               <span class="comment">#(optional) The proxy port to use when sending to Datadog, defaults to 8080</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="flink中的指标项"><a href="#flink中的指标项" class="headerlink" title="flink中的指标项"></a>flink中的指标项</h2><p>在看 flink 指标项时，可以</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><table><thead><tr><th align="left">指标名</th></tr></thead><tbody><tr><td align="left">flink_taskmanager_job_task_operator_dtNumBytesIn</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumBytesInRate</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsIn</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsInRate</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsInResolve</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsInResolveRate</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsOut</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtNumRecordsOutRate</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtDirtyData</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_topic_partition_dtTopicPartitionLag</td></tr><tr><td align="left">flink_taskmanager_job_task_operator_dtEventDelay</td></tr></tbody></table><h3 id="Checkpoint"><a href="#Checkpoint" class="headerlink" title="Checkpoint"></a>Checkpoint</h3><table><thead><tr><th align="left">指标名</th></tr></thead><tbody><tr><td align="left">flink_jobmanager_job_lastCheckpointDuration</td></tr><tr><td align="left">flink_jobmanager_job_lastCheckpointSize</td></tr><tr><td align="left">flink_jobmanager_job_numberOfFailedCheckpoints</td></tr></tbody></table><h3 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h3><table><thead><tr><th>指标名</th></tr></thead><tbody><tr><td>flink_taskmanager_job_task_operator_currentInputWatermark</td></tr><tr><td>flink_taskmanager_job_task_operator_currentOutputWatermark</td></tr><tr><td>flink_taskmanager_job_task_operator_numLateRecordsDropped</td></tr></tbody></table><h3 id="BackPressure"><a href="#BackPressure" class="headerlink" title="BackPressure"></a>BackPressure</h3><table><thead><tr><th>指标名</th></tr></thead><tbody><tr><td>flink_taskmanager_job_task_buffers_inPoolUsage</td></tr><tr><td>flink_taskmanager_job_task_buffers_outPoolUsage</td></tr><tr><td>flink_taskmanager_job_task_buffers_inputQueueLength</td></tr><tr><td>flink_taskmanager_job_task_buffers_outputQueueLength</td></tr></tbody></table><h3 id="Kafka-Connector"><a href="#Kafka-Connector" class="headerlink" title="Kafka Connector"></a>Kafka Connector</h3><table><thead><tr><th>指标名</th></tr></thead><tbody><tr><td>flink_taskmanager_job_task_operator_commitsFailed</td></tr><tr><td>flink_taskmanager_job_task_operator_KafkaConsumer_topic_partition_currentOffsets</td></tr><tr><td>flink_taskmanager_job_task_operator_KafkaConsumer_records_lag_max</td></tr></tbody></table><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><table><thead><tr><th>指标名</th></tr></thead><tbody><tr><td>flink_jobmanager_Status_JVM_CPU_Load</td></tr><tr><td>flink_jobmanager_Status_JVM_CPU_Time</td></tr><tr><td>flink_jobmanager_Status_JVM_GarbageCollector_PS_MarkSweep_Count</td></tr><tr><td>flink_jobmanager_Status_JVM_GarbageCollector_PS_MarkSweep_Time</td></tr><tr><td>flink_jobmanager_Status_JVM_GarbageCollector_PS_Scavenge_Count</td></tr><tr><td>flink_jobmanager_Status_JVM_GarbageCollector_PS_Scavenge_Time</td></tr><tr><td>flink_jobmanager_Status_JVM_Memory_Heap_Max</td></tr><tr><td>flink_jobmanager_Status_JVM_Memory_Heap_Used</td></tr><tr><td>flink_jobmanager_Status_JVM_Memory_NonHeap_Max</td></tr><tr><td>flink_jobmanager_Status_JVM_Memory_NonHeap_Used</td></tr><tr><td>flink_jobmanager_Status_JVM_Threads_Count</td></tr><tr><td>flink_taskmanager_Status_JVM_CPU_Load</td></tr><tr><td>flink_taskmanager_Status_JVM_CPU_Time</td></tr><tr><td>flink_taskmanager_Status_JVM_GarbageCollector_G1_Old_Generation_Count</td></tr><tr><td>flink_taskmanager_Status_JVM_GarbageCollector_G1_Old_Generation_Time</td></tr><tr><td>flink_taskmanager_Status_JVM_GarbageCollector_G1_Young_Generation_Count</td></tr><tr><td>flink_taskmanager_Status_JVM_GarbageCollector_G1_Young_Generation_Time</td></tr><tr><td>flink_taskmanager_Status_JVM_Memory_Heap_Max</td></tr><tr><td>flink_taskmanager_Status_JVM_Memory_Heap_Used</td></tr><tr><td>flink_taskmanager_Status_JVM_Memory_NonHeap_Max</td></tr><tr><td>flink_taskmanager_Status_JVM_Memory_NonHeap_Used</td></tr><tr><td>flink_taskmanager_Status_JVM_Threads_Count</td></tr></tbody></table><h2 id="指标平台化实践"><a href="#指标平台化实践" class="headerlink" title="指标平台化实践"></a>指标平台化实践</h2><p>首先，参考：<a href="https://miaowenting.gitee.io/miaowenting.gitee.io/2020/02/04/Monitor-with-Prometheus-And-Grafana/" target="_blank" rel="noopener">Monitor with Prometheus And Grafana</a>，<br>安装 Prometheus、pushgateway、Grafana 服务，以及学习如何在Grafana中添加指标项图标。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将详细介绍下Flink中的指标实现，包括自带的指标名和如何自定义指标。还会介绍下现在已经支持的reporter，如jmx、slf4j、influxdb、graphite、prometheus、pushgateway等。&lt;br&gt;最后介绍下flink指标平台化实践。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>插件化技术</title>
    <link href="http://yoursite.com/2020/03/29/%E6%8F%92%E4%BB%B6%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2020/03/29/插件化技术/</id>
    <published>2020-03-29T02:37:10.000Z</published>
    <updated>2020-04-05T09:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍代码设计中的插件化实现。涉及到的关键技术点 <code>自定义ClassLoader</code> 和 <code>ServiceLoader</code> 。<br>接着，会说下插件化技术的典型应用场景。</p><a id="more"></a><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><p>参考：<a href="https://miaowenting.gitee.io/miaowenting.gitee.io/2020/02/09/JVM/#more" target="_blank" rel="noopener">JVM</a> 中关于<code>3.2 类的生命周期</code> 介绍。</p><h3 id="显式与隐式加载"><a href="#显式与隐式加载" class="headerlink" title="显式与隐式加载"></a>显式与隐式加载</h3><p>显式：在代码中通过调用 ClassLoader 加载 class 对象，如直接使用 Class.forName(name) 或 this.getClass().getClassLoader().loadClass() 加载 class 对象<br>隐式：通过虚拟机自动加载到内存中，如在加载某个类的 class 文件时，该类的 class 文件中引用了另外一个类的对象，此时额外引用的类将通过 JVM 自动加载到内存中</p><p>一段源程序代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(hello());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成字节码文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac demo.java</span><br></pre></td></tr></table></figure><p>对class文件反汇编：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javap -v -l -c demo.class &gt; Demo.txt</span><br><span class="line"></span><br><span class="line">-v: 不仅会输出行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息</span><br><span class="line">-l: 输出行号和本地变量表信息</span><br><span class="line">-c: 会对当前 class 字节码进行反编译生成汇编代码</span><br></pre></td></tr></table></figure><p>通过文件编译工具来查看demo.txt的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">Classfile /private/tmp/Demo.class</span><br><span class="line">  Last modified 2020-4-4; size 464 bytes</span><br><span class="line">  MD5 checksum 2b2ee02c5a47ef7f4ed5388443f76800</span><br><span class="line">  Compiled from &quot;Demo.java&quot;</span><br><span class="line">public class Demo</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #18.#19        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = Methodref          #5.#20         // Demo.hello:()I</span><br><span class="line">   #4 = Methodref          #21.#22        // java/io/PrintStream.println:(I)V</span><br><span class="line">   #5 = Class              #23            // Demo</span><br><span class="line">   #6 = Class              #24            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               hello</span><br><span class="line">  #12 = Utf8               ()I</span><br><span class="line">  #13 = Utf8               main</span><br><span class="line">  #14 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #15 = Utf8               SourceFile</span><br><span class="line">  #16 = Utf8               Demo.java</span><br><span class="line">  #17 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #18 = Class              #25            // java/lang/System</span><br><span class="line">  #19 = NameAndType        #26:#27        // out:Ljava/io/PrintStream;</span><br><span class="line">  #20 = NameAndType        #11:#12        // hello:()I</span><br><span class="line">  #21 = Class              #28            // java/io/PrintStream</span><br><span class="line">  #22 = NameAndType        #29:#30        // println:(I)V</span><br><span class="line">  #23 = Utf8               Demo</span><br><span class="line">  #24 = Utf8               java/lang/Object</span><br><span class="line">  #25 = Utf8               java/lang/System</span><br><span class="line">  #26 = Utf8               out</span><br><span class="line">  #27 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #28 = Utf8               java/io/PrintStream</span><br><span class="line">  #29 = Utf8               println</span><br><span class="line">  #30 = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  public Demo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  static int hello();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=3, args_size=0</span><br><span class="line">         0: iconst_1</span><br><span class="line">         1: istore_0</span><br><span class="line">         2: iconst_2</span><br><span class="line">         3: istore_1</span><br><span class="line">         4: iload_0</span><br><span class="line">         5: iload_1</span><br><span class="line">         6: iadd</span><br><span class="line">         7: istore_2</span><br><span class="line">         8: iload_2</span><br><span class="line">         9: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">        line 4: 2</span><br><span class="line">        line 5: 4</span><br><span class="line">        line 6: 8</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">    stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: invokestatic  #3                  // Method hello:()I</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 10: 0</span><br><span class="line">        line 11: 9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下 <code>#1 = Methodref          #6.#17         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code>：<br>执行类的构造方法时，首先会执行父类的构造方法，java.lang.Object是任何类的父类，<br>所以这边会首先执行 Object 类的构造方法，#1 会引用 #6、#17 对应的符号常量。</p><p>在JVM中表示两个class对象是否为同一个类对象存在两个必要条件：</p><ul><li>类的完整类名必须一致，包括包名。</li><li>加载这个类的ClassLoader(指ClassLoader实例对象)必须相同。</li></ul><h3 id="Launcher启动类"><a href="#Launcher启动类" class="headerlink" title="Launcher启动类"></a>Launcher启动类</h3><p>Launcher启动类图：<br><img src="Launcher%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="加载器类型"><a href="#加载器类型" class="headerlink" title="加载器类型"></a>加载器类型</h3><ul><li>启动类加载器，由C++实现，没有父类。</li><li>拓展类加载器(ExtClassLoader)，由Java语言实现，父类加载器为null</li><li>系统类加载器(AppClassLoader)，由Java语言实现，父类加载器为ExtClassLoader</li><li>自定义类加载器，父类加载器肯定为AppClassLoader。</li></ul><p>加载器之间的类图关系：<br><img src="ClassLoader%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB.png" alt></p><h4 id="loadClass-String"><a href="#loadClass-String" class="headerlink" title="loadClass(String)"></a>loadClass(String)</h4><p>将类加载请求到来时，先从缓存中查找该类对象，如果不存在就走双亲委派模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            <span class="comment">// 首先判断这个 class 是否已经加载成功，只判断全限定名是否相同</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 先通过父类加载器查找，递归下去，直到 BootstrapClassLoader</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果父加载器为null，则用 BootstrapClassLoader 去加载</span></span><br><span class="line">                        <span class="comment">// 这也解释了 ExtClassLoader 的parent为null，但仍然说 BootstrapClassLoader 是它的父加载器</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果向上委托父加载没有加载成功，则通过 findClass(String) 查找</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                <span class="comment">// 生成最终的Class对象，对应着验证、准备、解析的过程</span></span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="findClass-String"><a href="#findClass-String" class="headerlink" title="findClass(String)"></a>findClass(String)</h4><p>不建议直接覆盖 loadClass() 去打破双亲委派模式，建议把自定义逻辑写在 findClass() 中，findClass() 方法通常是和 defineClass() 方法一起使用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="defineClass-byte-b-int-off-int-len"><a href="#defineClass-byte-b-int-off-int-len" class="headerlink" title="defineClass(byte[] b,int off,int len)"></a>defineClass(byte[] b,int off,int len)</h4><p>将byte字节流解析成JVM 能够识别的Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len,</span><br><span class="line">                                        ProtectionDomain protectionDomain)</span><br><span class="line">       <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">   &#123;</span><br><span class="line">       protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line">       String source = defineClassSourceLocation(protectionDomain);</span><br><span class="line">       Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</span><br><span class="line">       postDefineClass(c, protectionDomain);</span><br><span class="line">       <span class="keyword">return</span> c;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="resolveClass-Class-lt-gt-c"><a href="#resolveClass-Class-lt-gt-c" class="headerlink" title="resolveClass(Class&lt;?&gt; c)"></a>resolveClass(Class&lt;?&gt; c)</h4><p>对应链接阶段，它是native方法，主要对字节码进行验证，为类变量分配内存并设置初始值，将字节码文件中的符号引用转换为直接引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">       resolveClass0(c);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><p>为什么要自定义ClassLoader呢？</p><ul><li>当 class 文件不在 classpath 路径下，默认系统类加载无法找到该 class 文件，此时需要实现一个自定义的 ClassLoader 来加载特定路径下的 class 文件生成 Class 对象</li><li>当一个 class 文件是通过网络传输并且可能会进行相应的加密操作时，需要先对 class 文件进行相应的解密后再加载到 JVM 内存中</li><li>当需要实现热部署功能时，一个 class 文件通过不同的类加载器产生不同 class 对象从而实现热部署功能</li></ul><p>自定义FileClassLoader：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mwt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-04-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_FILE_SUFFIX = <span class="string">".class"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mLibpath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileClassLoader</span><span class="params">(String mLibpath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mLibpath = mLibpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        String classFileName = getClassFileName(name);</span><br><span class="line">        File file = <span class="keyword">new</span> File(mLibpath, classFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    bos.write(len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] data = bos.toByteArray();</span><br><span class="line">            is.close();</span><br><span class="line">            bos.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取java类对应的class文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClassFileName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = name.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name + CLASS_FILE_SUFFIX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name.substring(index + <span class="number">1</span>) + CLASS_FILE_SUFFIX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p>在Java应用中存在着很多服务提供者接口，Service Provider Interface，这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等。这些SPI的接口属于Java核心库，一般存在于rt.jar中，<br>由 Bootstrap 类加载器加载，而 SPI 的第三方实现代码则是作为 Java 应用所依赖的jar包被存放在 classpath 路径下。SPI 接口中的代码经常需要加载第三方实现类并调用其相关方法，但 SPI 的核心接口类是由 Bootstrap 类加载器加载，由于双亲委派模式的存在，Bootstrap 类加载器也无法反向委托 AppClassLoader 加载 SPI 的实现类。<br>此时，就需要一种特殊的类加载来加载第三方的类库，而线程上下文加载器就是很好的选择，可以破坏双亲委派模型。</p><p>如果没有手动设置上下文类加载器，线程将继承其父线程的上下文类加载器。<br>如在Launcher类中，会将AppClassLoader设置到当前线程上下文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now create the class loader to use to launch the application</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        loader = AppClassLoader.getAppClassLoader(extcl);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(</span><br><span class="line">            <span class="string">"Could not create application class loader"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Also set the context class loader for the primordial thread.</span></span><br><span class="line">    <span class="comment">// 设置AppClassLoader为线程上下文类加载器</span></span><br><span class="line">    Thread.currentThread().setContextClassLoader(loader);</span><br></pre></td></tr></table></figure><h3 id="ServiceLoader"><a href="#ServiceLoader" class="headerlink" title="ServiceLoader"></a>ServiceLoader</h3><p>首先看下 ServiceLoader 的成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">     <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 指明了路径是在"META-INF/services“下</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"META-INF/services/"</span>;</span><br><span class="line">  <span class="comment">// 表示正在加载的服务的类或接口</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line">  <span class="comment">// 使用的类加载器</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line">  <span class="comment">// 创建ServiceLoader时获取的访问控制上下文</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line">  <span class="comment">// 缓存的服务提供者集合</span></span><br><span class="line">  <span class="keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 内部使用的迭代器，用于类的懒加载，只有在迭代时才加载</span></span><br><span class="line">  <span class="comment">// ServiceLoader 的实际加载过程是交给 LazyIterator 来做的</span></span><br><span class="line">  <span class="keyword">private</span> LazyIterator lookupIterator;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用其静态的load方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">  ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">  <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             ClassLoader loader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注下LazyIterator中的nextService方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> S <span class="title">nextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">  String cn = nextName;</span><br><span class="line">  nextName = <span class="keyword">null</span>;</span><br><span class="line">  Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在迭代器的next中才会进行真正的类加载</span></span><br><span class="line">    c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">    fail(service,</span><br><span class="line">                  <span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">    fail(service,</span><br><span class="line">                  <span class="string">"Provider "</span> + cn  + <span class="string">" not a subtype"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    S p = service.cast(c.newInstance());</span><br><span class="line">    providers.put(cn, p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">    fail(service,</span><br><span class="line">                  <span class="string">"Provider "</span> + cn + <span class="string">" could not be instantiated"</span>,</span><br><span class="line">                  x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> Error();</span><br><span class="line">  <span class="comment">// This cannot happen</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p><img src="JDBC%E9%A9%B1%E5%8A%A8%E5%8C%85%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt></p><p>DriverManager类的static块中会加载所用的Driver实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DriverManager是Java核心包rt.jar的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverManager</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略不必要的代码</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        loadInitialDrivers();<span class="comment">//执行该方法</span></span><br><span class="line">        println(<span class="string">"JDBC DriverManager initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//loadInitialDrivers方法</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sun.misc.Providers()</span><br><span class="line">     AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//加载外部的Driver的实现类</span></span><br><span class="line">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">              <span class="comment">//省略不必要的代码......</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ServiceLoader中的load方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过线程上下文类加载器加载，默认情况下就是AppClassLoader</span></span><br><span class="line">    ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不同的数据库驱动包中的 META-INF/services 目录下都会有一个名为 <code>java.sql.Driver</code> 的文件，记录Driver的实现类。<br>Mysql驱动包中：<br><img src="MySQL%E7%9A%84SPI%E9%A9%B1%E5%8A%A8%E7%B1%BB.png" alt></p><p>Oracle驱动包中：<br><img src="Oracle%E7%9A%84SPI%E9%A9%B1%E5%8A%A8%E7%B1%BB.png" alt></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="Flink中的插件化应用"><a href="#Flink中的插件化应用" class="headerlink" title="Flink中的插件化应用"></a>Flink中的插件化应用</h3><h3 id="DataX插件加载原理"><a href="#DataX插件加载原理" class="headerlink" title="DataX插件加载原理"></a>DataX插件加载原理</h3><p>插件的加载都是使用ClassLoader动态加载。 为了避免类的冲突，对于每个插件的加载，对应着独立的加载器。加载器由JarLoader实现，插件的加载接口由LoadUtil类负责。当要加载一个插件时，需要实例化一个JarLoader，然后切换thread class loader之后，才加载插件。</p><ul><li><p>自定义JarLoader<br>JarLoader 继承 URLClassLoader，扩充了可以加载目录的功能。可以从指定的目录下，把传入的路径，及其子路径、以及路径中的jar文件加入到classpath。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JarLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JarLoader</span><span class="params">(String[] paths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(paths, JarLoader.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JarLoader</span><span class="params">(String[] paths, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用getURLS，获取所有的jar包路径</span></span><br><span class="line">        <span class="keyword">super</span>(getURLs(paths), parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有的jar包</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> URL[] getURLs(String[] paths) &#123;</span><br><span class="line">        <span class="comment">// 获取包括子目录的所有目录路径</span></span><br><span class="line">        List&lt;String&gt; dirs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String path : paths) &#123;</span><br><span class="line">            dirs.add(path);</span><br><span class="line">            <span class="comment">// 获取path目录和其子目录的所有目录路径</span></span><br><span class="line">            JarLoader.collectDirs(path, dirs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历目录，获取jar包的路径</span></span><br><span class="line">        List&lt;URL&gt; urls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String path : dirs) &#123;</span><br><span class="line">            urls.addAll(doGetURLs(path));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urls.toArray(<span class="keyword">new</span> URL[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归的方式，获取所有目录</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collectDirs</span><span class="params">(String path, List&lt;String&gt; collector)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// path为空，终止</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == path || StringUtils.isBlank(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// path不为目录，终止</span></span><br><span class="line">        File current = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!current.exists() || !current.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历完子文件，终止</span></span><br><span class="line">        <span class="keyword">for</span> (File child : current.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!child.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            collector.add(child.getAbsolutePath());</span><br><span class="line">            collectDirs(child.getAbsolutePath(), collector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;URL&gt; <span class="title">doGetURLs</span><span class="params">(<span class="keyword">final</span> String path)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        File jarPath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="comment">// 只寻找文件以.jar结尾的文件</span></span><br><span class="line">        FileFilter jarFilter = <span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.getName().endsWith(<span class="string">".jar"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        File[] allJars = <span class="keyword">new</span> File(path).listFiles(jarFilter);</span><br><span class="line">        List&lt;URL&gt; jarURLs = <span class="keyword">new</span> ArrayList&lt;URL&gt;(allJars.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allJars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jarURLs.add(allJars[i].toURI().toURL());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> DataXException.asDataXException(</span><br><span class="line">                        FrameworkErrorCode.PLUGIN_INIT_ERROR,</span><br><span class="line">                        <span class="string">"系统加载jar包出错"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jarURLs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LoadUtil类<br>LoadUtil管理着插件的加载器，调用getJarLoader返回插件对应的加载器。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载器的HashMap, Key由插件类型和名称决定, 格式为plugin.&#123;pulginType&#125;.&#123;pluginName&#125;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, JarLoader&gt; jarLoaderCenter = <span class="keyword">new</span> HashMap&lt;String, JarLoader&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> JarLoader <span class="title">getJarLoader</span><span class="params">(PluginType pluginType, String pluginName)</span> </span>&#123;</span><br><span class="line">        Configuration pluginConf = getPluginConf(pluginType, pluginName);</span><br><span class="line"></span><br><span class="line">        JarLoader jarLoader = jarLoaderCenter.get(generatePluginKey(pluginType,</span><br><span class="line">                pluginName));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == jarLoader) &#123;</span><br><span class="line">            <span class="comment">// 构建加载器JarLoader</span></span><br><span class="line">            <span class="comment">// 获取jar所在的目录</span></span><br><span class="line">            String pluginPath = pluginConf.getString(<span class="string">"path"</span>);</span><br><span class="line">            jarLoader = <span class="keyword">new</span> JarLoader(<span class="keyword">new</span> String[]&#123;pluginPath&#125;);</span><br><span class="line">            <span class="comment">//添加到HashMap中</span></span><br><span class="line">            jarLoaderCenter.put(generatePluginKey(pluginType, pluginName),</span><br><span class="line">                    jarLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jarLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pluginTypeNameFormat = <span class="string">"plugin.%s.%s"</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 生成HashMpa的key值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">generatePluginKey</span><span class="params">(PluginType pluginType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String pluginName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(pluginTypeNameFormat, pluginType.toString(),</span><br><span class="line">                pluginName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当获取类加载器，就可以调用 LoadUtil 来加载插件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载插件类</span></span><br><span class="line"><span class="comment">// pluginType 代表插件类型</span></span><br><span class="line"><span class="comment">// pluginName 代表插件名称</span></span><br><span class="line"><span class="comment">// pluginRunType 代表着运行类型，Job或者Task</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Class&lt;? extends AbstractPlugin&gt; loadPluginClass(</span><br><span class="line">    PluginType pluginType, String pluginName,</span><br><span class="line">    ContainerType pluginRunType) &#123;</span><br><span class="line">    <span class="comment">// 获取插件配置</span></span><br><span class="line">    Configuration pluginConf = getPluginConf(pluginType, pluginName);</span><br><span class="line">    <span class="comment">// 获取插件对应的ClassLoader</span></span><br><span class="line">    JarLoader jarLoader = LoadUtil.getJarLoader(pluginType, pluginName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 加载插件的class</span></span><br><span class="line">        <span class="keyword">return</span> (Class&lt;? extends AbstractPlugin&gt;) jarLoader</span><br><span class="line">            .loadClass(pluginConf.getString(<span class="string">"class"</span>) + <span class="string">"$"</span></span><br><span class="line">                       + pluginRunType.value());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> DataXException.asDataXException(FrameworkErrorCode.RUNTIME_ERROR, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ClassLoaderSwapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderSwapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存切换之前的加载器</span></span><br><span class="line">    <span class="keyword">private</span> ClassLoader storeClassLoader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">setCurrentThreadClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存切换前的加载器</span></span><br><span class="line">        <span class="keyword">this</span>.storeClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="comment">// 切换加载器到classLoader</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(classLoader);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.storeClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">restoreCurrentThreadClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ClassLoader classLoader = Thread.currentThread()</span><br><span class="line">                .getContextClassLoader();</span><br><span class="line">        <span class="comment">// 切换到原来的加载器</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(<span class="keyword">this</span>.storeClassLoader);</span><br><span class="line">        <span class="comment">// 返回切换之前的类加载器</span></span><br><span class="line">        <span class="keyword">return</span> classLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换类加载器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">ClassLoaderSwapper classLoaderSwapper = ClassLoaderSwapper.newCurrentThreadClassLoaderSwapper();</span><br><span class="line"></span><br><span class="line">ClassLoader classLoader1 = <span class="keyword">new</span> URLClassLoader();</span><br><span class="line"><span class="comment">// 切换加载器classLoader1</span></span><br><span class="line">classLoaderSwapper.setCurrentThreadClassLoader(classLoader1);</span><br><span class="line">Class&lt;? extends MyClass&gt; myClass = classLoader1.loadClass(<span class="string">"MyClass"</span>);</span><br><span class="line"><span class="comment">// 切回加载器</span></span><br><span class="line">classLoaderSwapper.restoreCurrentThreadClassLoader();</span><br></pre></td></tr></table></figure><h3 id="解决大数据引擎及版本众多问题"><a href="#解决大数据引擎及版本众多问题" class="headerlink" title="解决大数据引擎及版本众多问题"></a>解决大数据引擎及版本众多问题</h3><h3 id="WMRouter中对ServiceLoader的改进与使用"><a href="#WMRouter中对ServiceLoader的改进与使用" class="headerlink" title="WMRouter中对ServiceLoader的改进与使用"></a>WMRouter中对ServiceLoader的改进与使用</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍代码设计中的插件化实现。涉及到的关键技术点 &lt;code&gt;自定义ClassLoader&lt;/code&gt; 和 &lt;code&gt;ServiceLoader&lt;/code&gt; 。&lt;br&gt;接着，会说下插件化技术的典型应用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>朋友只是人生过客</title>
    <link href="http://yoursite.com/2020/03/28/%E6%9C%8B%E5%8F%8B%E5%8F%AA%E6%98%AF%E4%BA%BA%E7%94%9F%E8%BF%87%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/03/28/朋友只是人生过客/</id>
    <published>2020-03-28T13:03:17.000Z</published>
    <updated>2021-05-24T06:44:31.711Z</updated>
    
    <content type="html"><![CDATA[<p>散了很好啊 就是<br>人的每一分钟都在变化<br>所以也要接受别人有变化</p><a id="more"></a><p>如果那个人跟你一日为友就终身为友<br>你应该心里很紧张才对 就是<br>怎么啦 我们两个都从此不变化了吗<br>所以 如果有了变化<br>然后人际关系跟着有了变化<br>他（她）是你某一阶段最好的朋友<br>然后他当完了他该当的朋友<br>他就去当别人的朋友了<br>就接受人生的变化是最好的态度</p><p>不要轻易去依赖一个人<br>它会成为你的习惯<br>当分别来临时<br>你失去的不是某个人<br>而是某一种精神寄托<br>无论何时何地<br>都要学会独立行走<br>它会让你走的更坦然<br>更处变不惊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;散了很好啊 就是&lt;br&gt;人的每一分钟都在变化&lt;br&gt;所以也要接受别人有变化&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>关于数据中台的思考与总结</title>
    <link href="http://yoursite.com/2020/03/24/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/24/关于数据中台的思考与总结/</id>
    <published>2020-03-24T12:52:27.000Z</published>
    <updated>2021-05-24T06:55:14.022Z</updated>
    
    <content type="html"><![CDATA[<p>本文将总结下数据中台的相关理论知识。<br>Flink平台化需要改进的点等等。</p><p>参考：<br><a href="http://search.m.dangdang.com/search.php?keyword=%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%20%E8%AE%A9%E6%95%B0%E6%8D%AE%E7%94%A8%E8%B5%B7%E6%9D%A5" target="_blank" rel="noopener">《数据中台：让数据用起来》</a></p><a id="more"></a><h2 id="数据中台"><a href="#数据中台" class="headerlink" title="数据中台"></a>数据中台</h2><p><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E4%BA%A7%E5%93%81%E6%9E%B6%E6%9E%84.png" alt></p><h3 id="数据汇聚"><a href="#数据汇聚" class="headerlink" title="数据汇聚"></a>数据汇聚</h3><p>数据汇聚是数据中台必须提供的核心工具，把各种异构网络、异构数据源的数据方便地采集到数据中台中进行集中存储，为后续的加工建模做准备。数据汇聚方式一般有数据库同步、埋点、网络爬虫、消息队列等；从汇聚的时效性来分，有离线批量汇聚和实时采集。</p><ul><li>数据采集工具<br>Canal、DataX、Sqoop</li></ul><h3 id="数据开发"><a href="#数据开发" class="headerlink" title="数据开发"></a>数据开发</h3><p>数据开发模块主要面向开发人员、分析人员，提供离线、实时、算法开发工具。</p><h4 id="离线开发"><a href="#离线开发" class="headerlink" title="离线开发"></a>离线开发</h4><ol><li>作业调度</li></ol><ul><li>依赖调度：所有父作业运行完成后，当前作业才能开始运行。图64中的作业B，只有父作业A和C运行完成后，才能开始被调度。</li><li>时间调度：可指定作业的调度开始时间。图64中的作业B，只有到达05：00后才能开始被调度。</li></ul><ol start="2"><li><p>基线控制<br>在大数据离线作业中，作业执行时间较长，经常遇到急着用数据发现数据还没出来的情况。采用算法对作业完成时间进行智能预测，根据预测，当作业无法正常产出且动态调整无法完成时，调度中心会及时通过监控告警通知运维值班人员提前介入处理，为大数据作业执行留出充裕的时间。</p></li><li><p>异构存储<br>企业内部的存储计算引擎呈多元化趋势。离线开发中心针对每种类型的计算引擎会开发不同的组件，例如，针对Oracle开发Oracle插件，针对Hadoop体系分别开发出Hive、Spark、MR等插件。用户在界面新建各种作业类型，在执行时自动根据作业的类型寻找相应的插件来运行作业。</p></li><li><p>代码校验<br>对于常见的SQL任务类型，SQL检查器会做好严格的管控，做到事前发现问题。</p></li><li><p>多环境级联<br>通过环境级联的方式灵活支持企业的各类环境需求，方便对资源、权限进行控制和隔离。每个环境有独立的Hive数据库、Yarn调度队列，甚至不同的Hadoop集群。常见的环境如下：</p></li></ol><ul><li>单一环境：只有一个生产环境，内部管理简单。</li><li>经典环境：开发环境中存放脱敏数据、供开发测试使用，上生产环境走发布流程，用于真实数据生产。<br>任务、资源和函数必须在开发环境下进行新建、修改或删除，再经过提交、创建发布包、同意发布三个操作后，才能同步到生产环境。</li><li>复杂环境：企业有外部人员和内部人员，会给外部人员提供一个脱敏管控的环境，外部人员开发完的数据模型经过测试后发布到内部开发环境。</li></ul><ol start="6"><li><p>推荐依赖<br>随着业务的不断深入，数据开发人员需要开发的作业会不断累加。既能保证准确找到需要定位的上游作业，又能保证不会形成环路。<br><img src="%E4%BE%9D%E8%B5%96%E6%8E%A8%E8%8D%90.png" alt><br>获取推荐依赖的核心原理在于上下游作业输入和输出的表级血缘依赖图；<br>通过血缘分析当前作业的输入和输出，找到合适的上游作业；<br>对合适的作业进行环路检测，剔除存在闭环的作业；<br>返回合适的节点列表。</p></li><li><p>数据权限<br>企业内部计算引擎多样化，数据权限管理面临如下问题：</p></li></ol><ul><li>部分引擎拥有独立的权限管理系统（例如Oracle、HANA、LibrA），导致权限申请需要到每一种引擎上单独操作，让使用变得复杂。</li><li>同一种计算引擎，不同厂商的权限系统有多种，例如Hadoop自身无数据权限系统，由不同厂商各自去实现，目前主要有两种策略：<br>RBAC（Role-Based Access Control）：如Cloudera用的是Sentry，华为的FI也是类似的机制<br>PBAC（Policy-Based Access Control）：如Hortonworks用的Ranger</li><li>数据权限是由大数据集群或数据库运维人员管理的，开发人员无法直接操作或者接触，所有的权限申请都需要运维人员开通，造成运维人员负担过重。在实际开发中，一般需要运维人员把整个库的权限授权给某个开发负责人，然后库里面的表、字段、函数的权限管理由开发负责人负责就行。<br>数据权限管理中心提供界面化操作，数据申请方直接在页面上进行各种权限的申请，数据管理方在界面上审核权限，执行同意或拒绝操作。同时，所有权限的申请、审批都会有记录，便于进行权限审计。在统一数据权限服务中，会对接底层的各种权限管理系统，例如Sentry、Ranger、Oracle，同时对数据权限管理中心提供服务，执行权限的申请、授权、撤销等操作。</li></ul><h4 id="实时开发"><a href="#实时开发" class="headerlink" title="实时开发"></a>实时开发</h4><ol><li>元数据管理</li><li>SQL驱动</li><li>组件化开发</li></ol><h3 id="智能运维"><a href="#智能运维" class="headerlink" title="智能运维"></a>智能运维</h3><p>任务的管理、代码发布、运维、监控、告警等一系列集成工具，方便使用，提升效率。重跑、重跑下游、补数据。</p><h3 id="数据体系"><a href="#数据体系" class="headerlink" title="数据体系"></a>数据体系</h3><p>有了数据汇聚、数据开发模块，中台已经具备传统数据仓库（后面简称：数仓）平台的基本能力，可以做数据的汇聚以及各种数据开发，就可以建立企业的数据体系。之前说数据体系是中台的血肉，开发、管理、使用的都是数据。</p><p>中台数据体系应具备以下特征：</p><ul><li>覆盖全域数据：数据集中建设、覆盖所有业务过程数据，业务中台在数据体系中总能找到需要的数据。</li><li>结构层次清晰：纵向的数据分层、横向主题域、业务过程划分，让整个层次结构清晰易理解。</li><li>数据准确一致：定义一致性指标，统一命名、统一业务含义、统一计算口径，并有专业团队负责建模，保证数据的准确一致。</li><li>性能提升：统一的规划设计，选用合理的数据模型，清晰的定义并统一规范，并且考虑使用场景，使整体性能更好。</li><li>降低成本：数据体系的建设使得数据能被业务共享，这避免了大量烟囱式的重复建设，节约了计算、存储和人力成本。</li><li>方便易用：易用的总体原则是越往后越能方便地直接使用数据，把一些复杂的处理尽可能前置，必要时做适当的冗余处理。</li></ul><p>不同行业的数据体系建设：</p><ul><li><p>地产行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%9C%B0%E4%BA%A7%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>证券行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E8%AF%81%E5%88%B8%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>零售行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E9%9B%B6%E5%94%AE%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>制造行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E5%88%B6%E9%80%A0%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>传媒行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E4%BC%A0%E5%AA%92%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>检务行业<br><img src="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%A3%80%E5%8A%A1%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.png" alt></p></li></ul><ol><li>贴源数据层ODS<br>对各业务系统数据进行采集、汇聚，尽可能保留原始业务流程数据，与业务系统基本保持一致，仅做简单整合、非结构化数据结构化处理或者增加标识数据日期描述信息，不做深度清洗加工。<br>表名：ODS_系统简称_业务系统表名<br>字段名：与业务系统字段名保持一致，字段类型也尽可能保持一致<br>对于数据量比较大的业务表，采用增量同步的方式，则要同时建立增量表和全量表，增量表命名加后缀：ODS_系统简称_业务系统表名_delta。<br>对于日志、文件等半结构数据，不仅要存储原始数据，还要存储结构化之后的数据。</li></ol><p>使用DataX同步数据步骤：<br>1）确定业务系统源表与贴源数据层目标表<br>2）配置数据字段映射关系，目标表可能会增加采集日期、分区、原系统标识等必要信息，业务相关内容不做转换<br>3）如果是增量同步或着有条件的同步部分数据，则配置数据同步条件<br>4）清理目标表对应数据<br>5）启动同步任务，往贴源数据层目标表导入数据<br>6）验证任务是否可以正确运行，并且采集到准确数据<br>7）发布采集任务，加入生产调度，并配置相关限速、容错、质量监控、告警机制</p><ol start="2"><li>统一数仓层DW</li></ol><ul><li>明细数据层DWD</li><li>汇总数据层DWS<br>与传统数据仓库功能基本一致，对全历史业务过程数据进行建模存储。对来源于业务系统的数据进行重新组织。业务系统是按照业务流程方便操作的方式来组织数据的，而统一数仓层从业务易理解的视角来重新组织，定义一致的指标、维度，各业务板块、业务域按照统一规范独立建设，从而形成统一规范的标准业务数据体系。</li></ul><ol start="3"><li><p>标签数据层TDM<br>面向对象建模，对跨业务板块、跨数据域的特定对象数据进行整合，通过IDMapping把各个业务板块、各个业务过程中的同一对象的数据打通，形成对象的全域标签体系，方便深度分析、挖掘、应用。<br><img src="%E5%AE%A2%E6%88%B7%E6%A0%87%E7%AD%BE%E4%BD%93%E7%B3%BB.png" alt></p></li><li><p>应用数据层ADS<br>按照业务的需要从统一数仓层、标签数据层抽取数据，并面向业务的特殊需要加工业务特定数据，以满足业务及性能需求，向特定应用组装应用数据。</p></li></ol><h3 id="数据资产管理"><a href="#数据资产管理" class="headerlink" title="数据资产管理"></a>数据资产管理</h3><p>数据资产管理包括对数据资产目录、元数据、数据质量、数据血缘、数据生命周期等进行管理和展示，以一种更直观的方式展现企业的数据资产，提升企业的数据意识。<br>数据资产对上支持以价值挖掘和业务赋能为导向的数据应用开发，对下依托大数据平台实现数据全生命周期的管理，并对企业数据资产的价值、质量进行评估，促进企业数据资产不断自我完善，持续向业务输出动力。</p><h4 id="数据治理"><a href="#数据治理" class="headerlink" title="数据治理"></a>数据治理</h4><p>传统的数据治理通常包含数据标准管理、元数据管理、数据质量管理、数据安全管理、数据生命周期管理等内容。</p><h3 id="数据服务体系"><a href="#数据服务体系" class="headerlink" title="数据服务体系"></a>数据服务体系</h3><p>前面利用数据汇聚、数据开发建设企业的数据资产，利用数据管理展现企业的数据资产，但是并没有发挥数据的价值。数据服务体系就是把数据变为一种服务能力，通过数据服务让数据参与到业务，<br>快速开发企业的业务中台等。</p><h4 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h4><p>输入特定的查询条件，返回该条件下的数据，以API形式供上层应用调用。<br>1）支持配置查询标识，底层数据组织一般会对该标识建立索引，以加快查询速度<br>2）支持配置过滤项<br>3）支持查询结果配置，包括数据排序规则和分页规则。</p><h4 id="分析服务"><a href="#分析服务" class="headerlink" title="分析服务"></a>分析服务</h4><p>借助分析组件高效的大数据分析能力，对数据进行关联分析，分析结果通过API形式供上层应用调用。<br>1）支持多源数据接入：企业的数据经过清洗加工转换成数据资产后，最终通过服务作用于业务系统，基于企业异构存储的现状，要求分析服务能够支持与Hive、ES、Greenplum、MySQL、Oracle、本地文件等多种数据源进行连接。<br>2）高性能即席查询：随着企业数据爆发式增长，传统的数据分析工具遇到分析能力的瓶颈，也就是对大数据量的分析越来越乏力。因此，这就要求分析服务内置高速计算引擎，以对数据进行高性能的即席计算，实现亿级数据毫秒级（至多秒级）分析和计算，减少用户等待时间。<br>3）多维数据分析<br>分析服务除了支持常规的数据分析、上卷下钻、切片切块之外，还应该支持多维的数据分析以及深层次的数据挖掘，发现数据背后的关联关系。<br>4）灵活对接业务系统</p><h4 id="推荐服务"><a href="#推荐服务" class="headerlink" title="推荐服务"></a>推荐服务</h4><p>按约定的格式提供历史日志行为数据和实时访问数据，推荐模型就会生成相应的推荐API，从而为上层应用提供推荐服务。<br>推荐服务即所谓的千人千面，对不同的人对物的行为进行数据挖掘，构建每个人与物之间的关系程度，来推荐人、物以满足用户的兴趣爱好，以提升用户对业务的粘性。每个人打开手机淘宝看到的内容都不一样，这就是一种基于人的兴趣爱好的推荐服务能力。<br>1）支持不同行业的推荐：不同行业背后的推荐逻辑是有区别的<br>2）支持不同场景的推荐：以内容资讯为例，在用户冷启动场景下，应该推荐哪些资讯？在用户已有浏览行为的场景下，又该为其推荐哪些资讯？<br>3）支持推荐效果优化：从导入的原始数据开始，经过推荐组件生成推荐数据，再根据用户的浏览数据不断修正推荐模型，从而使推荐效果不断优化</p><h4 id="圈人服务"><a href="#圈人服务" class="headerlink" title="圈人服务"></a>圈人服务</h4><p>从全量用户数据中，基于标签组合筛选符合指定特征条件的人群，并通过API形式供上层应用调用。<br>1）支持人群圈选：通过SQL代码或标签取值组合等多种方式，实现人员查找，帮用户找到对的人群<br>2）支持人群计量：营销部门或者广告公司使用圈人服务圈选出目标人群后，往往还要考虑人群量是否符合预期，因为预算有限，不可能不计成本的对人群进行营销。<br>3）支持多渠道对接：将人群名单导出到相应的下游系统。最简单的名单导出方式是先下载文件，再由业务人员导入相应的业务系统中。或者直接对接到短信系统、微信投放接口、营销活动系统等。</p><h2 id="离线平台"><a href="#离线平台" class="headerlink" title="离线平台"></a>离线平台</h2><h3 id="苏宁"><a href="#苏宁" class="headerlink" title="苏宁"></a>苏宁</h3><p><a href="https://www.infoq.cn/article/suning-big-data" target="_blank" rel="noopener">苏宁大数据离线任务开发调度平台实践</a><br><a href="https://www.infoq.cn/article/xTvBg1_9iUL0z5Pjf0Os" target="_blank" rel="noopener">苏宁大数据离线任务开发调度平台实践：任务调度模块架构设计</a></p><p>苏宁离线平台产品功能图：<br><img src="%E8%8B%8F%E5%AE%81%E7%A6%BB%E7%BA%BF%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81%E5%8A%9F%E8%83%BD%E5%9B%BE.png" alt></p><p>苏宁调度模块功能图：<br><img src="%E8%8B%8F%E5%AE%81%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%E5%9B%BE.png" alt></p><p>苏宁离线平台整体架构图：<br><img src="%E8%8B%8F%E5%AE%81%E7%A6%BB%E7%BA%BF%E5%B9%B3%E5%8F%B0%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><p>跨任务流依赖的实现：<br>FTP事件机制，即在 FTP 服务器上建立标识文件，一个事件对应一个标识文件地址，当 FTP 服务器上的标识文件生成的时候，我们认为业务系统已经完成作业，需要触发平台任务执行。</p><p>“华佗”平台，实施任务诊断：<br><img src="%E8%8B%8F%E5%AE%81%E5%8D%8E%E4%BD%97%E5%B9%B3%E5%8F%B0%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E8%AF%8A%E6%96%AD.png" alt></p><p>立即触发的任务，放入DelayQueue的队列头部<br>周期调度的任务，使用Quartz<br>依赖触发的任务，使用zk，各个子节点监听自己的父节点，所有父节点执行完毕则可触发执行</p><h2 id="实时平台"><a href="#实时平台" class="headerlink" title="实时平台"></a>实时平台</h2><h3 id="美团点评"><a href="#美团点评" class="headerlink" title="美团点评"></a>美团点评</h3><p><img src="%E7%9B%91%E6%8E%A7%E8%AE%BE%E8%AE%A1_%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84.png" alt></p><p>使用了Grafana，可以内嵌到自己的平台。</p><h3 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h3><p> SQL化编程</p><p> DAG拖拽编程</p><p> 一体化托管运维</p><p>实时平台由实时传输和实时计算两部分组成，平台底层统一管理元数据、血缘、权限以及作业运维等。实时传输主要负责将数据传入到大数据体系中。实时计算基于 BSQL 提供各种应用场景支持。</p><p>如下图所示，实时传输有 APP 日志、数据库 Binlog、服务端日志或系统日志。bilibili 内部的 Lancer 系统解决数据落地到 Kafka 或 HDFS。计算体系主要围绕 Saber 构建一套 BSQL，底层基于 YARN 进行调度管理。</p><p>上层核心基于 Flink 构建运行池。再向上一层满足多种维表场景，包括 MySQL、Redis、HBase。状态（State）部分在 RocksDB 基础上，还扩展了 MapDB、Redis。Flink 需要 IO 密集是很麻烦的问题，因为 Flink 的资源调度体系内有内存和 CPU，但 IO 单位未做统一管理。当某一个作业对 IO 有强烈的需求时，需要分配很多以 CPU 或内存为单位的资源，且未必能够很好的满足 IO 的扩展。所以本质上 bilibili 现阶段是将 IO 密集的资源的 State 转移到 Redis 上做缓解。数据经过 BSQL 计算完成之后传输到实时数仓，如 Kafka、HBase、ES 或 MySQL、TiDB。最终到 AI 或 BI、报表以及日志中心。<br><img src="%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE_bilibili.png" alt></p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul><li>AI工程方向，解决了广告、搜索、推荐的流式Joiner和维表Joiner</li><li>实时计算的特征支持，支持 Player 以及 CDN 的质量监控。包括直播、PCU、卡顿率、CDN 质量等；</li><li>用户增长，即如何借助实时计算进行渠道分析、调整渠道投放效果；</li><li>实时 ETL，包括 Boss 实时播报、实时大屏、看板等。</li></ul><h3 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h3><p>目前网易流计算覆盖了绝大多数场景，包括广告、电商大屏、ETL、数据分析、推荐、风控、搜索、直播等。</p><h4 id="事件管理"><a href="#事件管理" class="headerlink" title="事件管理"></a>事件管理</h4><p>对于分布式平台的任务操作而言，当前任务启动过程中只允许一个人操作，而不允许两个人同时操作，这就需要以下几个模块来共同配合：</p><ul><li>Server：事件执行的发起者，接受事件的请求，进行数据校验，拼装，将事件发送给 Kernel 执行。</li><li>Kernel：事件具体逻辑的执行者，根据请求向集群发送指令(Shell 脚本方式)。</li><li>Admin：事件执行结果的确认者，根据事件类型，获取事件的最终结果，保证结果的正确性。</li></ul><p><img src="%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86_%E7%BD%91%E6%98%93.png" alt></p><p>以启动场景为例：</p><p>首先，Server 会接收到来自用户的启动请求，之后会创建一个分布式锁，Admin 会监控这个锁。</p><p>然后， Server 向 Kernel 提交任务，提交之后会立即返回，返回之后就会立即更新数据库中的状态，将状态更新为启动中，这样在页面上用户就能够看到任务是启动中的状态了。</p><p>接下来，Server 就会等待内核的 Shell 脚本的执行结果，如果 Shell 脚本执行成功了，就会去写 Zookeeper，写完 Zookeeper 之后 Admin 模块就会马上检测到 Zookeeper 节点有状态发生了修改，Admin 会立即去获取 YARN 上的任务状态，如果获取到任务状态是运行中，就将数据库的任务状态更新为运行中，这会在前端看到任务就已经是运行状态了。</p><p>最后一步是 Admin 更为完数据库之后，会释放掉 Zookeeper 上的锁，其他人这时候就可以操作这个任务了。</p><p>Server、Kernel 和 Admin 这三个模块都是不可靠的，那么如何保证其稳定和高可用呢？Server 可以通过部署多个，水平扩展来实现，Kernel 则会由 Server 来进行监听，当发现 Kernel 挂了，可以由 Server 重新拉起或者重新创建。而 Admin 的高可用则是通过热备来实现的，如果主 Admin 挂掉了，可以马上迁移到备 Admin，备 Admin 可以迅速将元数据以及任务信息全部加载进来接替工作，进而实现高可用。</p><h4 id="平台任务状态管理"><a href="#平台任务状态管理" class="headerlink" title="平台任务状态管理"></a>平台任务状态管理</h4><p>平台的任务状态主要由 Server 和 Admin 来控制。Server 主要控制初始状态的执行，Admin 则主要负责控制所有与 YARN 相关的状态交互。</p><p><img src="%E5%B9%B3%E5%8F%B0%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E5%9B%BE_%E7%BD%91%E6%98%93.png" alt></p><h4 id="任务调试"><a href="#任务调试" class="headerlink" title="任务调试"></a>任务调试</h4><p>SQL 类型的任务支持调试功能，用户可以根据不同的 source 表和 dim 表，上传不同的 csv 文件作为输入数据，进行调试。调试执行由指定的 kernel 来完成，sloth-server 负责组装请求，调用 kernel，返回结果，搜集日志。</p><p><img src="%E4%BB%BB%E5%8A%A1%E8%B0%83%E8%AF%95_%E7%BD%91%E6%98%93.png" alt></p><h4 id="日志检索"><a href="#日志检索" class="headerlink" title="日志检索"></a>日志检索</h4><p>在 YARN 集群的每个节点上面部署 Filebeat，通过 Filebeat 将节点上面的任务日志写入到 Kafka 消息队列中，然后通过 Logstash 进行解析处理，之后写入 ES 集群中。主要用于两个用途，一个是通过界面 Kibana 来提供给开发和运维人员使用，另外一个就是将运行时状态的任务日志直接在界面上展示供用户进行搜索和查看。<br><img src="%E6%97%A5%E5%BF%97%E6%A3%80%E7%B4%A2_%E7%BD%91%E6%98%93.png" alt></p><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><p>在监控方面，使用的是 influxdb metric report 组件对于指标进行监控。时序数据库使用的是网易自研的 ntsdb 时序数据库，其能够支持动态扩展和高可用等功能。监控指标的使用方式有两种：<br>一种是通过 Grafana 的界面来查看指标；<br>另外一种是报警模块会从Ntsdb中获取相关指标数据并进行监控报警。</p><p><img src="%E7%9B%91%E6%8E%A7_%E7%BD%91%E6%98%93.png" alt></p><h4 id="报警"><a href="#报警" class="headerlink" title="报警"></a>报警</h4><p>Sloth 流计算平台支持常见的任务失败，数据滞留延迟，failover 报警，也支持用户自定义规则报警，包括对于输入 QPS、输出 QPS，户自定义延迟的监控等。以输入 QPS 为例，可以设置当连续几个周期内 QPS 低于某一值时就触发报警。此外，报警方式也支持多样化的工具，比如各种网易内部的聊天工具、邮件、电话以及短信等，对于任务调试阶段，为了避免被骚扰，可以设置任务报警抑制时间间隔。</p><p><img src="%E6%8A%A5%E8%AD%A6_%E7%BD%91%E6%98%93.png" alt></p><h4 id="实时数仓"><a href="#实时数仓" class="headerlink" title="实时数仓"></a>实时数仓</h4><p>目前网易很多产品已经开始实时数仓的建设了，但仍旧处于持续完善过程中。实时数仓的建设和离线数仓大致相同，只不过实时数仓是经过实时计算平台进行处理的。大致的过程就是首先收集日志、埋点数据等，将其写入到 Kafka 里面，经过实时计算平台进行处理，将 ODS 层中的明细数据抽取出来，在进行汇总以及维度关联等操作，将结果写入到 Redis，Kudu 等，再通过数据服务提供给前端的业务使用。x</p><p><img src="%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93_%E7%BD%91%E6%98%93.png" alt></p><h4 id="电商应用-数据分析"><a href="#电商应用-数据分析" class="headerlink" title="电商应用-数据分析"></a>电商应用-数据分析</h4><p>实时活动分析、首页资源分析、流量漏斗以及实时毛利计算等。</p><h4 id="电商应用-搜索推荐"><a href="#电商应用-搜索推荐" class="headerlink" title="电商应用-搜索推荐"></a>电商应用-搜索推荐</h4><p>电商的搜索推荐场景则主要包括用户实时足迹、用户实时特征、商品实时特征、实时 CTR CVR 样本组建、首页 A 区轮播、B 区活动精选等 UV、PV 实时统计等。<br>网络营销中的常见名词解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CPC (Cost Per Click): 按点击计费</span><br><span class="line">CPA (Cost Per Action): 按成果数计费</span><br><span class="line">CPM (Cost Per Mille): 按千次展现计费</span><br><span class="line">CVR (Click Value Rate): 转化率，衡量CPA广告效果的指标</span><br><span class="line">CTR (Click Through Rate): 点击率</span><br><span class="line">PV (Page View): 流量</span><br><span class="line">ADPV (Advertisement Page View): 载有广告的pageview流量ADimp (ADimpression): 单个广告的展示次数</span><br><span class="line">PV单价: 每PV的收入，衡量页面流量变现能力的指标</span><br></pre></td></tr></table></figure><h2 id="离线数仓与实时数仓"><a href="#离线数仓与实时数仓" class="headerlink" title="离线数仓与实时数仓"></a>离线数仓与实时数仓</h2><h3 id="从0建设离线数仓"><a href="#从0建设离线数仓" class="headerlink" title="从0建设离线数仓"></a>从0建设离线数仓</h3><h4 id="建设数仓"><a href="#建设数仓" class="headerlink" title="建设数仓"></a>建设数仓</h4><p>数据仓库定义：在企业管理和决策中面向主题的、集成的、与时间相关的、不可修改的数据集合。<br>数据仓库目标：数据资产、决策信息。</p><ul><li>ETL过程：打通你的任督二脉（离线+实时），让数据在整个环节中流通起来</li><li>数据分层：一套低耦合、高内聚的层级，是十分重要的，总不想业务、数据等一变化，数仓像又投胎了一次</li><li>数据集成：多业务场景下，打破数据信息壁垒，避免数据歧义，统一数据服务</li><li>规范化：良好的流程化、规范化设计，易维护、高扩展</li><li>监控与辅助：质量监控、调度管理、元数据管理、信息安全管理</li><li>走向服务：对外api服务/自助查询平台/OLAP分析平台</li></ul><h4 id="ETL"><a href="#ETL" class="headerlink" title="ETL"></a>ETL</h4><p>业务数据往往涉及多种数据源，数据存储也常常会有多种选择。文本数据、日志数据、RMDB、Nosql等。则要求etl工具能够覆盖这些业务场景。<br>工具有datax/sqoop/kettle/informatica等等。<br>ETL一般为最开始的部分，凌晨之后的时间点。a：避免集中式的对某个jdbc海量同步，影响业务(部分从库可能提供查询服务)、b：明确调度的时间，应尽可能的在某个时间段内完成(不能仅依靠调度，实现任务流的串行；为后期的大作业空间，占用等待的系统资源)</p><h4 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h4><p><img src="%E6%95%B0%E4%BB%93%E5%B8%B8%E7%94%A8%E5%88%86%E5%B1%82.png" alt></p><ol><li><p>Stage缓冲层<br>事务性数据，每日增量方式进行数据同步。需要注意数据同步时的边界问题，避免脏数据。<br>对于非事务性数据，一般通过快照/全量更新。不对外开放数据查询。</p></li><li><p>ods层<br>一般场景下，我们认为该层数据与线上保持一致。实际处理过程中，为了处理时间维度上的数据变化，会记录数据的变化轨迹。对于该部分数据，应该有选择的实施，避免业务处理过程变得复杂和问题发生后难以回溯。</p></li><li><p>dim/dw层 (模型层)<br>dim：维度层<br>dw：主题事实及业务宽表<br>在ods基础上，设计一个宽表/模型层，通过维度建模的方式，实现维度数据与事实数据的分离（星型模型）。</p></li><li><p>da层（应用层）<br>面向不同的应用，聚合类的数据层。该层对于dim/dw层的使用，是对模型层的一个检视维度。</p></li></ol><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><ol><li>脚本格式规范：脚本头部注释编码规范、注释规范、sql规范参考goole规范</li><li>文件/表命名规范：一个文件中，只应该有一张表，其余只能是临时表；表名称应与文件名相同</li><li>字段命名规范：去除多词同义，和同词多义的问题。尤其是在模型层（一般也叫做一致性维度）</li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>离线数仓主要基于sqoop、datax、hive等技术来构建 T+1 的离线数据，通过定时任务每天垃取增量数据导入到hive表中，然后创建各个业务相关的主题，对外提供T+1的数据查询接口。<br>实时数仓主要是基于数据采集工具，如canal等原始数据写入到kafka这样的数据通道中，最后一般都是写入到类似于HBase这样的OLAP存储系统中。对外提供分钟级别，甚至秒级别的查询方案。</p><table><thead><tr><th>数仓类型</th><th>准确性</th><th>实时性</th><th>稳定性</th></tr></thead><tbody><tr><td>离线数仓</td><td>准确度高</td><td>时延一般在一天</td><td>稳定性好，方便重算</td></tr><tr><td>实时数仓</td><td>准确度低，数据延迟、数据乱序造成数据准确度低</td><td>分钟级延迟</td><td>稳定性差，需要考虑数据回溯处理</td></tr></tbody></table><p><img src="%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%A8%A1%E5%9E%8B.png" alt></p><p>数据仓库的建设主要包括数据的采集、数据的处理、数据归档、数据应用四个方面。<br>当前主要的应用场景包括报表展示、即席查询、BI展示、数据分析、数据挖掘、模型训练等方面。<br>数据仓库的建设是面向主题的、集成性的、不可更新的、时许变化的。</p><p>实时数仓的实施关键点：</p><ol><li>端到端数据延迟、数据流量的监控</li><li>故障的快速恢复能力</li><li>数据的回溯处理，系统支持消费指定时间段内的数据</li><li>实时数据从实时数仓中查询，T+1数据借助离线通道修正</li><li>数据地图、数据血缘关系的梳理</li><li>业务数据质量的实时监控，初期可以根据规则的方式来识别质量状况</li></ol><p>其实，你需要的不是实时数仓，需要的是一款合适且强大的OLAP数据库。<br>在实时数仓的建设中，OLAP数据库的选型直接制约实时数仓的可用性和功能性。</p><p>原始层<br>明细层<br>汇总层<br>应用层</p><p>ods：原始数据层，事实数据，存储在kafka中<br>dwd：数据明细层，可以做一些join等加宽处理，可以存储在kafka和redis中<br>dim：维度数据，如存储在HBase中的数据<br>dm：MySQL -&gt; 汇总指标模型；Greenplum -&gt; 明细，多维分析关联；HBase -&gt; 汇总指标(大量并发)；Redis -&gt; 汇总、大列表TopN</p><h2 id="数据中台解决方案"><a href="#数据中台解决方案" class="headerlink" title="数据中台解决方案"></a>数据中台解决方案</h2><h3 id="零售行业"><a href="#零售行业" class="headerlink" title="零售行业"></a>零售行业</h3><p><img src="%E9%9B%B6%E5%94%AE%E8%A1%8C%E4%B8%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt></p><pre><code>RPS (Revenue Per Search): 每搜索产生的收入，衡量搜索结果变现能力指标</code></pre><p>　  ROI： 投资回报率（ROI）是指通过投资而应返回的价值，它涵盖了企业的获利目标。利润和投入的经营所必备的财产相关，因为管理人员必须通过投资和现有财产获得利润。又称会计收益率、投资利润率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将总结下数据中台的相关理论知识。&lt;br&gt;Flink平台化需要改进的点等等。&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;http://search.m.dangdang.com/search.php?keyword=%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%20%E8%AE%A9%E6%95%B0%E6%8D%AE%E7%94%A8%E8%B5%B7%E6%9D%A5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《数据中台：让数据用起来》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="思考总结" scheme="http://yoursite.com/categories/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
</feed>
