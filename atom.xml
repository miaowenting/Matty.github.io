<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matty&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-02-01T09:46:17.632Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miaowenting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年终个人总结</title>
    <link href="http://yoursite.com/2023/02/01/2022%E5%B9%B4%E7%BB%88%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2023/02/01/2022年终个人总结/</id>
    <published>2023-02-01T07:13:50.000Z</published>
    <updated>2023-02-01T09:46:17.632Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="31ddbc42a1f1f948e01eb8bcead98fa2576dbf885acb9fa142e2fb50fda6dc80"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>LiteFlow语法</title>
    <link href="http://yoursite.com/2022/12/15/LiteFlow%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2022/12/15/LiteFlow语法/</id>
    <published>2022-12-15T02:17:55.000Z</published>
    <updated>2022-12-16T03:43:36.624Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="617d543ec4e048380424bc0cded7855785406136f6cb1e8178fe72c3c0e68a97"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink DML SQL with Calcite</title>
    <link href="http://yoursite.com/2022/04/16/Flink-DML-SQL-with-Calcite/"/>
    <id>http://yoursite.com/2022/04/16/Flink-DML-SQL-with-Calcite/</id>
    <published>2022-04-16T05:31:40.000Z</published>
    <updated>2022-05-01T15:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Flink-DDL-SQL-With-Calcite</code>  一文中介绍了 flink-sql-parser 的工程实现，以及 SQL 解析、SQL 校验的相关细节，<br>本文主要介绍在 DML SQL 中，Calcite 是如何做 SQL 查询优化的。</p><a id="more"></a><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p><code>org.apache.flink.table.planner.plan.stream.sql.TableScanTest#testEventTimeTemporalJoinOnUpsertSource</code> 测试用例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">  amount <span class="built_in">BIGINT</span>,</span><br><span class="line">  currency <span class="keyword">STRING</span>,</span><br><span class="line">  rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">  WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"> <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line"> <span class="string">'changelog-mode'</span> = <span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> rates_history (</span><br><span class="line">  currency <span class="keyword">STRING</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span>,</span><br><span class="line">  rate <span class="built_in">BIGINT</span>,</span><br><span class="line">  rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">  WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">  <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">  <span class="string">'changelog-mode'</span> = <span class="string">'UA,D'</span>,</span><br><span class="line">  <span class="string">'disable-lookup'</span> = <span class="string">'true'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> o.currency, o.amount, r.rate, o.amount * r.rate</span><br><span class="line"><span class="keyword">FROM</span> orders <span class="keyword">AS</span> o </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> rates_history <span class="keyword">FOR</span> SYSTEM_TIME <span class="keyword">AS</span> <span class="keyword">OF</span> o.rowtime <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> o.currency = r.currency;</span><br></pre></td></tr></table></figure><h3 id="SqlNode-gt-RelNode-语句执行流程"><a href="#SqlNode-gt-RelNode-语句执行流程" class="headerlink" title="SqlNode -&gt; RelNode 语句执行流程"></a>SqlNode -&gt; RelNode 语句执行流程</h3><p>查询 SQL 语句的解析、转换、执行流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeSql</span><br><span class="line"></span><br><span class="line">    // 解析 SQL</span><br><span class="line">    org.apache.flink.table.planner.delegation.ParserImpl#parse</span><br><span class="line">        org.apache.flink.table.planner.parse.CalciteParser#parseSqlList</span><br><span class="line">          ...</span><br><span class="line">          org.apache.flink.table.planner.operations.SqlToOperationConverter#toQueryOperation</span><br><span class="line">            org.apache.flink.table.planner.calcite.FlinkPlannerImpl#rel</span><br><span class="line">                org.apache.calcite.sql2rel.SqlToRelConverter#convertQuery    转交 Calcite 处理</span><br><span class="line">                    org.apache.calcite.sql2rel.SqlToRelConverter#convertQueryRecursive 递归解析</span><br><span class="line">                        org.apache.calcite.sql2rel.SqlToRelConverter#convertFrom   </span><br><span class="line">                            org.apache.calcite.sql2rel.SqlToRelConverter#convertIdentifier   源表表名</span><br><span class="line">                                org.apache.calcite.sql.validate.SqlValidatorUtil#getRelOptTable </span><br><span class="line">                                    *org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#getTable</span><br><span class="line">                                        org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#toPreparingTable   返回的CatalogSourceTable为RelOptTable子类</span><br><span class="line">                                            org.apache.flink.table.planner.plan.FlinkCalciteCatalogReader#convertCatalogTable  生成CatalogSourceTable</span><br><span class="line">                                org.apache.calcite.sql2rel.SqlToRelConverter#toRel</span><br><span class="line">                                    org.apache.flink.table.planner.plan.schema.CatalogSourceTable#toRel  </span><br><span class="line">                                        org.apache.flink.table.planner.connectors.DynamicSourceUtils#convertSourceToRel</span><br></pre></td></tr></table></figure><p>初始生成的 RelNode ，如图所示：</p><p><img src="%E5%88%9D%E5%A7%8B%E7%94%9F%E6%88%90%E7%9A%84query_RelNode.png" alt></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>Flink Program 构建及相关优化规则，如图：<br><img src="SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96.png" alt></p><p><img src="FlinkChainedProgram.png" alt></p><p>优化过程打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">origin：</span><br><span class="line">LogicalProject(currency=[$1], amount=[$0], rate=[$4], EXPR$3=[*($0, $4)])</span><br><span class="line">+- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[&#123;1, 2&#125;])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalFilter(condition=[=($cor0.currency, $0)])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize subquery_rewrite cost 36 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[&#123;1, 2&#125;])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalFilter(condition=[=($cor0.currency, $0)])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize temporal_join_rewrite cost 31 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize decorrelate cost 12 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize default_rewrite cost 98 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize predicate_pushdown cost 41 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize project_rewrite cost 4 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalProject(exprs=[[$1, $0, $4, *($0, $4)]])</span><br><span class="line">+- LogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- LogicalTableScan(table=[[default_catalog, default_database, orders]])</span><br><span class="line">   +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- LogicalTableScan(table=[[default_catalog, default_database, rates_history]])</span><br><span class="line"></span><br><span class="line">optimize logical cost 840 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalJoin(condition=[AND(=($1, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize logical_rewrite cost 126 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalJoin(condition=[AND(=($1, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">   :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">   :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">      +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">         +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize time_indicator cost 17 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalCalc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- FlinkLogicalCalc(select=[amount, currency, rowtime, currency0, rate, CAST(rowtime0 AS TIMESTAMP(3)) AS rowtime0])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($1, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($1), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[left])</span><br><span class="line">      :- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">      :  +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical cost 516 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Calc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- TemporalJoin(joinType=[LeftOuterJoin], where=[AND(=(currency, currency0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0), __TEMPORAL_JOIN_LEFT_KEY(currency), __TEMPORAL_JOIN_RIGHT_KEY(currency0)))], select=[amount, currency, rowtime, currency0, rate, rowtime0])</span><br><span class="line">   :- Exchange(distribution=[hash[currency]])</span><br><span class="line">   :  +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">   :     +- TableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- Exchange(distribution=[hash[currency]])</span><br><span class="line">      +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">         +- ChangelogNormalize(key=[currency])</span><br><span class="line">            +- Exchange(distribution=[hash[currency]])</span><br><span class="line">               +- TableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical_rewrite cost 48 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Calc(select=[currency, amount, rate, *(amount, rate) AS EXPR$3])</span><br><span class="line">+- TemporalJoin(joinType=[LeftOuterJoin], where=[AND(=(currency, currency0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0), __TEMPORAL_JOIN_LEFT_KEY(currency), __TEMPORAL_JOIN_RIGHT_KEY(currency0)))], select=[amount, currency, rowtime, currency0, rate, rowtime0])</span><br><span class="line">   :- Exchange(distribution=[hash[currency]])</span><br><span class="line">   :  +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">   :     +- TableSourceScan(table=[[default_catalog, default_database, orders]], fields=[amount, currency, rowtime])</span><br><span class="line">   +- Exchange(distribution=[hash[currency]])</span><br><span class="line">      +- ChangelogNormalize(key=[currency])</span><br><span class="line">         +- Exchange(distribution=[hash[currency]])</span><br><span class="line">            +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">               +- TableSourceScan(table=[[default_catalog, default_database, rates_history]], fields=[currency, rate, rowtime])</span><br></pre></td></tr></table></figure><p>subquery_rewrite 前后对比：<br><img src="query_subquery_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>logical 前后对比：<br><img src="query_logical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>logical_rewrite 前后对比：<br><img src="query_logical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>time_indicator 前后对比：<br><img src="query_time_indicator%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>physical 前后对比：<br><img src="query_physical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>physical_rewrite 前后对比：<br><img src="query_physical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><p>最初的 RelNode 经过逻辑优化、物理优化后，最终生成 Flink 物理执行计划 FlinkPhysicalRel 。<br>其中，FlinkLogicalCalc 包含了 Project 和 Filter 操作，StreamExecExchange 继承了 Calcite 的 Exchange ，标识一次 hash distribute 。</p><p><img src="Flink_SQL%E6%89%A7%E8%A1%8C%E6%A0%91%E6%9E%84%E5%BB%BA.png" alt></p><h3 id="生成-Transformation"><a href="#生成-Transformation" class="headerlink" title="生成 Transformation"></a>生成 Transformation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 转换生成 transformations ，并提交执行</span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeInternal(org.apache.flink.table.operations.Operation)</span><br><span class="line">    org.apache.flink.table.api.internal.TableEnvironmentImpl#executeQueryOperation</span><br><span class="line">        org.apache.flink.table.api.internal.TableEnvironmentImpl#translate</span><br><span class="line">        org.apache.flink.table.delegation.Executor#createPipeline</span><br><span class="line">        org.apache.flink.table.delegation.Executor#executeAsync</span><br></pre></td></tr></table></figure><h2 id="RichInsert"><a href="#RichInsert" class="headerlink" title="RichInsert"></a>RichInsert</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_source(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">    channel <span class="built_in">varchar</span>,</span><br><span class="line">    pv <span class="built_in">int</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span> = <span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_side(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span>,</span><br><span class="line">    info <span class="built_in">varchar</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    WATERMARK <span class="keyword">FOR</span> rowtime <span class="keyword">AS</span> rowtime</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> = <span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span> = <span class="string">'UA,D'</span>,</span><br><span class="line">    <span class="string">'disable-lookup'</span> = <span class="string">'true'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_sink(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">    channel <span class="built_in">varchar</span>,</span><br><span class="line">    pv <span class="built_in">int</span>,</span><br><span class="line">    rowtime <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line">    info <span class="built_in">varchar</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connector'</span> =<span class="string">'values'</span>,</span><br><span class="line">    <span class="string">'changelog-mode'</span>=<span class="string">'I'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_sink</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        a.name,</span><br><span class="line">        a.channel,</span><br><span class="line">        a.pv,</span><br><span class="line">        a.rowtime,</span><br><span class="line">        b.info</span><br><span class="line">    <span class="keyword">FROM</span> table_source a</span><br><span class="line">    <span class="keyword">JOIN</span> table_side <span class="keyword">FOR</span> SYSTEM_TIME <span class="keyword">AS</span> <span class="keyword">OF</span> a.rowtime <span class="keyword">AS</span> b <span class="keyword">ON</span> a.name = b.name</span><br><span class="line">    <span class="keyword">WHERE</span> a.channel=<span class="string">'channel1'</span> <span class="keyword">AND</span> a.pv&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="SqlNode-gt-RelNode-语句执行流程-1"><a href="#SqlNode-gt-RelNode-语句执行流程-1" class="headerlink" title="SqlNode -&gt; RelNode 语句执行流程"></a>SqlNode -&gt; RelNode 语句执行流程</h3><p>Insert SQL 语句的解析、转换、执行流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.apache.flink.table.api.internal.TableEnvironmentImpl#executeSql</span><br><span class="line">    org.apache.flink.table.planner.delegation.ParserImpl#parse： RichSqlInsert</span><br><span class="line">        *org.apache.flink.table.planner.operations.SqlToOperationConverter#convertSqlInsert： 最终返回CatalogSinkModifyOperation</span><br><span class="line">            org.apache.flink.table.planner.operations.SqlToOperationConverter#toQueryOperation： 处理Select语句,返回PlannerQueryOperation(relational.project())</span><br><span class="line">        org.apache.flink.table.api.internal.TableEnvironmentImpl#executeOperation</span><br><span class="line">            org.apache.flink.table.api.internal.TableEnvironmentImpl#executeInternal(java.util.List&lt;org.apache.flink.table.operations.ModifyOperation&gt;)</span><br><span class="line">                org.apache.flink.table.api.internal.TableEnvironmentImpl#translate</span><br><span class="line">                    org.apache.flink.table.planner.delegation.PlannerBase#translate</span><br><span class="line">                        org.apache.flink.table.planner.delegation.PlannerBase#translateToRel   对select字段进行校验，将ModifyOperation转换为Calcite的relational expression.也就是LogicalLegacySink。</span><br><span class="line">                        *org.apache.flink.table.planner.delegation.PlannerBase#optimize         对生成的relational  expression进行优化，默认使用StreamCommonSubGraphBasedOptimizer。</span><br><span class="line">                        org.apache.flink.table.planner.delegation.PlannerBase#translateToExecNodePlan    优化后的RelNode被转换FlinkPhysicalRel</span><br><span class="line">                        org.apache.flink.table.planner.delegation.StreamPlanner#translateToPlan</span><br><span class="line">                            org.apache.flink.table.planner.plan.nodes.exec.ExecNode#translateToPlan   将每一个ExecNode转换为对应transformation</span><br><span class="line">                                org.apache.flink.table.planner.plan.nodes.common.CommonPhysicalTableSourceScan#createSourceTransformation</span><br><span class="line">                                    org.apache.flink.table.planner.plan.nodes.physical.stream.StreamExecTableSourceScan#createInputFormatTransformation</span><br><span class="line">                                    org.apache.flink.table.planner.plan.nodes.common.CommonPhysicalSink#createSinkTransformation</span><br></pre></td></tr></table></figure><p>初始生成的 RelNode ，如图所示：</p><p><img src="%E5%88%9D%E5%A7%8B%E7%94%9F%E6%88%90%E7%9A%84insert_RelNode.png" alt></p><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>优化过程打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">astPlan -&gt;</span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(name=[$0], channel=[$1], pv=[$2], rowtime=[$3], info=[$5])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[&#123;0, 3&#125;])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalFilter(condition=[=($cor0.name, $0)])</span><br><span class="line">            +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">               +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">                  +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimize subquery_rewrite cost 75 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[&#123;0, 3&#125;])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalFilter(condition=[=($cor0.name, $0)])</span><br><span class="line">            +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">               +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">                  +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize temporal_join_rewrite cost 36 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize decorrelate cost 46 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0..3], exprs=[[$5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize default_rewrite cost 327 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $2, $3, $5]])</span><br><span class="line">   +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">         :- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :  +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">         +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize predicate_pushdown cost 89 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $2, $3, $5]])</span><br><span class="line">   +- LogicalJoin(condition=[AND(=($0, $4), __INITIAL_TEMPORAL_JOIN_CONDITION($3, $6, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($4)))], joinType=[inner])</span><br><span class="line">      :- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      :  +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize project_rewrite cost 50 ms.</span><br><span class="line">optimize result: </span><br><span class="line">LogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- LogicalProject(inputs=[0], exprs=[[CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;):VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;, $1, $2, $4]])</span><br><span class="line">   +- LogicalJoin(condition=[AND(=($0, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- LogicalProject(inputs=[0], exprs=[[$2, $3]])</span><br><span class="line">      :  +- LogicalFilter(condition=[AND(=($1, _UTF-16LE&apos;channel1&apos;), &gt;($2, 0))])</span><br><span class="line">      :     +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :        +- LogicalTableScan(table=[[default_catalog, default_database, table_source]])</span><br><span class="line">      +- LogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- LogicalTableScan(table=[[default_catalog, default_database, table_side]])</span><br><span class="line"></span><br><span class="line">optimize logical cost 1356 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($0, $3), __INITIAL_TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize logical_rewrite cost 178 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalJoin(condition=[AND(=($0, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">      :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">      :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">         +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">            +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize time_indicator cost 33 ms.</span><br><span class="line">optimize result: </span><br><span class="line">FlinkLogicalSink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- FlinkLogicalCalc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- FlinkLogicalCalc(select=[name, pv, rowtime, name0, info, CAST(rowtime0 AS TIMESTAMP(3)) AS rowtime0])</span><br><span class="line">      +- FlinkLogicalJoin(condition=[AND(=($0, $3), __TEMPORAL_JOIN_CONDITION($2, $5, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY($3), __TEMPORAL_JOIN_LEFT_KEY($0), __TEMPORAL_JOIN_RIGHT_KEY($3)))], joinType=[inner])</span><br><span class="line">         :- FlinkLogicalCalc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">         :  +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$3])</span><br><span class="line">         :     +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">         +- FlinkLogicalSnapshot(period=[$cor0.rowtime])</span><br><span class="line">            +- FlinkLogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])</span><br><span class="line">               +- FlinkLogicalTableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical cost 899 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Sink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- Calc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- TemporalJoin(joinType=[InnerJoin], where=[AND(=(name, name0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(name0), __TEMPORAL_JOIN_LEFT_KEY(name), __TEMPORAL_JOIN_RIGHT_KEY(name0)))], select=[name, pv, rowtime, name0, info, rowtime0])</span><br><span class="line">      :- Exchange(distribution=[hash[name]])</span><br><span class="line">      :  +- Calc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">      :        +- TableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- Exchange(distribution=[hash[name]])</span><br><span class="line">         +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">            +- ChangelogNormalize(key=[name])</span><br><span class="line">               +- Exchange(distribution=[hash[name]])</span><br><span class="line">                  +- TableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br><span class="line"></span><br><span class="line">optimize physical_rewrite cost 87 ms.</span><br><span class="line">optimize result: </span><br><span class="line">Sink(table=[default_catalog.default_database.table_sink], fields=[name, channel, pv, rowtime, info])</span><br><span class="line">+- Calc(select=[name, CAST(_UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot; AS VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;) AS channel, pv, rowtime, info])</span><br><span class="line">   +- TemporalJoin(joinType=[InnerJoin], where=[AND(=(name, name0), __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(name0), __TEMPORAL_JOIN_LEFT_KEY(name), __TEMPORAL_JOIN_RIGHT_KEY(name0)))], select=[name, pv, rowtime, name0, info, rowtime0])</span><br><span class="line">      :- Exchange(distribution=[hash[name]])</span><br><span class="line">      :  +- Calc(select=[name, pv, rowtime], where=[AND(=(channel, _UTF-16LE&apos;channel1&apos;:VARCHAR(2147483647) CHARACTER SET &quot;UTF-16LE&quot;), &gt;(pv, 0))])</span><br><span class="line">      :     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">      :        +- TableSourceScan(table=[[default_catalog, default_database, table_source]], fields=[name, channel, pv, rowtime])</span><br><span class="line">      +- Exchange(distribution=[hash[name]])</span><br><span class="line">         +- ChangelogNormalize(key=[name])</span><br><span class="line">            +- Exchange(distribution=[hash[name]])</span><br><span class="line">               +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])</span><br><span class="line">                  +- TableSourceScan(table=[[default_catalog, default_database, table_side]], fields=[name, info, rowtime])</span><br></pre></td></tr></table></figure><h4 id="subquery-rewrite"><a href="#subquery-rewrite" class="headerlink" title="subquery_rewrite"></a>subquery_rewrite</h4><p>subquery_rewrite 前后对比：<br><img src="insert_subquery_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="temporal-join-rewrite"><a href="#temporal-join-rewrite" class="headerlink" title="temporal_join_rewrite"></a>temporal_join_rewrite</h4><p>temporal_join_rewrite 前后对比：<br><img src="insert_temporal_join_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_temporal_join_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="decorrelate"><a href="#decorrelate" class="headerlink" title="decorrelate"></a>decorrelate</h4><p>decorrelate 前后对比：<br><img src="insert_decorrelate%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="default-rewrite"><a href="#default-rewrite" class="headerlink" title="default_rewrite"></a>default_rewrite</h4><p>default_rewrite 前后对比：<br><img src="insert_default_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="predicate-pushdown"><a href="#predicate-pushdown" class="headerlink" title="predicate_pushdown"></a>predicate_pushdown</h4><p>predicate_pushdown 前后对比：<br><img src="insert_predicate_pushdown%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_predicate_pushdown%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="project-rewrite"><a href="#project-rewrite" class="headerlink" title="project_rewrite"></a>project_rewrite</h4><p>project_rewrite 前后对比：<br><img src="insert_project_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_project_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="logical"><a href="#logical" class="headerlink" title="logical"></a>logical</h4><p>logical 前后对比：<br><img src="insert_logical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_logical%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="logical-rewrite"><a href="#logical-rewrite" class="headerlink" title="logical_rewrite"></a>logical_rewrite</h4><p>logical_rewrite 前后对比：<br><img src="insert_logical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt></p><h4 id="time-indicator"><a href="#time-indicator" class="headerlink" title="time_indicator"></a>time_indicator</h4><p>time_indicator 前后对比：<br><img src="insert_time_indicator%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_time_indicator%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="physical"><a href="#physical" class="headerlink" title="physical"></a>physical</h4><p>physical 前后对比：<br><img src="insert_physical%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_physical%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h4 id="physical-rewrite"><a href="#physical-rewrite" class="headerlink" title="physical_rewrite"></a>physical_rewrite</h4><p>physical_rewrite 前后对比：<br><img src="insert_physical_rewrite%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt><br><img src="insert_physical_rewrite%E4%B9%8B%E5%90%8E%E7%9A%84RelNode.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.jrwang.me/2019/flink-source-code-sql-overview/" target="_blank" rel="noopener">Flink 源码阅读笔记 - Flink SQL 整体执行框架</a><br><a href="https://www.cnblogs.com/ljygz/p/15421973.html" target="_blank" rel="noopener">Flink Sql 之 Calcite Volcano 优化器（源码解析）</a><br><a href="https://io-meter.com/2018/11/01/sql-query-optimization-volcano/" target="_blank" rel="noopener">SQL 查询优化原理之 Volcano Optimizer 介绍</a><br><a href="https://www.liaojiayi.com/calcite/" target="_blank" rel="noopener">SQL 解析框架 - Calcite</a><br><a href="https://www.jianshu.com/p/f7afa734a545" target="_blank" rel="noopener">FlinkSQL 生成 StreamGraph</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;Flink-DDL-SQL-With-Calcite&lt;/code&gt;  一文中介绍了 flink-sql-parser 的工程实现，以及 SQL 解析、SQL 校验的相关细节，&lt;br&gt;本文主要介绍在 DML SQL 中，Calcite 是如何做 SQL 查询优化的。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Calcite" scheme="http://yoursite.com/categories/Flink/Calcite/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-table-store: MergeTreeWriter</title>
    <link href="http://yoursite.com/2022/03/30/Flink-table-store-MergeTreeWriter/"/>
    <id>http://yoursite.com/2022/03/30/Flink-table-store-MergeTreeWriter/</id>
    <published>2022-03-30T08:47:51.000Z</published>
    <updated>2022-05-01T17:18:50.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/apache/flink-table-store/commits/master" target="_blank" rel="noopener">flink-table-store git</a></p><p>本文了解下 MergeTreeWriter 的源码实现。</p><a id="more"></a><h2 id="leveldb"><a href="#leveldb" class="headerlink" title="leveldb"></a>leveldb</h2><p><img src="LSM-Tree%E7%BB%93%E6%9E%84.png" alt></p><h2 id="MergeTreeWriter"><a href="#MergeTreeWriter" class="headerlink" title="MergeTreeWriter"></a>MergeTreeWriter</h2><p><img src="MergeTreeWriter%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="SstFileTest"><a href="#SstFileTest" class="headerlink" title="SstFileTest"></a>SstFileTest</h3><figure class="highlight java"><figcaption><span>SstFileTest#testWriteAndReadSstFileWithStatsCollectingRollingFile</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/sst/SstFileTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> SstFileReader&#125; and &#123;<span class="doctag">@link</span> SstFileWriter&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SstFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产 kv 数据工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstTestDataGenerator gen =</span><br><span class="line">            SstTestDataGenerator.builder().memTableCapacity(<span class="number">20</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadSstFileWithStatsCollectingRollingFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testWriteAndReadSstFileImpl(<span class="string">"avro"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ① TestKeyValueGenerator 生成一批数据</span></span><br><span class="line"><span class="comment">     * ② 当某一个 partition/bucket 首先达到 memTable 内存阈值20，停止生成数据</span></span><br><span class="line"><span class="comment">     * ③ 按 key,sequenceNumber 排序</span></span><br><span class="line"><span class="comment">     * ④ 按 key 聚合去重</span></span><br><span class="line"><span class="comment">     * ⑤ 为去重后的 kv list 构建一个内存 sst file，并组装统计信息 SstFileMeta </span></span><br><span class="line"><span class="comment">     * ⑥ 内存 kv list 及 SstFileMeta 以 Data 返回</span></span><br><span class="line"><span class="comment">     * ⑦ 创建 SstFileWriter ，一个 partition/bucket 对应一个 SstFileWriter ，并将 kv list 数据封装成 CloseableIterator</span></span><br><span class="line"><span class="comment">     * ⑧ 执行 SstFileWriter.write() --&gt; SstRollingFile.write() --&gt; RollingFile.write() --&gt; AvroBulkWriter.write()</span></span><br><span class="line"><span class="comment">     * ⑨ 写入完成后，SstRollingFile.collectFile(Path) 组装统计信息返回 SstFileMeta</span></span><br><span class="line"><span class="comment">     * ⑩ 比较 Data 的 SstFileMeta 与 SstFileWriter.write() 返回的 SstFileMeta</span></span><br><span class="line"><span class="comment">     * ⑪ 创建 SstFileReader -&gt; sstFileReader.read -&gt; SstFileRecordReader -&gt; 生成 FileSourceSplit -&gt; 使用 BulkFormat.Reader 进行真正读取</span></span><br><span class="line"><span class="comment">     * ⑫ RecordReaderIterator 包装 SstFileRecordReader 遍历读取数据，与当前 Data 中的 kv list 做比对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testWriteAndReadSstFileImpl</span><span class="params">(String format)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 造一波数据，有一个 partition/bucket 达到 memTable 阈值 20 则返回</span></span><br><span class="line">        SstTestDataGenerator.Data data = gen.next();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个 SstFileWriter</span></span><br><span class="line">        SstFileWriter writer = createSstFileWriter(tempDir.toString(), format);</span><br><span class="line"></span><br><span class="line">        SstFileMetaSerializer serializer =</span><br><span class="line">                <span class="keyword">new</span> SstFileMetaSerializer(</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE, TestKeyValueGenerator.ROW_TYPE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行写入，循环遍历数据写入</span></span><br><span class="line">        <span class="comment">// SstFileWriter.write() --&gt; SstRollingFile.write() --&gt; RollingFile.write() --&gt; AvroBulkWriter.write()</span></span><br><span class="line">        <span class="comment">// 写入完成后，SstRollingFile.collectFile(Path) 组装统计信息返回 SstFileMeta</span></span><br><span class="line">        List&lt;SstFileMeta&gt; actualMetas =</span><br><span class="line">                writer.write(CloseableIterator.fromList(data.content, kv -&gt; &#123;&#125;), <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将造数据内存 sst file 记录的 meta 与真正写入磁盘产生的 sst file meta 做对比</span></span><br><span class="line">        checkRollingFiles(data.meta, actualMetas, writer.suggestedFileSize());</span><br><span class="line"></span><br><span class="line">        SstFileReader reader = createSstFileReader(tempDir.toString(), format, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        assertData(</span><br><span class="line">                data,</span><br><span class="line">                actualMetas,</span><br><span class="line">                TestKeyValueGenerator.KEY_SERIALIZER,</span><br><span class="line">                TestKeyValueGenerator.ROW_SERIALIZER,</span><br><span class="line">                serializer,</span><br><span class="line">                reader,</span><br><span class="line">                kv -&gt; kv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SstFileWriter <span class="title">createSstFileWriter</span><span class="params">(String path, String format)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory = <span class="keyword">new</span> FileStorePathFactory(<span class="keyword">new</span> Path(path));</span><br><span class="line">        <span class="keyword">int</span> suggestedFileSize = ThreadLocalRandom.current().nextInt(<span class="number">8192</span>) + <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SstFileWriter.Factory(</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.ROW_TYPE,</span><br><span class="line">                        <span class="comment">// 每一行新加的元素，都会执行 flush</span></span><br><span class="line">                        <span class="keyword">new</span> FlushingFileFormat(format),</span><br><span class="line">                        pathFactory,</span><br><span class="line">                        suggestedFileSize)</span><br><span class="line">                .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SstTestDataGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/sst/SstTestDataGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> SstFileMeta&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SstTestDataGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 生成一行 kv 数据</span></span><br><span class="line">            KeyValue kv = gen.next();</span><br><span class="line">            <span class="comment">// 获取 key</span></span><br><span class="line">            BinaryRowData key = (BinaryRowData) kv.key();</span><br><span class="line">            <span class="comment">// 获取 partition</span></span><br><span class="line">            BinaryRowData partition = gen.getPartition(kv);</span><br><span class="line">            <span class="comment">// 获取 bucket , numBuckets = 3</span></span><br><span class="line">            <span class="keyword">int</span> bucket = (key.hashCode() % numBuckets + numBuckets) % numBuckets;</span><br><span class="line">            <span class="comment">// List&lt;Map&lt;BinaryRowData, List&lt;KeyValue&gt;&gt;&gt;，每一个元素代表一个分桶，分桶中 &lt;partition,List&lt;KeyValue&gt;&gt;</span></span><br><span class="line">            List&lt;KeyValue&gt; memTable =</span><br><span class="line">                    memTables.get(bucket).computeIfAbsent(partition, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            memTable.add(kv);</span><br><span class="line"></span><br><span class="line">            System.out.println(String.format(<span class="string">"sequenceNumber -&gt; %s，key-&gt; %s, partition -&gt; %s，bucket -&gt; %s，op -&gt; %s, value -&gt; %s"</span>,</span><br><span class="line">                    kv.sequenceNumber(),</span><br><span class="line">                    <span class="string">"("</span> + kv.key().getInt(<span class="number">0</span>) + <span class="string">","</span> + kv.key().getLong(<span class="number">1</span>) + <span class="string">")"</span>,</span><br><span class="line">                    kv.value().getString(<span class="number">0</span>) + <span class="string">""</span> + kv.value().getInt(<span class="number">1</span>),</span><br><span class="line">                    bucket,</span><br><span class="line">                    kv.valueKind().toString(),</span><br><span class="line">                    kv.value().getLong(<span class="number">4</span>)</span><br><span class="line">                    ));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// memTableCapacity = 20，假设分区：20211111，分桶：0，达到阈值则创建 sst file</span></span><br><span class="line">            <span class="keyword">if</span> (memTable.size() &gt;= memTableCapacity) &#123;</span><br><span class="line">                </span><br><span class="line">                List&lt;Data&gt; result = createSstFiles(memTable, <span class="number">0</span>, partition, bucket);</span><br><span class="line">                memTable.clear();</span><br><span class="line">                <span class="keyword">assert</span> result.size() == <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Data&gt; <span class="title">createSstFiles</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;KeyValue&gt; kvs, <span class="keyword">int</span> level, BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将数据根据 key,sequenceNumber 排序</span></span><br><span class="line">        gen.sort(kvs);</span><br><span class="line"></span><br><span class="line">        List&lt;KeyValue&gt; combined = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; kvs.size(); i++) &#123;</span><br><span class="line">            KeyValue now = kvs.get(i);</span><br><span class="line">            KeyValue next = kvs.get(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!now.key().equals(next.key())) &#123;</span><br><span class="line">                <span class="comment">// 取每个 key 的最新 sequenceNumber ，覆盖前一个</span></span><br><span class="line">                combined.add(now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        combined.add(kvs.get(kvs.size() - <span class="number">1</span>)); <span class="comment">// 补齐最后一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// level=0</span></span><br><span class="line">        <span class="keyword">int</span> capacity = memTableCapacity;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            <span class="comment">// 根据 level 来扩容</span></span><br><span class="line">            capacity *= memTableCapacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Data&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; combined.size(); i += capacity) &#123;</span><br><span class="line">            result.add(</span><br><span class="line">                    <span class="comment">// memTable 每满 capacity 大小，为聚合去重后的 list 创建一个 sst file</span></span><br><span class="line">                    createSstFile(</span><br><span class="line">                            combined.subList(i, Math.min(i + capacity, combined.size())),</span><br><span class="line">                            level,</span><br><span class="line">                            partition,</span><br><span class="line">                            bucket));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Data <span class="title">createSstFile</span><span class="params">(List&lt;KeyValue&gt; kvs, <span class="keyword">int</span> level, BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用来更新 key 的统计信息工具类</span></span><br><span class="line">        FieldStatsCollector keyStatsCollector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.KEY_TYPE);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用来更新 value 的统计信息工具类</span></span><br><span class="line">        FieldStatsCollector valueStatsCollector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.ROW_TYPE);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">        BinaryRowData minKey = <span class="keyword">null</span>;</span><br><span class="line">        BinaryRowData maxKey = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">long</span> minSequenceNumber = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">long</span> maxSequenceNumber = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (KeyValue kv : kvs) &#123;</span><br><span class="line">            BinaryRowData key = (BinaryRowData) kv.key();</span><br><span class="line">            BinaryRowData value = (BinaryRowData) kv.value();</span><br><span class="line">            totalSize += key.getSizeInBytes() + value.getSizeInBytes();</span><br><span class="line">            keyStatsCollector.collect(key);</span><br><span class="line">            valueStatsCollector.collect(value);</span><br><span class="line">            <span class="keyword">if</span> (minKey == <span class="keyword">null</span> || TestKeyValueGenerator.KEY_COMPARATOR.compare(key, minKey) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                minKey = key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxKey == <span class="keyword">null</span> || TestKeyValueGenerator.KEY_COMPARATOR.compare(key, maxKey) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxKey = key;</span><br><span class="line">            &#125;</span><br><span class="line">            minSequenceNumber = Math.min(minSequenceNumber, kv.sequenceNumber());</span><br><span class="line">            maxSequenceNumber = Math.max(maxSequenceNumber, kv.sequenceNumber());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Data(</span><br><span class="line">                partition,</span><br><span class="line">                bucket,</span><br><span class="line">                <span class="comment">// 生成 sst file 的 metadata 文件 ，真正写入时的收集过程也类似</span></span><br><span class="line">                <span class="keyword">new</span> SstFileMeta(</span><br><span class="line">                        <span class="string">"sst-"</span> + UUID.randomUUID(),</span><br><span class="line">                        totalSize,</span><br><span class="line">                        kvs.size(),</span><br><span class="line">                        minKey,</span><br><span class="line">                        maxKey,</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * 统计 key 中各个字段的最大最小值，null值个数 ：</span></span><br><span class="line"><span class="comment">                         *  0 - shopId(1,9,0) ，表示 shopId 的最小值为1，最大值为9，nullCount 为0</span></span><br><span class="line"><span class="comment">                         *  1 - orderId(-7709647343742251496, 6202316951969867995) ，表示 orderId 的 最小值为 -7709647343742251496，最大值为 6202316951969867995，null Count 为0</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        keyStatsCollector.extract(),</span><br><span class="line">                        valueStatsCollector.extract(),</span><br><span class="line">                        minSequenceNumber,</span><br><span class="line">                        maxSequenceNumber,</span><br><span class="line">                        level),</span><br><span class="line">                kvs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * An in-memory SST file.</span></span><br><span class="line"><span class="comment">     * 为了方便测试比对，使用内存对象来模拟 sst file </span></span><br><span class="line"><span class="comment">     * 与 SstFileWriter 写入返回的 SstFileMeta 做比对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分区</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> BinaryRowData partition;</span><br><span class="line">        <span class="comment">// 分桶</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> bucket;</span><br><span class="line">        <span class="comment">// sst file 的 metadata</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SstFileMeta meta;</span><br><span class="line">        <span class="comment">// 数据内容</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> List&lt;KeyValue&gt; content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Data</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                BinaryRowData partition, <span class="keyword">int</span> bucket, SstFileMeta meta, List&lt;KeyValue&gt; content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.partition = partition;</span><br><span class="line">            <span class="keyword">this</span>.bucket = bucket;</span><br><span class="line">            <span class="keyword">this</span>.meta = meta;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>TestKeyValueGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/TestKeyValueGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> KeyValue&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyValueGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyValue <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> op = random.nextInt(<span class="number">5</span>);</span><br><span class="line">        Order order = <span class="keyword">null</span>;</span><br><span class="line">        ValueKind kind = ValueKind.ADD;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span> &amp;&amp; addedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// delete order</span></span><br><span class="line">            order = pick(addedOrders);</span><br><span class="line">            deletedOrders.add(order);</span><br><span class="line">            kind = ValueKind.DELETE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// update order</span></span><br><span class="line">            <span class="keyword">if</span> (random.nextBoolean() &amp;&amp; deletedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                order = pick(deletedOrders);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (addedOrders.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                order = pick(addedOrders);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (order != <span class="keyword">null</span>) &#123;</span><br><span class="line">                order.update();</span><br><span class="line">                addedOrders.add(order);</span><br><span class="line">                kind = ValueKind.ADD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (order == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// new order</span></span><br><span class="line">            order = <span class="keyword">new</span> Order();</span><br><span class="line">            addedOrders.add(order);</span><br><span class="line">            kind = ValueKind.ADD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyValue()</span><br><span class="line">                .replace(</span><br><span class="line">                        <span class="comment">// key 为 (shopId,orderId) ，kv.key().getInt(0) + kv.key().getLong(1)</span></span><br><span class="line">                        KEY_SERIALIZER</span><br><span class="line">                                .toBinaryRow(GenericRowData.of(order.shopId, order.orderId))</span><br><span class="line">                                .copy(),</span><br><span class="line">                        sequenceNumber++,</span><br><span class="line">                        kind,</span><br><span class="line">                        ROW_SERIALIZER</span><br><span class="line">                                .toBinaryRow(</span><br><span class="line">                                        GenericRowData.of(</span><br><span class="line">                                                <span class="comment">// partition 为 dt ，kv.value().getString(0)</span></span><br><span class="line">                                                StringData.fromString(order.dt),</span><br><span class="line">                                                order.hr,</span><br><span class="line">                                                order.shopId,</span><br><span class="line">                                                order.orderId,</span><br><span class="line">                                                order.itemId,</span><br><span class="line">                                                order.priceAmount == <span class="keyword">null</span></span><br><span class="line">                                                        ? <span class="keyword">null</span></span><br><span class="line">                                                        : <span class="keyword">new</span> GenericArrayData(order.priceAmount),</span><br><span class="line">                                                StringData.fromString(order.comment)))</span><br><span class="line">                                .copy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 kv list 按照 key,sequenceNumber 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;KeyValue&gt; kvs)</span> </span>&#123;</span><br><span class="line">        kvs.sort(</span><br><span class="line">                (a, b) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">int</span> keyCompareResult = KEY_COMPARATOR.compare(a.key(), b.key());</span><br><span class="line">                    <span class="keyword">return</span> keyCompareResult != <span class="number">0</span></span><br><span class="line">                            ? keyCompareResult</span><br><span class="line">                            : Long.compare(a.sequenceNumber(), b.sequenceNumber());</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gen 一直产生数据，key 为 (shopId, orderId)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 0，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2780980699221738542</span><br><span class="line">sequenceNumber -&gt; 1，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 2780980699221738542</span><br><span class="line">sequenceNumber -&gt; 2，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4843258062816469307</span><br><span class="line">sequenceNumber -&gt; 3，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; 7629700512330682069</span><br><span class="line">sequenceNumber -&gt; 4，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 5，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 7，key-&gt; (6,4757281131655774586), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1390660808551069179</span><br><span class="line">sequenceNumber -&gt; 8，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3041082948826019863</span><br><span class="line">sequenceNumber -&gt; 9，key-&gt; (2,6656455485638391580), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1539430626988409641</span><br><span class="line">sequenceNumber -&gt; 10，key-&gt; (6,-7180799390720755610), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -471344025710360044</span><br><span class="line">sequenceNumber -&gt; 11，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; -6168492336680241066</span><br><span class="line">sequenceNumber -&gt; 12，key-&gt; (3,3437933508159239703), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2771616260199190183</span><br><span class="line">sequenceNumber -&gt; 13，key-&gt; (3,1406959166072420180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 14，key-&gt; (9,1548022128799387646), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 15，key-&gt; (3,7529185916302791697), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 7061550199722317899</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 17，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -4843258062816469307</span><br><span class="line">sequenceNumber -&gt; 18，key-&gt; (8,9071325512152982886), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5977331971180020420</span><br><span class="line">sequenceNumber -&gt; 19，key-&gt; (9,6189042875316582636), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3021498374064348785</span><br><span class="line">sequenceNumber -&gt; 20，key-&gt; (9,6343418366398619495), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6714242845052107042</span><br><span class="line">sequenceNumber -&gt; 21，key-&gt; (3,-6539095021197140424), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 8378366812547696285</span><br><span class="line">sequenceNumber -&gt; 22，key-&gt; (6,-8753039155605858734), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 5512574968172962020</span><br><span class="line">sequenceNumber -&gt; 23，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -7925549160503055693</span><br><span class="line">sequenceNumber -&gt; 24，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -6168492336680241066</span><br><span class="line">sequenceNumber -&gt; 25，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -1780575509543362575</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 27，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 9095332047559518137</span><br><span class="line">sequenceNumber -&gt; 28，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 7629700512330682069</span><br><span class="line">sequenceNumber -&gt; 29，key-&gt; (7,-4422302527273897180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 30，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 9095332047559518137</span><br><span class="line">sequenceNumber -&gt; 31，key-&gt; (5,8365091192911527232), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -171710651702984100</span><br><span class="line">sequenceNumber -&gt; 32，key-&gt; (1,6624769519813278620), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -1156217459149519162</span><br><span class="line">sequenceNumber -&gt; 33，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -1780575509543362575</span><br><span class="line">sequenceNumber -&gt; 34，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3846349663287424781</span><br><span class="line">sequenceNumber -&gt; 35，key-&gt; (5,-1628886049149411190), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -6332539298434244959</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 37，key-&gt; (4,300655443661245521), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 5387082838317835172</span><br><span class="line">sequenceNumber -&gt; 38，key-&gt; (9,7861014525117262749), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -9122542604915127637</span><br><span class="line">sequenceNumber -&gt; 39，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -227302505361441636</span><br><span class="line">sequenceNumber -&gt; 40，key-&gt; (4,300655443661245521), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7922649361152425018</span><br><span class="line">sequenceNumber -&gt; 41，key-&gt; (5,358240165604482159), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7317582423751248438</span><br><span class="line">sequenceNumber -&gt; 42，key-&gt; (0,-3660045172252280972), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -328975871197147907</span><br><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 44，key-&gt; (7,-1094427646050551581), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 4801112210107529658</span><br><span class="line">sequenceNumber -&gt; 45，key-&gt; (8,8881224827715078628), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6356315545715006682</span><br><span class="line">sequenceNumber -&gt; 46，key-&gt; (2,6656455485638391580), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -7107196345880948914</span><br><span class="line">sequenceNumber -&gt; 47，key-&gt; (6,160286918159499774), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -8739427651217120826</span><br><span class="line">sequenceNumber -&gt; 48，key-&gt; (1,6624769519813278620), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -1156217459149519162</span><br><span class="line">sequenceNumber -&gt; 49，key-&gt; (3,-4529073475644960156), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -6329541255341810188</span><br><span class="line">sequenceNumber -&gt; 50，key-&gt; (5,-8147739948029934462), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -1573247422349659478</span><br><span class="line">sequenceNumber -&gt; 51，key-&gt; (1,-5452898194577942329), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3089621422791274897</span><br><span class="line">sequenceNumber -&gt; 52，key-&gt; (2,2615073161895980616), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3380892025983806981</span><br><span class="line">sequenceNumber -&gt; 53，key-&gt; (2,-6849632269263576984), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 55，key-&gt; (0,2337641240443581856), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -8588877348912160578</span><br><span class="line">sequenceNumber -&gt; 56，key-&gt; (8,-4178514139166246973), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 7917094582753434374</span><br><span class="line">sequenceNumber -&gt; 57，key-&gt; (0,8052082081818425113), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4394687097038065501</span><br><span class="line">sequenceNumber -&gt; 58，key-&gt; (1,7579925405939227085), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; -810978710328400623</span><br><span class="line">sequenceNumber -&gt; 59，key-&gt; (0,8105308727850398433), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5251140189951144076</span><br><span class="line">sequenceNumber -&gt; 60，key-&gt; (4,-5185295859586056999), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1799448936150420608</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 63，key-&gt; (4,-5572761828207512513), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4318264364606337424</span><br><span class="line">sequenceNumber -&gt; 64，key-&gt; (1,1500104998893080687), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5928705892222458487</span><br><span class="line">sequenceNumber -&gt; 65，key-&gt; (5,-1018793110018941802), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 4978555998504311137</span><br><span class="line">sequenceNumber -&gt; 66，key-&gt; (9,-2708037046618742102), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 4185830207643971286</span><br><span class="line">sequenceNumber -&gt; 67，key-&gt; (8,8356260898591690767), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8056709699793297362</span><br><span class="line">sequenceNumber -&gt; 68，key-&gt; (1,-5452898194577942329), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -1004674958420378720</span><br><span class="line">sequenceNumber -&gt; 69，key-&gt; (0,-7278244430086253408), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 8124302997183225112</span><br><span class="line">sequenceNumber -&gt; 70，key-&gt; (5,-6044235594482092723), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 5347576024187315055</span><br><span class="line">sequenceNumber -&gt; 71，key-&gt; (0,-7322677450167513398), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 6541352840070592737</span><br><span class="line">sequenceNumber -&gt; 72，key-&gt; (3,1406959166072420180), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3656191246660617952</span><br><span class="line">sequenceNumber -&gt; 73，key-&gt; (0,-3728475157919153383), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5138071113563883920</span><br><span class="line">sequenceNumber -&gt; 74，key-&gt; (4,9049862483926656699), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 335682238008025261</span><br><span class="line">sequenceNumber -&gt; 75，key-&gt; (0,-7278244430086253408), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 147913672200092986</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 77，key-&gt; (5,-7361894621669707690), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; 2151354001189111669</span><br><span class="line">sequenceNumber -&gt; 78，key-&gt; (8,-2203809412923262991), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3936942235225713244</span><br><span class="line">sequenceNumber -&gt; 79，key-&gt; (5,-6505213751965926244), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 81，key-&gt; (2,4167920832653664558), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1608623588433602165</span><br><span class="line">sequenceNumber -&gt; 82，key-&gt; (2,1841816909855723911), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 83，key-&gt; (4,-972330344039028842), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -3509805453120084345</span><br><span class="line">sequenceNumber -&gt; 84，key-&gt; (8,2824656755364722708), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -5257788714540757740</span><br><span class="line">sequenceNumber -&gt; 85，key-&gt; (3,4825546765402666544), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2391968129098960716</span><br><span class="line">sequenceNumber -&gt; 86，key-&gt; (3,7529185916302791697), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -3918158072347315804</span><br><span class="line">sequenceNumber -&gt; 87，key-&gt; (2,-3348977801879129568), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 1881148083149836831</span><br><span class="line">sequenceNumber -&gt; 88，key-&gt; (2,4013523848884005729), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 89，key-&gt; (6,-5707870044488831310), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 90，key-&gt; (0,8052082081818425113), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 92，key-&gt; (2,2615073161895980616), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -9184374245320825550</span><br><span class="line">sequenceNumber -&gt; 93，key-&gt; (6,-4929214422972869044), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 94，key-&gt; (0,-1119753832294541381), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; -4659351591347526663</span><br><span class="line">sequenceNumber -&gt; 95，key-&gt; (8,8881224827715078628), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -6356315545715006682</span><br><span class="line">sequenceNumber -&gt; 96，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -7925549160503055693</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 98，key-&gt; (5,-2843916878703362404), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; -7274338587888136170</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 100，key-&gt; (9,-2058923199536498074), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3025392192359206114</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 102，key-&gt; (6,1396773201962230824), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -395580717194806860</span><br><span class="line">sequenceNumber -&gt; 103，key-&gt; (5,2836340277676703640), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; -6889713077159086526</span><br><span class="line">sequenceNumber -&gt; 104，key-&gt; (5,-5531587458323916081), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; -7936623144280934674</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 106，key-&gt; (7,3761238010779910460), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1741046247964567542</span><br><span class="line">sequenceNumber -&gt; 107，key-&gt; (9,-2058923199536498074), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; DELETE, value -&gt; 3025392192359206114</span><br><span class="line">sequenceNumber -&gt; 108，key-&gt; (5,-3150172398625062392), partition -&gt; 202111109，bucket -&gt; 1，op -&gt; ADD, value -&gt; 2414372112695353287</span><br><span class="line">sequenceNumber -&gt; 109，key-&gt; (2,4925395670238937618), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 110，key-&gt; (2,-2517148717059342296), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4871096411802221114</span><br><span class="line">sequenceNumber -&gt; 111，key-&gt; (4,-7429391660457277238), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1403520732423394697</span><br><span class="line">sequenceNumber -&gt; 112，key-&gt; (3,-8204171576376413410), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7128770787287732271</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 114，key-&gt; (0,-2652914563471254026), partition -&gt; 202111118，bucket -&gt; 1，op -&gt; ADD, value -&gt; 1480495876038550410</span><br><span class="line">sequenceNumber -&gt; 115，key-&gt; (9,2449548613592556649), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -8344888900456274592</span><br><span class="line">sequenceNumber -&gt; 116，key-&gt; (8,-4287211979177213572), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 4860703232778193421</span><br><span class="line">sequenceNumber -&gt; 117，key-&gt; (5,-2279252544212225951), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; 2246469721969240119</span><br><span class="line">sequenceNumber -&gt; 118，key-&gt; (4,-680031043215432041), partition -&gt; 202111118，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2631300262004576551</span><br><span class="line">sequenceNumber -&gt; 119，key-&gt; (1,6131719117356614326), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3625174553481934943</span><br><span class="line">sequenceNumber -&gt; 120，key-&gt; (3,-1502604583186164397), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; 3846349663287424781</span><br><span class="line">sequenceNumber -&gt; 121，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7807137138863559106</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 123，key-&gt; (4,-2809234249706038955), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -2773621620197680128</span><br><span class="line">sequenceNumber -&gt; 124，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -7807137138863559106</span><br><span class="line">sequenceNumber -&gt; 125，key-&gt; (3,2621136369545533468), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; 3438152369562492786</span><br><span class="line">sequenceNumber -&gt; 126，key-&gt; (0,-7493190883694484629), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; ADD, value -&gt; -691195151125151453</span><br><span class="line">sequenceNumber -&gt; 127，key-&gt; (8,-1490509224765896290), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -1869246074664134885</span><br><span class="line">sequenceNumber -&gt; 128，key-&gt; (9,5511132099839824070), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -6181385120508855967</span><br><span class="line">sequenceNumber -&gt; 129，key-&gt; (9,3381161680610456082), partition -&gt; 202111118，bucket -&gt; 2，op -&gt; ADD, value -&gt; -5229930391996865858</span><br><span class="line">sequenceNumber -&gt; 130，key-&gt; (9,-47790794541920130), partition -&gt; 202111119，bucket -&gt; 1，op -&gt; DELETE, value -&gt; -227302505361441636</span><br><span class="line">sequenceNumber -&gt; 131，key-&gt; (1,-1992061607722333830), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 740900030264769173</span><br><span class="line">sequenceNumber -&gt; 132，key-&gt; (0,2752227170646411346), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; ADD, value -&gt; -3727436349553309033</span><br><span class="line">sequenceNumber -&gt; 133，key-&gt; (0,-7493190883694484629), partition -&gt; 202111119，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -691195151125151453</span><br><span class="line">sequenceNumber -&gt; 134，key-&gt; (1,2013654839833803469), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7278425883508791793</span><br><span class="line">sequenceNumber -&gt; 135，key-&gt; (1,-995426609618169301), partition -&gt; 202111119，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7775193237863598706</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 137，key-&gt; (2,911633586820358694), partition -&gt; 202111109，bucket -&gt; 2，op -&gt; ADD, value -&gt; -7827113035897188605</span><br><span class="line">sequenceNumber -&gt; 138，key-&gt; (2,9211428132443295825), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; ADD, value -&gt; 3254598811000233626</span><br><span class="line">sequenceNumber -&gt; 139，key-&gt; (2,4167920832653664558), partition -&gt; 202111108，bucket -&gt; 2，op -&gt; DELETE, value -&gt; -1608623588433602165</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 141，key-&gt; (3,-8204171576376413410), partition -&gt; 202111108，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1994264609579986073</span><br><span class="line">sequenceNumber -&gt; 142，key-&gt; (3,-6539095021197140424), partition -&gt; 202111108，bucket -&gt; 1，op -&gt; DELETE, value -&gt; 8378366812547696285</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>partition=’2021111109’, bucket=0 的 memTableCapacity 首批达到阈值 20，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br></pre></td></tr></table></figure><p>将 memTable 中的数据按 key,sequenceNumber 排序，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 76，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 6，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 8884526624823745720</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 97，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 91，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -2300521514824600373</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br></pre></td></tr></table></figure><p>再按 key 聚合去重，数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 43，key-&gt; (0,-6226701972071386686), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 26，key-&gt; (1,-7142099498597121533), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 1917445126268645259</span><br><span class="line">sequenceNumber -&gt; 36，key-&gt; (1,-5623847903170117779), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 0</span><br><span class="line">sequenceNumber -&gt; 61，key-&gt; (2,8374523283379480403), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5038785059845636753</span><br><span class="line">sequenceNumber -&gt; 143，key-&gt; (3,-7200693063745648300), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3495569691632159874</span><br><span class="line">sequenceNumber -&gt; 54，key-&gt; (3,3608248884997787695), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -3940207861520786810</span><br><span class="line">sequenceNumber -&gt; 101，key-&gt; (4,-6997582686150743744), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6881154136677825108</span><br><span class="line">sequenceNumber -&gt; 16，key-&gt; (4,-6161397105244672436), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 7720821486888822402</span><br><span class="line">sequenceNumber -&gt; 122，key-&gt; (5,4613811878340843445), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 7183355362201992291</span><br><span class="line">sequenceNumber -&gt; 80，key-&gt; (6,586933908778291566), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 5353448919407202023</span><br><span class="line">sequenceNumber -&gt; 62，key-&gt; (6,5937024096732189195), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 6587997598195970439</span><br><span class="line">sequenceNumber -&gt; 99，key-&gt; (7,-9073451180094251128), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; -8421032384434482841</span><br><span class="line">sequenceNumber -&gt; 140，key-&gt; (7,-3849150167657665208), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 4825606727435135080</span><br><span class="line">sequenceNumber -&gt; 136，key-&gt; (8,-6326910797838432808), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; 3157902831734464520</span><br><span class="line">sequenceNumber -&gt; 113，key-&gt; (9,-824271909935124719), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; ADD, value -&gt; 2544637467764560104</span><br><span class="line">sequenceNumber -&gt; 105，key-&gt; (9,-3592114153078238858), partition -&gt; 202111109，bucket -&gt; 0，op -&gt; DELETE, value -&gt; -2300521514824600373</span><br></pre></td></tr></table></figure><h3 id="ManifestFileTest"><a href="#ManifestFileTest" class="headerlink" title="ManifestFileTest"></a>ManifestFileTest</h3><figure class="highlight java"><figcaption><span>ManifestFileTest#testWriteAndReadManifestFile</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestFileTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> ManifestFile&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestFileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ManifestTestDataGenerator gen = ManifestTestDataGenerator.builder().build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadManifestFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一批数据，并拼装返回 List&lt;ManifestEntry&gt;</span></span><br><span class="line">        List&lt;ManifestEntry&gt; entries = generateData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 ManifestFileMeta 对象，用于与真实写入 manifest file 返回的 ManifestFileMeta 做比较</span></span><br><span class="line">        ManifestFileMeta meta = gen.createManifestFileMeta(entries);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ManifestFile ，用于读写 manifest file</span></span><br><span class="line">        ManifestFile manifestFile = createManifestFile(tempDir.toString());</span><br><span class="line">        <span class="comment">// ManifestFile.write() -&gt; ManifestRollingFile.write() -&gt; RollingFile.write() -&gt;</span></span><br><span class="line">        <span class="comment">// ManifestRollingFile.collectFile(Path)， 返回 ManifestFileMeta</span></span><br><span class="line">        List&lt;ManifestFileMeta&gt; actualMetas = manifestFile.write(entries);</span><br><span class="line">        checkRollingFiles(meta, actualMetas, manifestFile.suggestedFileSize());</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestEntry&gt; actualEntries =</span><br><span class="line">                actualMetas.stream()</span><br><span class="line">                        <span class="comment">// ManifestFile.read() -&gt; FileUtils.readListFromFile() 构建 SourceSplit -&gt; BulkFormat.Reader</span></span><br><span class="line">                        .flatMap(m -&gt; manifestFile.read(m.fileName()).stream())</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">        assertThat(actualEntries).isEqualTo(entries);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ManifestEntry&gt; <span class="title">generateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestEntry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            ManifestEntry manifestEntry = gen.next();</span><br><span class="line"></span><br><span class="line">            System.out.println(String.format(<span class="string">"manifestEntry: valueKind -&gt; %s，partition -&gt; %s，bucket -&gt; %s，level -&gt; %s，"</span> +</span><br><span class="line">                            <span class="string">"sst file name -&gt; %s"</span>,</span><br><span class="line">                    manifestEntry.kind().toString(),</span><br><span class="line">                    manifestEntry.partition().getString(<span class="number">0</span>) + <span class="string">""</span> + manifestEntry.partition().getInt(<span class="number">1</span>),</span><br><span class="line">                    manifestEntry.bucket(),</span><br><span class="line">                    manifestEntry.bucket(),</span><br><span class="line">                    manifestEntry.file().fileName()));</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            entries.add(manifestEntry);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entries;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ManifestTestDataGenerator.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestTestDataGenerator.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Random &#123;<span class="doctag">@link</span> ManifestEntry&#125; generator. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestTestDataGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL_CAPACITY = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;&gt; levels;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstTestDataGenerator gen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;ManifestEntry&gt; bufferedResults;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ManifestEntry <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bufferedResults.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bufferedResults.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成内存对象 sst file Data</span></span><br><span class="line">        SstTestDataGenerator.Data file = gen.next();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">"sst file: partition -&gt; %s，bucket -&gt; %s，level -&gt; %s，"</span> +</span><br><span class="line">                        <span class="string">"sst file name -&gt; %s"</span>,</span><br><span class="line">                file.partition.getString(<span class="number">0</span>) + <span class="string">""</span> + file.partition.getInt(<span class="number">1</span>),</span><br><span class="line">                file.bucket, file.bucket, file.meta.fileName()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// levels List&lt;Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;&gt;，每个元素代表一个 level</span></span><br><span class="line">        <span class="comment">// Map&lt;BinaryRowData, List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt; ，&lt;partition，List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt;&gt;</span></span><br><span class="line">        <span class="comment">// List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; ，每一个元素代表一个 bucket</span></span><br><span class="line">        <span class="comment">// List&lt;SstTestDataGenerator.Data&gt; ，代表 bucket 中的 lsm data files</span></span><br><span class="line">        List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; bucketLevels =</span><br><span class="line">                levels.get(file.bucket).computeIfAbsent(file.partition, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        ensureCapacity(bucketLevels, file.meta.level());</span><br><span class="line"></span><br><span class="line">        List&lt;SstTestDataGenerator.Data&gt; level = bucketLevels.get(file.meta.level());</span><br><span class="line">        <span class="comment">// 添加到 bucket 下的 lsm data file list 中</span></span><br><span class="line">        level.add(file);</span><br><span class="line"></span><br><span class="line">        bufferedResults.push(</span><br><span class="line">                <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                        ValueKind.ADD, file.partition, file.bucket, numBuckets, file.meta));</span><br><span class="line">        <span class="comment">// merge level</span></span><br><span class="line">        mergeLevelsIfNeeded(file.partition, file.bucket);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bufferedResults.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lsm tree level 文件合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeLevelsIfNeeded</span><span class="params">(BinaryRowData partition, <span class="keyword">int</span> bucket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this method uses a very simple merging strategy just for producing valid data</span></span><br><span class="line">        List&lt;List&lt;SstTestDataGenerator.Data&gt;&gt; bucketLevels = levels.get(bucket).get(partition);</span><br><span class="line">        <span class="keyword">int</span> lastModifiedLevel = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// level0 通常会限制 sst file 个数为4</span></span><br><span class="line">        <span class="keyword">while</span> (bucketLevels.get(lastModifiedLevel).size() &gt; LEVEL_CAPACITY) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// remove all sst files in the current and next level</span></span><br><span class="line">            ensureCapacity(bucketLevels, lastModifiedLevel + <span class="number">1</span>);</span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; currentLevel = bucketLevels.get(lastModifiedLevel);</span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; nextLevel = bucketLevels.get(lastModifiedLevel + <span class="number">1</span>);</span><br><span class="line">            List&lt;KeyValue&gt; kvs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : currentLevel) &#123;</span><br><span class="line">                <span class="comment">// ManifestEntry 的 ValueKind 为 DELETE，合并之后将被删除</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                                ValueKind.DELETE, partition, bucket, numBuckets, file.meta));</span><br><span class="line">                <span class="comment">// 将当前 level 下的 sst files 加入 kvs</span></span><br><span class="line">                kvs.addAll(file.content);</span><br><span class="line">            &#125;</span><br><span class="line">            currentLevel.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : nextLevel) &#123;</span><br><span class="line">                <span class="comment">// ManifestEntry 的 ValueKind 为 DELETE，合并之后将被删除</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(</span><br><span class="line">                                ValueKind.DELETE, partition, bucket, numBuckets, file.meta));</span><br><span class="line">                <span class="comment">// 将 next level 下的 sst files 加入 kvs</span></span><br><span class="line">                kvs.addAll(file.content);</span><br><span class="line">            &#125;</span><br><span class="line">            nextLevel.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add back merged sst files</span></span><br><span class="line">            <span class="comment">// 在 next level 中，为 currentLevel 和 nextLevel 合并好的有序 LinkedList&lt;KeyValues&gt; 创建 sst file</span></span><br><span class="line">            <span class="comment">// 根据 key,sequenceNumber 进行排序，按 key 聚合去重</span></span><br><span class="line">            List&lt;SstTestDataGenerator.Data&gt; merged =</span><br><span class="line">                    gen.createSstFiles(kvs, lastModifiedLevel + <span class="number">1</span>, partition, bucket);</span><br><span class="line">            <span class="comment">// 新创建的 sst files 加入到 next level</span></span><br><span class="line">            nextLevel.addAll(merged);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SstTestDataGenerator.Data file : nextLevel) &#123;</span><br><span class="line">                <span class="comment">// 遍历 next level 中的 sst files ，生成一个新的 List&lt;ManifestEntry&gt;</span></span><br><span class="line">                bufferedResults.push(</span><br><span class="line">                        <span class="keyword">new</span> ManifestEntry(ValueKind.ADD, partition, bucket, numBuckets, file.meta));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastModifiedLevel += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ManifestFileMeta <span class="title">createManifestFileMeta</span><span class="params">(List&lt;ManifestEntry&gt; entries)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(</span><br><span class="line">                !entries.isEmpty(), <span class="string">"Manifest entries are empty. Invalid test data."</span>);</span><br><span class="line"></span><br><span class="line">        FieldStatsCollector collector =</span><br><span class="line">                <span class="keyword">new</span> FieldStatsCollector(TestKeyValueGenerator.PARTITION_TYPE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> numAddedFiles = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> numDeletedFiles = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ManifestEntry entry : entries) &#123;</span><br><span class="line">            collector.collect(entry.partition());</span><br><span class="line">            <span class="keyword">if</span> (entry.kind() == ValueKind.ADD) &#123;</span><br><span class="line">                numAddedFiles++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                numDeletedFiles++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestFileMeta(</span><br><span class="line">                <span class="string">"manifest-"</span> + UUID.randomUUID(),</span><br><span class="line">                entries.size() * <span class="number">100L</span>,</span><br><span class="line">                numAddedFiles,</span><br><span class="line">                numDeletedFiles,</span><br><span class="line">                collector.extract());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManifestFile <span class="title">createManifestFile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory =</span><br><span class="line">                <span class="keyword">new</span> FileStorePathFactory(</span><br><span class="line">                        <span class="keyword">new</span> Path(path), TestKeyValueGenerator.PARTITION_TYPE, <span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">int</span> suggestedFileSize = ThreadLocalRandom.current().nextInt(<span class="number">8192</span>) + <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestFile.Factory(</span><br><span class="line">                        TestKeyValueGenerator.PARTITION_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.KEY_TYPE,</span><br><span class="line">                        TestKeyValueGenerator.ROW_TYPE,</span><br><span class="line">                        avro,</span><br><span class="line">                        pathFactory,</span><br><span class="line">                        suggestedFileSize)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sst files：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-40dab8b8-a7c0-4707-9743-b3a91c2d12f7</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-1e8deb99-9685-48e9-99c2-162db58b68b2</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">sst file: partition -&gt; 202111118，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-4d10b7c1-d152-46d4-b9ca-4516e8c44b90</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-23feaaf4-5e2a-42b3-95b9-c2383c6125f7</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48 // lsm files &gt; 3</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-0dc375a6-4819-4f2d-ab9e-8db87f9567f8</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-8c7b1c56-91f1-40bc-aeda-d00b181c919e</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-242a0b57-a2b0-4008-bb94-489d30c81f74</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-15609d8a-de66-4628-b8c9-bee68ba7c9ae</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">sst file: partition -&gt; 202111119，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-60666da9-27ef-4169-871b-34426c78fb30</span><br><span class="line">sst file: partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-fa182845-ed32-461c-b5f4-911fd625c9e6</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f // lsm files &gt; 3</span><br><span class="line">sst file: partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-90b8d42a-5fd7-4a23-9af4-0c449b543a57</span><br><span class="line">sst file: partition -&gt; 202111118，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-83fdee55-99f8-4306-a24c-6a67f2cd7c8a</span><br></pre></td></tr></table></figure><p>manifestEntry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-40dab8b8-a7c0-4707-9743-b3a91c2d12f7</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-1e8deb99-9685-48e9-99c2-162db58b68b2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111118，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-4d10b7c1-d152-46d4-b9ca-4516e8c44b90</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-23feaaf4-5e2a-42b3-95b9-c2383c6125f7</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line"></span><br><span class="line">// 1. 生成 sst-cf014187-3a62-48ca-bac3-26e9d899cc48 之后，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1 的 lsm files &gt; 3 ，压栈</span><br><span class="line">// 2. 依次标记删除当前 level 层的 lsm file</span><br><span class="line">// 3. merge 生成一个新的 lsm file sst-b8c363dd-d918-4425-ae31-449d76d3e4a3</span><br><span class="line">// 经过以上3步，出栈的顺序如下：</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-b8c363dd-d918-4425-ae31-449d76d3e4a3</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-686f60a7-29e8-4d67-81bd-07cc47fc4db8</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-833c7b50-b39f-4a1b-9ee6-7fab8011499d</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-c572853c-3ceb-4df3-b002-4dfdc6d15e6a</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-cf014187-3a62-48ca-bac3-26e9d899cc48</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-0dc375a6-4819-4f2d-ab9e-8db87f9567f8</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-8c7b1c56-91f1-40bc-aeda-d00b181c919e</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-242a0b57-a2b0-4008-bb94-489d30c81f74</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-15609d8a-de66-4628-b8c9-bee68ba7c9ae</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111119，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-60666da9-27ef-4169-871b-34426c78fb30</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111108，bucket -&gt; 1，level -&gt; 1，sst file name -&gt; sst-fa182845-ed32-461c-b5f4-911fd625c9e6</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-592e5b47-844b-4c49-8ffe-8e183560dbe5</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-50b1ca0f-39bf-4c93-b2bd-37633682cbab</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-70ff1288-6e62-473e-aab1-3950e87118e8</span><br><span class="line">manifestEntry: valueKind -&gt; DELETE，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-25d3a4e5-b452-488d-889d-59a152d610a2</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 0，level -&gt; 0，sst file name -&gt; sst-ad729042-e2a6-4c36-97d3-ab62ec1fe30f</span><br><span class="line"></span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111109，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-90b8d42a-5fd7-4a23-9af4-0c449b543a57</span><br><span class="line">manifestEntry: valueKind -&gt; ADD，partition -&gt; 202111118，bucket -&gt; 2，level -&gt; 2，sst file name -&gt; sst-83fdee55-99f8-4306-a24c-6a67f2cd7c8a</span><br></pre></td></tr></table></figure><h3 id="ManifestListTest"><a href="#ManifestListTest" class="headerlink" title="ManifestListTest"></a>ManifestListTest</h3><figure class="highlight java"><figcaption><span>ManifestListTest#testWriteAndReadManifestList</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/manifest/ManifestListTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> ManifestList&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManifestListTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ManifestTestDataGenerator gen = ManifestTestDataGenerator.builder().build();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RepeatedTest</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndReadManifestList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 生成 kv 数据 -&gt; 组装 ManifestEntry 生成 ManifestFileMeta -&gt; 返回 ManifestFileMeta list</span></span><br><span class="line">        List&lt;ManifestFileMeta&gt; metas = generateData();</span><br><span class="line"></span><br><span class="line">        ManifestList manifestList = createManifestList(tempDir.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依次序列化写入 ManifestFileMeta</span></span><br><span class="line">        String manifestListName = manifestList.write(metas);</span><br><span class="line"></span><br><span class="line">        List&lt;ManifestFileMeta&gt; actualMetas = manifestList.read(manifestListName);</span><br><span class="line">        assertThat(actualMetas).isEqualTo(metas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ManifestFileMeta&gt; <span class="title">generateData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        List&lt;ManifestFileMeta&gt; metas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            List&lt;ManifestEntry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = random.nextInt(<span class="number">10</span>) + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                entries.add(gen.next());</span><br><span class="line">            &#125;</span><br><span class="line">            metas.add(gen.createManifestFileMeta(entries));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManifestList <span class="title">createManifestList</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        FileStorePathFactory pathFactory =</span><br><span class="line">                <span class="keyword">new</span> FileStorePathFactory(</span><br><span class="line">                        <span class="keyword">new</span> Path(path), TestKeyValueGenerator.PARTITION_TYPE, <span class="string">"default"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ManifestList.Factory(TestKeyValueGenerator.PARTITION_TYPE, avro, pathFactory)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IntervalPartitionTest"><a href="#IntervalPartitionTest" class="headerlink" title="IntervalPartitionTest"></a>IntervalPartitionTest</h3><figure class="highlight java"><figcaption><span>IntervalPartitionTest.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/IntervalPartitionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> IntervalPartition&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalPartitionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSameMinKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[100, 200], [100, 400], [100, 300], [100, 500]"</span>, </span><br><span class="line">                <span class="comment">// 输出    </span></span><br><span class="line">                <span class="string">"[100, 200] | [100, 300] | [100, 400] | [100, 500]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSameMaxKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[100, 500], [300, 500], [200, 500], [400, 500]"</span>,</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                <span class="string">"[100, 500] | [200, 500] | [300, 500] | [400, 500]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSectionPartitioning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0    5    10   15   20   25   30</span></span><br><span class="line">        <span class="comment">// |--------|</span></span><br><span class="line">        <span class="comment">//      |-|</span></span><br><span class="line">        <span class="comment">//          |-----|</span></span><br><span class="line">        <span class="comment">//                 |-----|</span></span><br><span class="line">        <span class="comment">//                 |-----------|</span></span><br><span class="line">        <span class="comment">//                         |-------|</span></span><br><span class="line">        <span class="comment">// 0    5    10   15   20   25   30</span></span><br><span class="line">        runTest(</span><br><span class="line">                <span class="comment">// 输入</span></span><br><span class="line">                <span class="string">"[0, 9], [5, 7], [9, 15], [16, 22], [16, 28], [24, 32]"</span>,</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                <span class="string">"[0, 9] | [5, 7], [9, 15]\n[16, 22], [24, 32] | [16, 28]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * p=p0/bucket-0/[0,9]</span></span><br><span class="line"><span class="comment">         *     /bucket-1/[5-7] [9-15]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * p=p1/bucket-0/[16,22] [24,32]</span></span><br><span class="line"><span class="comment">         *     /bucket-1/[16,28]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>IntervalPartition.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/compact/IntervalPartition.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Algorithm to partition several sst files into the minimum number of &#123;<span class="doctag">@link</span> SortedRun&#125;s. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalPartition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntervalPartition</span><span class="params">(List&lt;SstFileMeta&gt; inputFiles, Comparator&lt;RowData&gt; keyComparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.files = <span class="keyword">new</span> ArrayList&lt;&gt;(inputFiles);</span><br><span class="line">        <span class="comment">// 输入的 sst file metas 依次按照 minKey 、maxKey 排序</span></span><br><span class="line">        <span class="keyword">this</span>.files.sort(</span><br><span class="line">                (o1, o2) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">int</span> leftResult = keyComparator.compare(o1.minKey(), o2.minKey());</span><br><span class="line">                    <span class="keyword">return</span> leftResult == <span class="number">0</span></span><br><span class="line">                            ? keyComparator.compare(o1.maxKey(), o2.maxKey())</span><br><span class="line">                            : leftResult;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">this</span>.keyComparator = keyComparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;SortedRun&gt;&gt; partition() &#123;</span><br><span class="line">        List&lt;List&lt;SortedRun&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; section = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        BinaryRowData bound = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SstFileMeta meta : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!section.isEmpty() &amp;&amp; keyComparator.compare(meta.minKey(), bound) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// larger than current right bound, conclude current section and create a new one</span></span><br><span class="line">                <span class="comment">// [16,22] 的 mingKey 大于 bound，即 [9,15] ，将之前输入的 [0,9]、[5,7]、[9,15] 聚合在一个 partition 下</span></span><br><span class="line">                result.add(partition(section));</span><br><span class="line">                section.clear();</span><br><span class="line">                bound = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            section.add(meta);</span><br><span class="line">            <span class="keyword">if</span> (bound == <span class="keyword">null</span> || keyComparator.compare(meta.maxKey(), bound) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// update right bound</span></span><br><span class="line">                bound = meta.maxKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!section.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// conclude last section</span></span><br><span class="line">            result.add(partition(section));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SortedRun&gt; <span class="title">partition</span><span class="params">(List&lt;SstFileMeta&gt; metas)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 优先级队列，maxKey 小的排在队列前面</span></span><br><span class="line">        PriorityQueue&lt;List&lt;SstFileMeta&gt;&gt; queue =</span><br><span class="line">                <span class="keyword">new</span> PriorityQueue&lt;&gt;(</span><br><span class="line">                        (o1, o2) -&gt;</span><br><span class="line">                                <span class="comment">// sort by max key of the last sst file</span></span><br><span class="line">                                keyComparator.compare(</span><br><span class="line">                                        o1.get(o1.size() - <span class="number">1</span>).maxKey(),</span><br><span class="line">                                        o2.get(o2.size() - <span class="number">1</span>).maxKey()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [0,9]、[5,7]、[9,15]</span></span><br><span class="line">        <span class="comment">// create the initial partition</span></span><br><span class="line">        List&lt;SstFileMeta&gt; firstRun = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        firstRun.add(metas.get(<span class="number">0</span>));</span><br><span class="line">        queue.add(firstRun);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; metas.size(); i++) &#123;</span><br><span class="line">            SstFileMeta meta = metas.get(i);</span><br><span class="line">            <span class="comment">// any file list whose max key &lt; meta.minKey() is sufficient,</span></span><br><span class="line">            <span class="comment">// for convenience we pick the smallest</span></span><br><span class="line">            List&lt;SstFileMeta&gt; top = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (keyComparator.compare(meta.minKey(), top.get(top.size() - <span class="number">1</span>).maxKey()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// append current file to an existing partition</span></span><br><span class="line">                <span class="comment">// [9,15] 的 minKey = 9 &gt; [5,7] 的 maxKey = 7</span></span><br><span class="line">                top.add(meta);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// [5,7] 的 minKey = 7 &lt; [0,9] 的 maxKey</span></span><br><span class="line">                <span class="comment">// create a new partition ，我理解为一个新的 bucket</span></span><br><span class="line">                List&lt;SstFileMeta&gt; newRun = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                newRun.add(meta);</span><br><span class="line">                queue.add(newRun);</span><br><span class="line">            &#125;</span><br><span class="line">            queue.add(top);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// order between partitions does not matter</span></span><br><span class="line">        <span class="keyword">return</span> queue.stream().map(SortedRun::fromSorted).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UniversalCompactionTest"><a href="#UniversalCompactionTest" class="headerlink" title="UniversalCompactionTest"></a>UniversalCompactionTest</h3><ul><li>testSizeAmplification</li></ul><figure class="highlight java"><figcaption><span>UniversalCompactionTest#testSizeAmplification</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/UniversalCompactionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Test for &#123;<span class="doctag">@link</span> UniversalCompaction&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniversalCompactionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSizeAmplification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UniversalCompaction compaction = <span class="keyword">new</span> UniversalCompaction(<span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span>[] sizes = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 满足条件的，CompactionUnit != null，返回 files 的 totalSize 之和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1&#125; 1*100 &gt; 25*1 ，CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,2&#125; 1*100 &gt; 25*2 ，CompactionUnit != null 返回 &#123;1,2&#125; -&gt; &#123;3&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,3&#125; 1*100 &gt; 25*3 ，CompactionUnit != null 返回 &#123;1,3&#125; -&gt; &#123;4&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,4&#125; 1*100 = 25*4 ，CompactionUnit == null ， &#123;1,4&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,4&#125; 2*100 &gt; 25*4 ，CompactionUnit != null 返回 &#123;1,1,4&#125; -&gt; &#123;6&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">6</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,6&#125; 1*100 &lt; 25*6 ，CompactionUnit == null ， &#123;1,6&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">6</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,6&#125; 2*100 &gt; 25*6 ，CompactionUnit != null 返回 &#123;1,1,6&#125; -&gt; &#123;8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,8&#125; 1*100 &lt; 25*8 ，CompactionUnit == null ， &#123;1,8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,8&#125; 2*100 = 25*8 ，CompactionUnit == null ， &#123;1,1,8&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,8&#125; 3*100 &gt; 25*8 ，CompactionUnit != null 返回 &#123;1,1,1,8&#125; -&gt; &#123;11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,11&#125; 1*100 &lt; 25*11 ，CompactionUnit == null ， &#123;1,11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,11&#125; 2*100 &lt; 25*11 ，CompactionUnit == null ， &#123;1,1,11&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,11&#125; 3*100 &gt; 25*11 ，CompactionUnit != null 返回 &#123;1,1,1,11&#125; -&gt; &#123;14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,14&#125; 1*100 &lt; 25*14 ，CompactionUnit == null ， &#123;1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,14&#125; 2*100 &lt; 25*14 ，CompactionUnit != null ， &#123;1,1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,14&#125; 3*100 &lt; 25*14 ，CompactionUnit == null ， &#123;1,1,1,14&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入 &#123;1,1,1,1,14&#125; 4*100 &gt; 25*14 ，CompactionUnit != null 返回 &#123;1,1,1,1,14&#125; -&gt; &#123;18&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeAmp(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">18</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testSizeRatio</li></ul><figure class="highlight java"><figcaption><span>UniversalCompactionTest#testSizeRatio</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/compact/UniversalCompactionTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Test for &#123;<span class="doctag">@link</span> UniversalCompaction&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniversalCompactionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSizeRatio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UniversalCompaction compaction = <span class="keyword">new</span> UniversalCompaction(<span class="number">25</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">long</span>[] sizes = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 满足条件的，CompactionUnit != null，返回 files 的 totalSize 之和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,1&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// CompactionUnit !=null 返回 &#123;1,1,1,1,1&#125; -&gt; &#123;5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 2 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ， &#123;1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,1,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &lt; 5 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1,1&#125; -&gt; &#123;4&#125; ，&#123;4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &lt; 1 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1&#125; -&gt; &#123;3&#125; ，&#123;3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &lt; 1 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125; ，&#123;2,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,2,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &lt; 2 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,2,3,4,5&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,2,3,4,5&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 4</span></span><br><span class="line">        <span class="comment">// 5*(100+1)/100 &gt; 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,2,3,4,5&#125; -&gt; &#123;16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 2 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,1,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,1,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &lt; 16</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1,1&#125; -&gt; &#123;4&#125; ，&#123;4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 3 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,1,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,1,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &lt; 4</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,1&#125; -&gt; &#123;3&#125; ，&#123;3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// runs.size = 4 &lt; maxRunNum = 5</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &lt; 3 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1&#125; -&gt; &#123;2&#125; ，&#123;2,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,2,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &lt; 2 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit == null ，&#123;1,2,3,4,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123;1,1,2,3,4,16&#125;</span></span><br><span class="line">        <span class="comment">// 1*(100+1)/100 &gt; 1</span></span><br><span class="line">        <span class="comment">// 2*(100+1)/100 &gt; 2</span></span><br><span class="line">        <span class="comment">// 3*(100+1)/100 &gt; 3</span></span><br><span class="line">        <span class="comment">// 4*(100+1)/100 &gt; 4</span></span><br><span class="line">        <span class="comment">// 5*(100+1)/100 &lt; 16 break</span></span><br><span class="line">        <span class="comment">// CompactionUnit != null 返回 &#123;1,1,2,3,4&#125; -&gt; &#123;11&#125; ，&#123;11,16&#125;</span></span><br><span class="line">        sizes = appendAndPickForSizeRatio(compaction, sizes);</span><br><span class="line">        assertThat(sizes).isEqualTo(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">11</span>, <span class="number">16</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MergeTreeTest"><a href="#MergeTreeTest" class="headerlink" title="MergeTreeTest"></a>MergeTreeTest</h3><figure class="highlight java"><figcaption><span>MergeTreeTest#testWriteAndRead</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/test/java/org/apache/flink/table/store/file/mergetree/MergeTreeTest.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tests for &#123;<span class="doctag">@link</span> MergeTreeReader&#125; and &#123;<span class="doctag">@link</span> MergeTreeWriter&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTreeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TempDir</span> java.nio.file.Path tempDir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService service;</span><br><span class="line">    <span class="keyword">private</span> FileStorePathFactory pathFactory;</span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;RowData&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MergeTreeOptions options;</span><br><span class="line">    <span class="keyword">private</span> SstFileReader sstFileReader;</span><br><span class="line">    <span class="keyword">private</span> SstFileWriter sstFileWriter;</span><br><span class="line">    <span class="keyword">private</span> RecordWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service = Executors.newSingleThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.shutdownNow();</span><br><span class="line">        service = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        pathFactory = <span class="keyword">new</span> FileStorePathFactory(<span class="keyword">new</span> Path(tempDir.toString()));</span><br><span class="line">        comparator = Comparator.comparingInt(o -&gt; o.getInt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MergeTree</span></span><br><span class="line">        recreateMergeTree(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 bucket dir</span></span><br><span class="line">        Path bucketDir = sstFileWriter.pathFactory().toPath(<span class="string">"ignore"</span>).getParent();</span><br><span class="line">        bucketDir.getFileSystem().mkdirs(bucketDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateMergeTree</span><span class="params">(<span class="keyword">long</span> targetFileSize)</span> </span>&#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        configuration.set(MergeTreeOptions.WRITE_BUFFER_SIZE, <span class="keyword">new</span> MemorySize(<span class="number">4096</span> * <span class="number">3</span>));</span><br><span class="line">        configuration.set(MergeTreeOptions.PAGE_SIZE, <span class="keyword">new</span> MemorySize(<span class="number">4096</span>));</span><br><span class="line">        configuration.set(MergeTreeOptions.TARGET_FILE_SIZE, <span class="keyword">new</span> MemorySize(targetFileSize));</span><br><span class="line">        options = <span class="keyword">new</span> MergeTreeOptions(configuration);</span><br><span class="line">        RowType keyType = <span class="keyword">new</span> RowType(singletonList(<span class="keyword">new</span> RowType.RowField(<span class="string">"k"</span>, <span class="keyword">new</span> IntType())));</span><br><span class="line">        RowType valueType = <span class="keyword">new</span> RowType(singletonList(<span class="keyword">new</span> RowType.RowField(<span class="string">"v"</span>, <span class="keyword">new</span> IntType())));</span><br><span class="line">        FileFormat flushingAvro = <span class="keyword">new</span> FlushingFileFormat(<span class="string">"avro"</span>);</span><br><span class="line"></span><br><span class="line">        sstFileReader =</span><br><span class="line">                <span class="keyword">new</span> SstFileReader.Factory(keyType, valueType, flushingAvro, pathFactory)</span><br><span class="line">                        .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">        sstFileWriter =</span><br><span class="line">                <span class="keyword">new</span> SstFileWriter.Factory(</span><br><span class="line">                                keyType,</span><br><span class="line">                                valueType,</span><br><span class="line">                                flushingAvro,</span><br><span class="line">                                pathFactory,</span><br><span class="line">                                options.targetFileSize)</span><br><span class="line">                        .create(BinaryRowDataUtil.EMPTY_ROW, <span class="number">0</span>);</span><br><span class="line">        writer = createMergeTreeWriter(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MergeTreeWriter <span class="title">createMergeTreeWriter</span><span class="params">(List&lt;SstFileMeta&gt; files)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始为 -1</span></span><br><span class="line">        <span class="keyword">long</span> maxSequenceNumber =</span><br><span class="line">                files.stream().map(SstFileMeta::maxSequenceNumber).max(Long::compare).orElse(-<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MergeTreeWriter(</span><br><span class="line">                <span class="keyword">new</span> SortBufferMemTable(</span><br><span class="line">                        sstFileWriter.keyType(),</span><br><span class="line">                        sstFileWriter.valueType(),</span><br><span class="line">                        options.writeBufferSize,</span><br><span class="line">                        options.pageSize),</span><br><span class="line">                createCompactManager(sstFileWriter, service),</span><br><span class="line">                <span class="comment">// stores all level files of merge tree</span></span><br><span class="line">                <span class="keyword">new</span> Levels(comparator, files, options.numLevels),</span><br><span class="line">                maxSequenceNumber,</span><br><span class="line">                comparator,</span><br><span class="line">                <span class="comment">// where key is primary key (unique) and value is the full record, only keep the latest one.</span></span><br><span class="line">                <span class="keyword">new</span> DeduplicateAccumulator(),</span><br><span class="line">                sstFileWriter,</span><br><span class="line">                <span class="comment">// 提交之后，强制执行 compact</span></span><br><span class="line">                options.commitForceCompact);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompactManager <span class="title">createCompactManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SstFileWriter sstFileWriter, ExecutorService compactExecutor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建压缩策略</span></span><br><span class="line">        CompactStrategy compactStrategy =</span><br><span class="line">                <span class="keyword">new</span> UniversalCompaction(</span><br><span class="line">                        options.maxSizeAmplificationPercent,</span><br><span class="line">                        options.sizeRatio,</span><br><span class="line">                        options.numSortedRunMax);</span><br><span class="line">        CompactManager.Rewriter rewriter =</span><br><span class="line">                (outputLevel, dropDelete, sections) -&gt;</span><br><span class="line">                        sstFileWriter.write(</span><br><span class="line">                                <span class="keyword">new</span> RecordReaderIterator(</span><br><span class="line">                                        <span class="keyword">new</span> MergeTreeReader(</span><br><span class="line">                                                sections,</span><br><span class="line">                                                dropDelete,</span><br><span class="line">                                                sstFileReader,</span><br><span class="line">                                                comparator,</span><br><span class="line">                                                <span class="keyword">new</span> DeduplicateAccumulator())),</span><br><span class="line">                                outputLevel);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompactManager(</span><br><span class="line">                compactExecutor, compactStrategy, comparator, options.targetFileSize, rewriter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteAndRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一批 200 条数据</span></span><br><span class="line">    <span class="keyword">int</span> batchNumber = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> perBatch = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;TestRecord&gt; expected = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; newFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; newFileNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        List&lt;SstFileMeta&gt; compactedFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ================================ 测试写入 ================================</span></span><br><span class="line">        <span class="comment">// write batch and commit</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= batchNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; batchNumber) &#123;</span><br><span class="line">                expected.addAll(writeBatch(perBatch));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writer.sync();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 所有数据都写入之后，接着执行 prepareCommit ，内部会再次执行 flush() ，返回增量 new files</span></span><br><span class="line">            Increment increment = writer.prepareCommit();</span><br><span class="line">            newFiles.addAll(increment.newFiles());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行合并，用于断言</span></span><br><span class="line">            mergeCompacted(newFileNames, compactedFiles, increment);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// ================================ 测试读取 ================================</span></span><br><span class="line">        <span class="comment">// assert records from writer</span></span><br><span class="line">        assertRecords(expected);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assert records from increment new files</span></span><br><span class="line">        assertRecords(expected, newFiles, <span class="keyword">false</span>);</span><br><span class="line">        assertRecords(expected, newFiles, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assert records from increment compacted files</span></span><br><span class="line">        assertRecords(expected, compactedFiles, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空目录下创建的一些文件</span></span><br><span class="line">        Path bucketDir = sstFileWriter.pathFactory().toPath(<span class="string">"ignore"</span>).getParent();</span><br><span class="line">        Set&lt;String&gt; files =</span><br><span class="line">                Arrays.stream(bucketDir.getFileSystem().listStatus(bucketDir))</span><br><span class="line">                        .map(FileStatus::getPath)</span><br><span class="line">                        .map(Path::getName)</span><br><span class="line">                        .collect(Collectors.toSet());</span><br><span class="line">        newFiles.stream().map(SstFileMeta::fileName).forEach(files::remove);</span><br><span class="line">        compactedFiles.stream().map(SstFileMeta::fileName).forEach(files::remove);</span><br><span class="line">        assertThat(files).isEqualTo(Collections.emptySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">writeBatch</span><span class="params">(<span class="keyword">int</span> perBatch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 随机生成一批数据</span></span><br><span class="line">        List&lt;TestRecord&gt; records = generateRandom(perBatch);</span><br><span class="line">        writeAll(records);</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">generateRandom</span><span class="params">(<span class="keyword">int</span> perBatch)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        List&lt;TestRecord&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;(perBatch);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; perBatch; i++) &#123;</span><br><span class="line">            records.add(</span><br><span class="line">                    <span class="keyword">new</span> TestRecord(</span><br><span class="line">                            random.nextBoolean() ? ValueKind.ADD : ValueKind.DELETE,</span><br><span class="line">                            random.nextInt(perBatch / <span class="number">2</span>),</span><br><span class="line">                            random.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 MergeTree.write() 写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeAll</span><span class="params">(List&lt;TestRecord&gt; records)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (TestRecord record : records) &#123;</span><br><span class="line">            <span class="comment">// 通过 MergeTreeWriter 逐个写入</span></span><br><span class="line">            writer.write(record.kind, row(record.k), row(record.v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据，验证写入是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertRecords</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;TestRecord&gt; expected, List&lt;SstFileMeta&gt; files, <span class="keyword">boolean</span> dropDelete)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertThat(readAll(files, dropDelete)).isEqualTo(compactAndSort(expected, dropDelete));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取 List&lt;SstFileMeta&gt; files ，转换成 List&lt;TestRecord&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TestRecord&gt; <span class="title">readAll</span><span class="params">(List&lt;SstFileMeta&gt; files, <span class="keyword">boolean</span> dropDelete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        RecordReader reader =</span><br><span class="line">                <span class="keyword">new</span> MergeTreeReader(</span><br><span class="line">                        <span class="keyword">new</span> IntervalPartition(files, comparator).partition(),</span><br><span class="line">                        dropDelete,</span><br><span class="line">                        sstFileReader,</span><br><span class="line">                        comparator,</span><br><span class="line">                        <span class="keyword">new</span> DeduplicateAccumulator());</span><br><span class="line"></span><br><span class="line">        List&lt;TestRecord&gt; records = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (RecordReaderIterator iterator = <span class="keyword">new</span> RecordReaderIterator(reader)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                KeyValue kv = iterator.next();</span><br><span class="line">                records.add(</span><br><span class="line">                        <span class="keyword">new</span> TestRecord(kv.valueKind(), kv.key().getInt(<span class="number">0</span>), kv.value().getInt(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ValueKind kind;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">TestRecord</span><span class="params">(ValueKind kind, <span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kind = kind;</span><br><span class="line">            <span class="keyword">this</span>.k = k;</span><br><span class="line">            <span class="keyword">this</span>.v = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TestRecord that = (TestRecord) o;</span><br><span class="line">            <span class="keyword">return</span> k == that.k &amp;&amp; v == that.v &amp;&amp; kind == that.kind;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"TestRecord&#123;"</span> + <span class="string">"kind="</span> + kind + <span class="string">", k="</span> + k + <span class="string">", v="</span> + v + <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例产生200条一批数据，到 sequenceNumber = 186 时，写 memTable 失败执行第一次 flush ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 0, ValueKind -&gt; ADD, key -&gt; +I(79), value -&gt; +I(-1282339797)</span><br><span class="line">sequenceNumber -&gt; 1, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(1179918470)</span><br><span class="line">sequenceNumber -&gt; 2, ValueKind -&gt; DELETE, key -&gt; +I(27), value -&gt; +I(-1398930820)</span><br><span class="line">sequenceNumber -&gt; 3, ValueKind -&gt; DELETE, key -&gt; +I(48), value -&gt; +I(-1816730153)</span><br><span class="line">sequenceNumber -&gt; 4, ValueKind -&gt; DELETE, key -&gt; +I(46), value -&gt; +I(-2008842454)</span><br><span class="line">sequenceNumber -&gt; 5, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(65480438)</span><br><span class="line">sequenceNumber -&gt; 6, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(791928228)</span><br><span class="line">sequenceNumber -&gt; 7, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(2011579993)</span><br><span class="line">sequenceNumber -&gt; 8, ValueKind -&gt; ADD, key -&gt; +I(31), value -&gt; +I(-2035056816)</span><br><span class="line">sequenceNumber -&gt; 9, ValueKind -&gt; ADD, key -&gt; +I(16), value -&gt; +I(607711095)</span><br><span class="line">sequenceNumber -&gt; 10, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1623789565)</span><br><span class="line">sequenceNumber -&gt; 11, ValueKind -&gt; ADD, key -&gt; +I(8), value -&gt; +I(-432617120)</span><br><span class="line">sequenceNumber -&gt; 12, ValueKind -&gt; ADD, key -&gt; +I(4), value -&gt; +I(418530737)</span><br><span class="line">sequenceNumber -&gt; 13, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(-945438846)</span><br><span class="line">sequenceNumber -&gt; 14, ValueKind -&gt; DELETE, key -&gt; +I(45), value -&gt; +I(1561651582)</span><br><span class="line">sequenceNumber -&gt; 15, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(-1087187082)</span><br><span class="line">sequenceNumber -&gt; 16, ValueKind -&gt; ADD, key -&gt; +I(95), value -&gt; +I(2007713649)</span><br><span class="line">sequenceNumber -&gt; 17, ValueKind -&gt; DELETE, key -&gt; +I(51), value -&gt; +I(-963275986)</span><br><span class="line">sequenceNumber -&gt; 18, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(1588442994)</span><br><span class="line">sequenceNumber -&gt; 19, ValueKind -&gt; ADD, key -&gt; +I(12), value -&gt; +I(-281565984)</span><br><span class="line">sequenceNumber -&gt; 20, ValueKind -&gt; ADD, key -&gt; +I(99), value -&gt; +I(303373668)</span><br><span class="line">sequenceNumber -&gt; 21, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-667201927)</span><br><span class="line">sequenceNumber -&gt; 22, ValueKind -&gt; ADD, key -&gt; +I(54), value -&gt; +I(-13136015)</span><br><span class="line">sequenceNumber -&gt; 23, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(977320072)</span><br><span class="line">sequenceNumber -&gt; 24, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(-111372055)</span><br><span class="line">sequenceNumber -&gt; 25, ValueKind -&gt; DELETE, key -&gt; +I(98), value -&gt; +I(-1109725994)</span><br><span class="line">sequenceNumber -&gt; 26, ValueKind -&gt; ADD, key -&gt; +I(46), value -&gt; +I(-1950499520)</span><br><span class="line">sequenceNumber -&gt; 27, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(-1088651475)</span><br><span class="line">sequenceNumber -&gt; 28, ValueKind -&gt; DELETE, key -&gt; +I(54), value -&gt; +I(557220361)</span><br><span class="line">sequenceNumber -&gt; 29, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1736811783)</span><br><span class="line">sequenceNumber -&gt; 30, ValueKind -&gt; DELETE, key -&gt; +I(73), value -&gt; +I(1575145486)</span><br><span class="line">sequenceNumber -&gt; 31, ValueKind -&gt; DELETE, key -&gt; +I(27), value -&gt; +I(-1649396023)</span><br><span class="line">sequenceNumber -&gt; 32, ValueKind -&gt; DELETE, key -&gt; +I(40), value -&gt; +I(-597968181)</span><br><span class="line">sequenceNumber -&gt; 33, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(1162929887)</span><br><span class="line">sequenceNumber -&gt; 34, ValueKind -&gt; ADD, key -&gt; +I(70), value -&gt; +I(-991165706)</span><br><span class="line">sequenceNumber -&gt; 35, ValueKind -&gt; DELETE, key -&gt; +I(81), value -&gt; +I(417316419)</span><br><span class="line">sequenceNumber -&gt; 36, ValueKind -&gt; DELETE, key -&gt; +I(37), value -&gt; +I(1764148187)</span><br><span class="line">sequenceNumber -&gt; 37, ValueKind -&gt; ADD, key -&gt; +I(34), value -&gt; +I(-1127910879)</span><br><span class="line">sequenceNumber -&gt; 38, ValueKind -&gt; ADD, key -&gt; +I(77), value -&gt; +I(-520815433)</span><br><span class="line">sequenceNumber -&gt; 39, ValueKind -&gt; ADD, key -&gt; +I(18), value -&gt; +I(2051544406)</span><br><span class="line">sequenceNumber -&gt; 40, ValueKind -&gt; ADD, key -&gt; +I(21), value -&gt; +I(-107422117)</span><br><span class="line">sequenceNumber -&gt; 41, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(1788072570)</span><br><span class="line">sequenceNumber -&gt; 42, ValueKind -&gt; ADD, key -&gt; +I(67), value -&gt; +I(-1262468430)</span><br><span class="line">sequenceNumber -&gt; 43, ValueKind -&gt; DELETE, key -&gt; +I(9), value -&gt; +I(-863921982)</span><br><span class="line">sequenceNumber -&gt; 44, ValueKind -&gt; ADD, key -&gt; +I(77), value -&gt; +I(-268941560)</span><br><span class="line">sequenceNumber -&gt; 45, ValueKind -&gt; DELETE, key -&gt; +I(39), value -&gt; +I(705039510)</span><br><span class="line">sequenceNumber -&gt; 46, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(858389285)</span><br><span class="line">sequenceNumber -&gt; 47, ValueKind -&gt; DELETE, key -&gt; +I(22), value -&gt; +I(475088561)</span><br><span class="line">sequenceNumber -&gt; 48, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(390088338)</span><br><span class="line">sequenceNumber -&gt; 49, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(-1991355107)</span><br><span class="line">sequenceNumber -&gt; 50, ValueKind -&gt; DELETE, key -&gt; +I(21), value -&gt; +I(-1391469913)</span><br><span class="line">sequenceNumber -&gt; 51, ValueKind -&gt; ADD, key -&gt; +I(27), value -&gt; +I(-1840343188)</span><br><span class="line">sequenceNumber -&gt; 52, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(838800181)</span><br><span class="line">sequenceNumber -&gt; 53, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(-1455750144)</span><br><span class="line">sequenceNumber -&gt; 54, ValueKind -&gt; DELETE, key -&gt; +I(44), value -&gt; +I(1590319332)</span><br><span class="line">sequenceNumber -&gt; 55, ValueKind -&gt; ADD, key -&gt; +I(12), value -&gt; +I(558741055)</span><br><span class="line">sequenceNumber -&gt; 56, ValueKind -&gt; DELETE, key -&gt; +I(17), value -&gt; +I(339525532)</span><br><span class="line">sequenceNumber -&gt; 57, ValueKind -&gt; ADD, key -&gt; +I(8), value -&gt; +I(485877251)</span><br><span class="line">sequenceNumber -&gt; 58, ValueKind -&gt; DELETE, key -&gt; +I(65), value -&gt; +I(-1470592871)</span><br><span class="line">sequenceNumber -&gt; 59, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(1251223210)</span><br><span class="line">sequenceNumber -&gt; 60, ValueKind -&gt; DELETE, key -&gt; +I(84), value -&gt; +I(-1696484617)</span><br><span class="line">sequenceNumber -&gt; 61, ValueKind -&gt; DELETE, key -&gt; +I(10), value -&gt; +I(-1501259636)</span><br><span class="line">sequenceNumber -&gt; 62, ValueKind -&gt; ADD, key -&gt; +I(41), value -&gt; +I(-866046253)</span><br><span class="line">sequenceNumber -&gt; 63, ValueKind -&gt; DELETE, key -&gt; +I(69), value -&gt; +I(868229578)</span><br><span class="line">sequenceNumber -&gt; 64, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(-1375050149)</span><br><span class="line">sequenceNumber -&gt; 65, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(1250941867)</span><br><span class="line">sequenceNumber -&gt; 66, ValueKind -&gt; ADD, key -&gt; +I(67), value -&gt; +I(-1754729116)</span><br><span class="line">sequenceNumber -&gt; 67, ValueKind -&gt; DELETE, key -&gt; +I(90), value -&gt; +I(-476497914)</span><br><span class="line">sequenceNumber -&gt; 68, ValueKind -&gt; DELETE, key -&gt; +I(75), value -&gt; +I(1225352026)</span><br><span class="line">sequenceNumber -&gt; 69, ValueKind -&gt; DELETE, key -&gt; +I(57), value -&gt; +I(-1630271894)</span><br><span class="line">sequenceNumber -&gt; 70, ValueKind -&gt; ADD, key -&gt; +I(54), value -&gt; +I(-1789471578)</span><br><span class="line">sequenceNumber -&gt; 71, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(1727726334)</span><br><span class="line">sequenceNumber -&gt; 72, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(1942470627)</span><br><span class="line">sequenceNumber -&gt; 73, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(1019545942)</span><br><span class="line">sequenceNumber -&gt; 74, ValueKind -&gt; DELETE, key -&gt; +I(11), value -&gt; +I(651497588)</span><br><span class="line">sequenceNumber -&gt; 75, ValueKind -&gt; ADD, key -&gt; +I(66), value -&gt; +I(502330288)</span><br><span class="line">sequenceNumber -&gt; 76, ValueKind -&gt; ADD, key -&gt; +I(28), value -&gt; +I(-1694526628)</span><br><span class="line">sequenceNumber -&gt; 77, ValueKind -&gt; ADD, key -&gt; +I(5), value -&gt; +I(597994318)</span><br><span class="line">sequenceNumber -&gt; 78, ValueKind -&gt; ADD, key -&gt; +I(61), value -&gt; +I(-577870746)</span><br><span class="line">sequenceNumber -&gt; 79, ValueKind -&gt; DELETE, key -&gt; +I(18), value -&gt; +I(-819164947)</span><br><span class="line">sequenceNumber -&gt; 80, ValueKind -&gt; ADD, key -&gt; +I(27), value -&gt; +I(-1330437890)</span><br><span class="line">sequenceNumber -&gt; 81, ValueKind -&gt; ADD, key -&gt; +I(52), value -&gt; +I(2093608076)</span><br><span class="line">sequenceNumber -&gt; 82, ValueKind -&gt; DELETE, key -&gt; +I(69), value -&gt; +I(-1527497908)</span><br><span class="line">sequenceNumber -&gt; 83, ValueKind -&gt; DELETE, key -&gt; +I(38), value -&gt; +I(-176326148)</span><br><span class="line">sequenceNumber -&gt; 84, ValueKind -&gt; DELETE, key -&gt; +I(66), value -&gt; +I(-1719225487)</span><br><span class="line">sequenceNumber -&gt; 85, ValueKind -&gt; DELETE, key -&gt; +I(73), value -&gt; +I(2019867633)</span><br><span class="line">sequenceNumber -&gt; 86, ValueKind -&gt; ADD, key -&gt; +I(56), value -&gt; +I(-530313746)</span><br><span class="line">sequenceNumber -&gt; 87, ValueKind -&gt; ADD, key -&gt; +I(91), value -&gt; +I(740139405)</span><br><span class="line">sequenceNumber -&gt; 88, ValueKind -&gt; ADD, key -&gt; +I(75), value -&gt; +I(1199728040)</span><br><span class="line">sequenceNumber -&gt; 89, ValueKind -&gt; DELETE, key -&gt; +I(76), value -&gt; +I(-622761322)</span><br><span class="line">sequenceNumber -&gt; 90, ValueKind -&gt; ADD, key -&gt; +I(60), value -&gt; +I(1718043906)</span><br><span class="line">sequenceNumber -&gt; 91, ValueKind -&gt; ADD, key -&gt; +I(50), value -&gt; +I(-1682393888)</span><br><span class="line">sequenceNumber -&gt; 92, ValueKind -&gt; ADD, key -&gt; +I(58), value -&gt; +I(1551652094)</span><br><span class="line">sequenceNumber -&gt; 93, ValueKind -&gt; DELETE, key -&gt; +I(91), value -&gt; +I(-1049392752)</span><br><span class="line">sequenceNumber -&gt; 94, ValueKind -&gt; ADD, key -&gt; +I(11), value -&gt; +I(246037102)</span><br><span class="line">sequenceNumber -&gt; 95, ValueKind -&gt; DELETE, key -&gt; +I(60), value -&gt; +I(-816180426)</span><br><span class="line">sequenceNumber -&gt; 96, ValueKind -&gt; DELETE, key -&gt; +I(83), value -&gt; +I(-1623000942)</span><br><span class="line">sequenceNumber -&gt; 97, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(964697602)        // 排序集合中的第 1 条数据</span><br><span class="line">sequenceNumber -&gt; 98, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(-194759233)</span><br><span class="line">sequenceNumber -&gt; 99, ValueKind -&gt; DELETE, key -&gt; +I(56), value -&gt; +I(-1374078600)</span><br><span class="line">sequenceNumber -&gt; 100, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(198351328)</span><br><span class="line">sequenceNumber -&gt; 101, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-1998891159)</span><br><span class="line">sequenceNumber -&gt; 102, ValueKind -&gt; ADD, key -&gt; +I(64), value -&gt; +I(75726825)</span><br><span class="line">sequenceNumber -&gt; 103, ValueKind -&gt; DELETE, key -&gt; +I(86), value -&gt; +I(1354212903)</span><br><span class="line">sequenceNumber -&gt; 104, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-508548447)</span><br><span class="line">sequenceNumber -&gt; 105, ValueKind -&gt; ADD, key -&gt; +I(78), value -&gt; +I(-1504299996)</span><br><span class="line">sequenceNumber -&gt; 106, ValueKind -&gt; ADD, key -&gt; +I(36), value -&gt; +I(1967516225)</span><br><span class="line">sequenceNumber -&gt; 107, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(-1448527484)</span><br><span class="line">sequenceNumber -&gt; 108, ValueKind -&gt; DELETE, key -&gt; +I(80), value -&gt; +I(422507492)</span><br><span class="line">sequenceNumber -&gt; 109, ValueKind -&gt; DELETE, key -&gt; +I(70), value -&gt; +I(19710019)</span><br><span class="line">sequenceNumber -&gt; 110, ValueKind -&gt; DELETE, key -&gt; +I(30), value -&gt; +I(1060594873)</span><br><span class="line">sequenceNumber -&gt; 111, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(645029376)</span><br><span class="line">sequenceNumber -&gt; 112, ValueKind -&gt; ADD, key -&gt; +I(44), value -&gt; +I(-500311443)</span><br><span class="line">sequenceNumber -&gt; 113, ValueKind -&gt; DELETE, key -&gt; +I(96), value -&gt; +I(-1664755054)</span><br><span class="line">sequenceNumber -&gt; 114, ValueKind -&gt; ADD, key -&gt; +I(86), value -&gt; +I(488472411)</span><br><span class="line">sequenceNumber -&gt; 115, ValueKind -&gt; DELETE, key -&gt; +I(42), value -&gt; +I(-1960475417)</span><br><span class="line">sequenceNumber -&gt; 116, ValueKind -&gt; DELETE, key -&gt; +I(71), value -&gt; +I(-1040436146)</span><br><span class="line">sequenceNumber -&gt; 117, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-350114843)</span><br><span class="line">sequenceNumber -&gt; 118, ValueKind -&gt; ADD, key -&gt; +I(31), value -&gt; +I(1415574280)</span><br><span class="line">sequenceNumber -&gt; 119, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(-799816888)</span><br><span class="line">sequenceNumber -&gt; 120, ValueKind -&gt; DELETE, key -&gt; +I(64), value -&gt; +I(332753861)</span><br><span class="line">sequenceNumber -&gt; 121, ValueKind -&gt; DELETE, key -&gt; +I(8), value -&gt; +I(361512102)</span><br><span class="line">sequenceNumber -&gt; 122, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(155422065)</span><br><span class="line">sequenceNumber -&gt; 123, ValueKind -&gt; DELETE, key -&gt; +I(80), value -&gt; +I(289053479)</span><br><span class="line">sequenceNumber -&gt; 124, ValueKind -&gt; ADD, key -&gt; +I(92), value -&gt; +I(-721556651)</span><br><span class="line">sequenceNumber -&gt; 125, ValueKind -&gt; DELETE, key -&gt; +I(35), value -&gt; +I(1458427036)</span><br><span class="line">sequenceNumber -&gt; 126, ValueKind -&gt; ADD, key -&gt; +I(86), value -&gt; +I(-49406890)</span><br><span class="line">sequenceNumber -&gt; 127, ValueKind -&gt; DELETE, key -&gt; +I(93), value -&gt; +I(-140821273)</span><br><span class="line">sequenceNumber -&gt; 128, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-62714072)</span><br><span class="line">sequenceNumber -&gt; 129, ValueKind -&gt; DELETE, key -&gt; +I(25), value -&gt; +I(664998142)</span><br><span class="line">sequenceNumber -&gt; 130, ValueKind -&gt; DELETE, key -&gt; +I(36), value -&gt; +I(-1222167553)</span><br><span class="line">sequenceNumber -&gt; 131, ValueKind -&gt; DELETE, key -&gt; +I(59), value -&gt; +I(884329714)</span><br><span class="line">sequenceNumber -&gt; 132, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(431167396)</span><br><span class="line">sequenceNumber -&gt; 133, ValueKind -&gt; DELETE, key -&gt; +I(82), value -&gt; +I(-1503470408)</span><br><span class="line">sequenceNumber -&gt; 134, ValueKind -&gt; ADD, key -&gt; +I(71), value -&gt; +I(-1866273544)</span><br><span class="line">sequenceNumber -&gt; 135, ValueKind -&gt; ADD, key -&gt; +I(36), value -&gt; +I(-1348634198)</span><br><span class="line">sequenceNumber -&gt; 136, ValueKind -&gt; DELETE, key -&gt; +I(95), value -&gt; +I(-1877911221)</span><br><span class="line">sequenceNumber -&gt; 137, ValueKind -&gt; DELETE, key -&gt; +I(68), value -&gt; +I(1990244092)</span><br><span class="line">sequenceNumber -&gt; 138, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(1272509713)</span><br><span class="line">sequenceNumber -&gt; 139, ValueKind -&gt; ADD, key -&gt; +I(63), value -&gt; +I(549481877)</span><br><span class="line">sequenceNumber -&gt; 140, ValueKind -&gt; DELETE, key -&gt; +I(30), value -&gt; +I(-1827265063)</span><br><span class="line">sequenceNumber -&gt; 141, ValueKind -&gt; ADD, key -&gt; +I(17), value -&gt; +I(961410061)</span><br><span class="line">sequenceNumber -&gt; 142, ValueKind -&gt; ADD, key -&gt; +I(42), value -&gt; +I(-1923379307)</span><br><span class="line">sequenceNumber -&gt; 143, ValueKind -&gt; DELETE, key -&gt; +I(66), value -&gt; +I(-447682108)</span><br><span class="line">sequenceNumber -&gt; 144, ValueKind -&gt; DELETE, key -&gt; +I(88), value -&gt; +I(-583980392)</span><br><span class="line">sequenceNumber -&gt; 145, ValueKind -&gt; DELETE, key -&gt; +I(1), value -&gt; +I(2065491016)  </span><br><span class="line">sequenceNumber -&gt; 146, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(521101514)        // 排序集合中的第 2 条数据 </span><br><span class="line">sequenceNumber -&gt; 147, ValueKind -&gt; ADD, key -&gt; +I(30), value -&gt; +I(1132139652)</span><br><span class="line">sequenceNumber -&gt; 148, ValueKind -&gt; ADD, key -&gt; +I(72), value -&gt; +I(713572359)</span><br><span class="line">sequenceNumber -&gt; 149, ValueKind -&gt; DELETE, key -&gt; +I(5), value -&gt; +I(162860404)</span><br><span class="line">sequenceNumber -&gt; 150, ValueKind -&gt; DELETE, key -&gt; +I(36), value -&gt; +I(-2108809046)</span><br><span class="line">sequenceNumber -&gt; 151, ValueKind -&gt; DELETE, key -&gt; +I(3), value -&gt; +I(104679497)</span><br><span class="line">sequenceNumber -&gt; 152, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(1452009131)</span><br><span class="line">sequenceNumber -&gt; 153, ValueKind -&gt; ADD, key -&gt; +I(81), value -&gt; +I(-639638965)</span><br><span class="line">sequenceNumber -&gt; 154, ValueKind -&gt; DELETE, key -&gt; +I(62), value -&gt; +I(1906544864)</span><br><span class="line">sequenceNumber -&gt; 155, ValueKind -&gt; ADD, key -&gt; +I(33), value -&gt; +I(-175182120)</span><br><span class="line">sequenceNumber -&gt; 156, ValueKind -&gt; DELETE, key -&gt; +I(89), value -&gt; +I(452324661)</span><br><span class="line">sequenceNumber -&gt; 157, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(836346953)</span><br><span class="line">sequenceNumber -&gt; 158, ValueKind -&gt; ADD, key -&gt; +I(99), value -&gt; +I(651514373)</span><br><span class="line">sequenceNumber -&gt; 159, ValueKind -&gt; DELETE, key -&gt; +I(71), value -&gt; +I(-108776269)</span><br><span class="line">sequenceNumber -&gt; 160, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(-73532459)</span><br><span class="line">sequenceNumber -&gt; 161, ValueKind -&gt; ADD, key -&gt; +I(14), value -&gt; +I(2128763828)</span><br><span class="line">sequenceNumber -&gt; 162, ValueKind -&gt; DELETE, key -&gt; +I(67), value -&gt; +I(-456952804)</span><br><span class="line">sequenceNumber -&gt; 163, ValueKind -&gt; ADD, key -&gt; +I(43), value -&gt; +I(-1249173302)</span><br><span class="line">sequenceNumber -&gt; 164, ValueKind -&gt; DELETE, key -&gt; +I(42), value -&gt; +I(-1216151330)</span><br><span class="line">sequenceNumber -&gt; 165, ValueKind -&gt; DELETE, key -&gt; +I(84), value -&gt; +I(-500755987)</span><br><span class="line">sequenceNumber -&gt; 166, ValueKind -&gt; DELETE, key -&gt; +I(10), value -&gt; +I(-1947673013)</span><br><span class="line">sequenceNumber -&gt; 167, ValueKind -&gt; DELETE, key -&gt; +I(95), value -&gt; +I(-1342645152)</span><br><span class="line">sequenceNumber -&gt; 168, ValueKind -&gt; ADD, key -&gt; +I(85), value -&gt; +I(1979169435)</span><br><span class="line">sequenceNumber -&gt; 169, ValueKind -&gt; ADD, key -&gt; +I(80), value -&gt; +I(157530613)</span><br><span class="line">sequenceNumber -&gt; 170, ValueKind -&gt; DELETE, key -&gt; +I(50), value -&gt; +I(743959004)</span><br><span class="line">sequenceNumber -&gt; 171, ValueKind -&gt; ADD, key -&gt; +I(35), value -&gt; +I(170145595)</span><br><span class="line">sequenceNumber -&gt; 172, ValueKind -&gt; ADD, key -&gt; +I(2), value -&gt; +I(-464790927)</span><br><span class="line">sequenceNumber -&gt; 173, ValueKind -&gt; ADD, key -&gt; +I(15), value -&gt; +I(-1317899453)</span><br><span class="line">sequenceNumber -&gt; 174, ValueKind -&gt; ADD, key -&gt; +I(74), value -&gt; +I(1008782452)</span><br><span class="line">sequenceNumber -&gt; 175, ValueKind -&gt; ADD, key -&gt; +I(51), value -&gt; +I(-763579376)</span><br><span class="line">sequenceNumber -&gt; 176, ValueKind -&gt; DELETE, key -&gt; +I(0), value -&gt; +I(500333878)    // 排序集合中的第 3 条数据 </span><br><span class="line">sequenceNumber -&gt; 177, ValueKind -&gt; ADD, key -&gt; +I(48), value -&gt; +I(1184699077)</span><br><span class="line">sequenceNumber -&gt; 178, ValueKind -&gt; DELETE, key -&gt; +I(67), value -&gt; +I(-1805865582)</span><br><span class="line">sequenceNumber -&gt; 179, ValueKind -&gt; DELETE, key -&gt; +I(60), value -&gt; +I(-861165267)</span><br><span class="line">sequenceNumber -&gt; 180, ValueKind -&gt; ADD, key -&gt; +I(10), value -&gt; +I(-888539951)</span><br><span class="line">sequenceNumber -&gt; 181, ValueKind -&gt; ADD, key -&gt; +I(62), value -&gt; +I(1848778293)</span><br><span class="line">sequenceNumber -&gt; 182, ValueKind -&gt; ADD, key -&gt; +I(48), value -&gt; +I(-1260289205)</span><br><span class="line">sequenceNumber -&gt; 183, ValueKind -&gt; DELETE, key -&gt; +I(28), value -&gt; +I(1880572265)</span><br><span class="line">sequenceNumber -&gt; 184, ValueKind -&gt; DELETE, key -&gt; +I(52), value -&gt; +I(-1507320045)</span><br><span class="line">sequenceNumber -&gt; 185, ValueKind -&gt; DELETE, key -&gt; +I(19), value -&gt; +I(14067102)</span><br><span class="line">sequenceNumber -&gt; 186, ValueKind -&gt; DELETE, key -&gt; +I(77), value -&gt; +I(1177031237)</span><br></pre></td></tr></table></figure><p>经过 <code>QuickSort.sort(buffer)</code> 排序如下，按照 sequenceNumber, key 排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sequenceNumber -&gt; 97, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(964697602)        </span><br><span class="line">sequenceNumber -&gt; 146, ValueKind -&gt; ADD, key -&gt; +I(0), value -&gt; +I(521101514)        </span><br><span class="line">sequenceNumber -&gt; 176, ValueKind -&gt; DELETE, key -&gt; +I(0), value -&gt; +I(500333878)   // memTable.iterator().next() 返回的第 1 条数据</span><br><span class="line">sequenceNumber -&gt; 145, ValueKind -&gt; DELETE, key -&gt; +I(1), value -&gt; +I(2065491016)  // memTable.iterator().next() 返回的第 2 条数据</span><br><span class="line">sequenceNumber -&gt; 172, ValueKind -&gt; ADD, key -&gt; +I(2), value -&gt; +I(-464790927)     // memTable.iterator().next() 返回的第 3 条数据</span><br><span class="line">sequenceNumber -&gt; 151, ValueKind -&gt; DELETE, key -&gt; +I(3), value -&gt; +I(104679497)   // memTable.iterator().next() 返回的第 4 条数据</span><br><span class="line">sequenceNumber -&gt; 12, ValueKind -&gt; ADD, key -&gt; +I(4), value -&gt; +I(418530737)       // memTable.iterator().next() 返回的第 5 条数据 </span><br><span class="line">sequenceNumber -&gt; 77, ValueKind -&gt; ADD, key -&gt; +I(5), value -&gt; +I(597994318)</span><br><span class="line">sequenceNumber -&gt; 149, ValueKind -&gt; DELETE, key -&gt; +I(5), value -&gt; +I(162860404)   // memTable.iterator().next() 返回的第 6 条数据</span><br><span class="line">sequenceNumber -&gt; 10, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1623789565)</span><br><span class="line">sequenceNumber -&gt; 18, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(1588442994)</span><br><span class="line">sequenceNumber -&gt; 29, ValueKind -&gt; ADD, key -&gt; +I(6), value -&gt; +I(-1736811783)</span><br><span class="line">sequenceNumber -&gt; 49, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(-1991355107)</span><br><span class="line">sequenceNumber -&gt; 72, ValueKind -&gt; DELETE, key -&gt; +I(6), value -&gt; +I(1942470627)   // memTable.iterator().next() 返回的第 7 条数据</span><br><span class="line">sequenceNumber -&gt; 46, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(858389285)</span><br><span class="line">sequenceNumber -&gt; 122, ValueKind -&gt; ADD, key -&gt; +I(7), value -&gt; +I(155422065)      // memTable.iterator().next() 返回的第 8 条数据</span><br><span class="line"></span><br><span class="line">... 后面就不一一列举了</span><br></pre></td></tr></table></figure><p><code>MergeTreeWriter.flush()</code> 操作是从 <code>memTable.iterator()</code> 迭代读取数据，通过 <code>SstFileWriter.write()</code> 写入 bucket-0/sst-* 文件 。</p><h2 id="关键实现"><a href="#关键实现" class="headerlink" title="关键实现"></a>关键实现</h2><h3 id="MergeTreeWriter-1"><a href="#MergeTreeWriter-1" class="headerlink" title="MergeTreeWriter"></a>MergeTreeWriter</h3><figure class="highlight java"><figcaption><span>MergeTreeWriter.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/MergeTreeWriter.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A &#123;<span class="doctag">@link</span> RecordWriter&#125; to write records and generate &#123;<span class="doctag">@link</span> Increment&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTreeWriter</span> <span class="keyword">implements</span> <span class="title">RecordWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存 table</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemTable memTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步 compact 线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CompactManager compactManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Levels levels;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key 值比较器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于 key 值去重的工具类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Accumulator accumulator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SstFileWriter sstFileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> commitForceCompact;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashSet&lt;SstFileMeta&gt; newFiles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;String, SstFileMeta&gt; compactBefore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashSet&lt;SstFileMeta&gt; compactAfter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> newSequenceNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">newSequenceNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newSequenceNumber++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">Levels <span class="title">levels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> levels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MergeWriter 接收并写入数据</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ValueKind valueKind, RowData key, RowData value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先生成一个序列号</span></span><br><span class="line">        <span class="keyword">long</span> sequenceNumber = newSequenceNumber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写入 memTable 中</span></span><br><span class="line">        <span class="keyword">boolean</span> success = memTable.put(sequenceNumber, valueKind, key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当 memTable.nextMemorySegment 获取失败，即写 memTable 失败，需要执行刷盘</span></span><br><span class="line">            flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重试一次，接着上一次失败的 sequenceNumber ，继续写入 memTable 中</span></span><br><span class="line">            success = memTable.put(sequenceNumber, valueKind, key, value);</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Mem table is too small to hold a single element."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 memTable 中读取数据，刷写到 SstFile </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memTable.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            finishCompaction();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 memTable 中迭代读取数据 ，在此过程中，对于相同的 key ，最大 sequenceNumber 的 key 将会覆盖小 sequenceNumber</span></span><br><span class="line">            Iterator&lt;KeyValue&gt; iterator = memTable.iterator(keyComparator, accumulator);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将数据写入 sst file ，level 设置为0</span></span><br><span class="line">            List&lt;SstFileMeta&gt; files =</span><br><span class="line">                    sstFileWriter.write(CloseableIterator.adapterForIterator(iterator), <span class="number">0</span>);</span><br><span class="line">            newFiles.addAll(files);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将生成的 sst file 加入到 Level0 中</span></span><br><span class="line">            files.forEach(levels::addLevel0File);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空 memTable</span></span><br><span class="line">            memTable.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步执行 LSM compactions ，丢入线程池</span></span><br><span class="line">            submitCompaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishCompaction</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 需要结束掉上一次 compaction</span></span><br><span class="line">        Optional&lt;CompactManager.CompactResult&gt; result = compactManager.finishCompaction(levels); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// compact 前后的 LinkedHashSet&lt;SstFileMeta&gt; 存储在 MergeTreeWriter 中</span></span><br><span class="line">        result.ifPresent(<span class="keyword">this</span>::updateCompactResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitCompaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        compactManager.submitCompaction(levels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交准备，返回 Increment </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Increment <span class="title">prepareCommit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷写 memTable</span></span><br><span class="line">        flush();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (commitForceCompact) &#123;</span><br><span class="line">            finishCompaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取构建出增量 files ，并清空 newFiles 、compactBefore 、compactAfter</span></span><br><span class="line">        <span class="keyword">return</span> drainIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Increment <span class="title">drainIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Increment increment =</span><br><span class="line">                <span class="keyword">new</span> Increment(</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(newFiles),</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(compactBefore.values()),</span><br><span class="line">                        <span class="keyword">new</span> ArrayList&lt;&gt;(compactAfter));</span><br><span class="line">        newFiles.clear();</span><br><span class="line">        compactBefore.clear();</span><br><span class="line">        compactAfter.clear();</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步操作，结束掉 compaction</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        finishCompaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SortBufferMemTable"><a href="#SortBufferMemTable" class="headerlink" title="SortBufferMemTable"></a>SortBufferMemTable</h3><figure class="highlight java"><figcaption><span>SortBufferMemTable.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/SortBufferMemTable.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A &#123;<span class="doctag">@link</span> MemTable&#125; which stores records in &#123;<span class="doctag">@link</span> BinaryInMemorySortBuffer&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortBufferMemTable</span> <span class="keyword">implements</span> <span class="title">MemTable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RowType keyType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RowType valueType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KeyValueSerializer serializer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存 buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BinaryInMemorySortBuffer buffer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(<span class="keyword">long</span> sequenceNumber, ValueKind valueKind, RowData key, RowData value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.write(serializer.toRow(key, sequenceNumber, valueKind, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;KeyValue&gt; <span class="title">iterator</span><span class="params">(Comparator&lt;RowData&gt; keyComparator, Accumulator accumulator)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 排序之后，memTable 中的数据条数不变</span></span><br><span class="line">        <span class="keyword">new</span> QuickSort().sort(buffer); </span><br><span class="line">        MutableObjectIterator&lt;BinaryRowData&gt; kvIter = buffer.getIterator();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MemTableIterator(kvIter, keyComparator, accumulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * memTable iterator 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MemTableIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">KeyValue</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MutableObjectIterator&lt;BinaryRowData&gt; kvIter;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Accumulator accumulator;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// holds the accumulated value</span></span><br><span class="line">        <span class="keyword">private</span> KeyValueSerializer previous;</span><br><span class="line">        <span class="keyword">private</span> BinaryRowData previousRow;</span><br><span class="line">        <span class="comment">// reads the next kv</span></span><br><span class="line">        <span class="keyword">private</span> KeyValueSerializer current;</span><br><span class="line">        <span class="keyword">private</span> BinaryRowData currentRow;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * iterator 指针是否已经推进过的标识</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> advanced;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemTableIterator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                MutableObjectIterator&lt;BinaryRowData&gt; kvIter,</span></span></span><br><span class="line"><span class="function"><span class="params">                Comparator&lt;RowData&gt; keyComparator,</span></span></span><br><span class="line"><span class="function"><span class="params">                Accumulator accumulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kvIter = kvIter;</span><br><span class="line">            <span class="keyword">this</span>.keyComparator = keyComparator;</span><br><span class="line">            <span class="keyword">this</span>.accumulator = accumulator;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> totalFieldCount = keyType.getFieldCount() + <span class="number">2</span> + valueType.getFieldCount();</span><br><span class="line">            <span class="keyword">this</span>.previous = <span class="keyword">new</span> KeyValueSerializer(keyType, valueType);</span><br><span class="line">            <span class="keyword">this</span>.previousRow = <span class="keyword">new</span> BinaryRowData(totalFieldCount);</span><br><span class="line">            <span class="keyword">this</span>.current = <span class="keyword">new</span> KeyValueSerializer(keyType, valueType);</span><br><span class="line">            <span class="keyword">this</span>.currentRow = <span class="keyword">new</span> BinaryRowData(totalFieldCount);</span><br><span class="line">            readOnce();</span><br><span class="line">            <span class="keyword">this</span>.advanced = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            advanceIfNeeded();</span><br><span class="line">            <span class="keyword">return</span> previousRow != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> KeyValue <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            advanceIfNeeded();</span><br><span class="line">            <span class="keyword">if</span> (previousRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advanced = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> previous.getReusedKv();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">advanceIfNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (advanced) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advanced = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            RowData result;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换 current 与 previous 值</span></span><br><span class="line">                swapSerializers(); </span><br><span class="line">                <span class="keyword">if</span> (previousRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                accumulator.reset();</span><br><span class="line">                accumulator.add(previous.getReusedKv().value());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// readOnce() 从经过排序的 buffer 中读取数据</span></span><br><span class="line">                <span class="keyword">while</span> (readOnce()) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 比较当前行数据和 previous 行数据的key ，如果不相等，则跳出本次循环</span></span><br><span class="line">                    <span class="keyword">if</span> (keyComparator.compare(</span><br><span class="line">                                    previous.getReusedKv().key(), current.getReusedKv().key()) </span><br><span class="line">                            != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果相等，则用最新 sequenceNumber 的数据，覆盖更新到 accumulator</span></span><br><span class="line">                    accumulator.add(current.getReusedKv().value()); </span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 指针继续向前推进 </span></span><br><span class="line">                    swapSerializers(); </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回相同 key 的具有最大 sequenceNumber 数据</span></span><br><span class="line">                result = accumulator.getValue();  </span><br><span class="line">            &#125; <span class="keyword">while</span> (result == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 赋值给 previous</span></span><br><span class="line">            previous.getReusedKv().setValue(result); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readOnce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取下一行数据</span></span><br><span class="line">                currentRow = kvIter.next(currentRow);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentRow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                current.fromRow(currentRow);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> currentRow != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 交换赋值 current 与 previous</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapSerializers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            KeyValueSerializer tmp = previous;</span><br><span class="line">            BinaryRowData tmpRow = previousRow;</span><br><span class="line">            previous = current;</span><br><span class="line">            previousRow = currentRow;</span><br><span class="line">            current = tmp;</span><br><span class="line">            currentRow = tmpRow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buffer.reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CompactManager"><a href="#CompactManager" class="headerlink" title="CompactManager"></a>CompactManager</h3><figure class="highlight java"><figcaption><span>CompactManager.java</span><a href="https://github.com/apache/flink-table-store/blob/master/flink-table-store-core/src/main/java/org/apache/flink/table/store/file/mergetree/compact/CompactManager.java" target="_blank" rel="noopener">git 地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Manager to submit compaction task. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompactManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CompactStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;RowData&gt; keyComparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> minFileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rewriter rewriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Future&lt;CompactResult&gt; taskFuture;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Submit a new compaction task. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitCompaction</span><span class="params">(Levels levels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 finishCompaction 时，会将 taskFuture 置为空，以此来判断上一次 compaction 是否结束</span></span><br><span class="line">        <span class="keyword">if</span> (taskFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Please finish the previous compaction before submitting new one."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strategy.pick(levels.numberOfLevels(), levels.levelSortedRuns())</span><br><span class="line">                .ifPresent(</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//  为 CompactUnit 分配一个线程</span></span><br><span class="line">                        unit -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (unit.files().size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * As long as there is no older data, We can drop the deletion.</span></span><br><span class="line"><span class="comment">                             * If the output level is 0, there may be older data not involved in compaction.</span></span><br><span class="line"><span class="comment">                             * If the output level is bigger than 0, as long as there is no older data in</span></span><br><span class="line"><span class="comment">                             * the current levels, the output is the oldest, so we can drop the deletion.</span></span><br><span class="line"><span class="comment">                             * See CompactStrategy.pick.</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            <span class="keyword">boolean</span> dropDelete =</span><br><span class="line">                                    unit.outputLevel() != <span class="number">0</span></span><br><span class="line">                                            &amp;&amp; unit.outputLevel() &gt;= levels.nonEmptyHighestLevel();</span><br><span class="line"></span><br><span class="line">                            CompactTask task = <span class="keyword">new</span> CompactTask(unit, dropDelete);</span><br><span class="line">                            taskFuture = executor.submit(task);</span><br><span class="line">                        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Finish current task, and update result files to &#123;<span class="doctag">@link</span> Levels&#125;. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;CompactResult&gt; <span class="title">finishCompaction</span><span class="params">(Levels levels)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (taskFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 CompactTask 线程返回 Future 回调结果</span></span><br><span class="line">            CompactResult result = taskFuture.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 compact 前后的 List&lt;SstFileMeta&gt;</span></span><br><span class="line">            levels.update(result.before(), result.after());</span><br><span class="line"></span><br><span class="line">            taskFuture = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Internal classes</span></span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Compaction task. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CompactTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">CompactResult</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> outputLevel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;List&lt;SortedRun&gt;&gt; partitioned;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> dropDelete;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CompactTask</span><span class="params">(CompactUnit unit, <span class="keyword">boolean</span> dropDelete)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.outputLevel = unit.outputLevel();</span><br><span class="line">            <span class="keyword">this</span>.partitioned = <span class="keyword">new</span> IntervalPartition(unit.files(), keyComparator).partition();</span><br><span class="line">            <span class="keyword">this</span>.dropDelete = dropDelete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompactResult <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compact();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> CompactResult <span class="title">compact</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            List&lt;List&lt;SortedRun&gt;&gt; candidate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;SstFileMeta&gt; before = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;SstFileMeta&gt; after = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Checking the order and compacting adjacent and contiguous files</span></span><br><span class="line">            <span class="comment">// Note: can't skip an intermediate file to compact, this will destroy the overall</span></span><br><span class="line">            <span class="comment">// orderliness</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;SortedRun&gt; section : partitioned) &#123;</span><br><span class="line">                <span class="keyword">if</span> (section.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    candidate.add(section);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    SortedRun run = section.get(<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// No overlapping:</span></span><br><span class="line">                    <span class="comment">// We can just upgrade the large file and just change the level instead of</span></span><br><span class="line">                    <span class="comment">// rewriting it</span></span><br><span class="line">                    <span class="comment">// But for small files, we will try to compact it</span></span><br><span class="line">                    <span class="keyword">for</span> (SstFileMeta file : run.files()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (file.fileSize() &lt; minFileSize) &#123;</span><br><span class="line">                            <span class="comment">// Smaller files are rewritten along with the previous files</span></span><br><span class="line">                            candidate.add(singletonList(SortedRun.fromSingle(file)));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Large file appear, rewrite previous and upgrade it</span></span><br><span class="line">                            rewrite(candidate, before, after);</span><br><span class="line">                            upgrade(file, before, after);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rewrite(candidate, before, after);</span><br><span class="line">            <span class="keyword">return</span> result(before, after);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">(SstFileMeta file, List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (file.level() != outputLevel) &#123;</span><br><span class="line">                before.add(file);</span><br><span class="line">                after.add(file.upgrade(outputLevel));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rewrite</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;List&lt;SortedRun&gt;&gt; candidate, List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidate.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                List&lt;SortedRun&gt; section = candidate.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (section.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (SstFileMeta file : section.get(<span class="number">0</span>).files()) &#123;</span><br><span class="line">                        upgrade(file, before, after);</span><br><span class="line">                    &#125;</span><br><span class="line">                    candidate.clear();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidate.forEach(runs -&gt; runs.forEach(run -&gt; before.addAll(run.files())));</span><br><span class="line">            after.addAll(rewriter.rewrite(outputLevel, dropDelete, candidate));</span><br><span class="line">            candidate.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> CompactResult <span class="title">result</span><span class="params">(List&lt;SstFileMeta&gt; before, List&lt;SstFileMeta&gt; after)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CompactResult() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;SstFileMeta&gt; <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> before;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;SstFileMeta&gt; <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> after;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/wuxb45/lsm-trie" target="_blank" rel="noopener">lsm-trie git</a><br><a href="LSM-tire_An_LSM-tree-based_Ultra-Large_Key-Value_Store_for_Small_Data.pdf">LSM-tire_An_LSM-tree-based_Ultra-Large_Key-Value_Store_for_Small_Data.pdf</a><br><a href="Skip_Lists_A_Probabilistic_Alternative_to_Balanced_Trees.pdf">Skip_Lists_A_Probabilistic_Alternative_to_Balanced_Trees.pdf</a><br><a href="The_Log-Structured_Merge-Tree.pdf">The_Log-Structured_Merge-Tree.pdf</a><br><a href="WiscKey_Separating_Keys_from_Values_in_SSD-conscious_Storage.pdf">WiscKey_Separating_Keys_from_Values_in_SSD-conscious_Storage.pdf</a><br><a href="https://zhuanlan.zhihu.com/p/389397486" target="_blank" rel="noopener">浅析 LSM-tree</a><br><a href="https://www.bilibili.com/video/BV1mL411P72H" target="_blank" rel="noopener">Designing Data-Intensive Applications 分享视频</a><br>《精通LevelDB》 2022年1月出版</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/apache/flink-table-store/commits/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flink-table-store git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文了解下 MergeTreeWriter 的源码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-table-store" scheme="http://yoursite.com/categories/Flink/Flink-table-store/"/>
    
    
  </entry>
  
  <entry>
    <title>Presto Connectors</title>
    <link href="http://yoursite.com/2022/03/29/Presto-Connectors/"/>
    <id>http://yoursite.com/2022/03/29/Presto-Connectors/</id>
    <published>2022-03-29T11:04:20.000Z</published>
    <updated>2022-03-30T12:32:34.219Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结下 Presto Connectors 的 SPI 实现。在 Presto 中，UDF、EventListener、DataTypes、ParameterTypes、Access Control、Resource Group 以及 Connector<br>都是通过插件机制实现的。</p><a id="more"></a><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><p>Presto 将支持的所有插件类型封装在顶层接口 Plugin 中：</p><p><img src="Plugin%E7%B1%BB%E5%9B%BE.png" alt></p><p>Presto 将所有支持的插件类型，都统一封装在一个统一的接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Plugin</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Connector</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ConnectorFactory&gt; <span class="title">getConnectorFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;BlockEncoding&gt; <span class="title">getBlockEncodings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Data Types</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;Type&gt; <span class="title">getTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parameter Types</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ParametricType&gt; <span class="title">getParametricTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">default</span> Set&lt;Class&lt;?&gt;&gt; getFunctions() &#123;</span><br><span class="line">        <span class="keyword">return</span> emptySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;SystemAccessControlFactory&gt; <span class="title">getSystemAccessControlFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;PasswordAuthenticatorFactory&gt; <span class="title">getPasswordAuthenticatorFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EventListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;EventListenerFactory&gt; <span class="title">getEventListenerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;ResourceGroupConfigurationManagerFactory&gt; <span class="title">getResourceGroupConfigurationManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;SessionPropertyConfigurationManagerFactory&gt; <span class="title">getSessionPropertyConfigurationManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;FunctionNamespaceManagerFactory&gt; <span class="title">getFunctionNamespaceManagerFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;TempStorageFactory&gt; <span class="title">getTempStorageFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Iterable&lt;QueryPrerequisitesFactory&gt; <span class="title">getQueryPrerequisitesFactories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h2><p>插件加载时序图： </p><p><img src="PrestoServer_run_load_Connectors.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPlugins</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// installedPluginsDir 通过 config.properties 配置文件中的 plugin.dir 指定</span></span><br><span class="line">        <span class="keyword">for</span> (File file : listFiles(installedPluginsDir)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                loadPlugin(file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String plugin : plugins) &#123;</span><br><span class="line">            loadPlugin(plugin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逐个加载 plugin，每个插件都要独立的路径，new 一个类加载器</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(String plugin)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"-- Loading plugin %s --"</span>, plugin);</span><br><span class="line">        URLClassLoader pluginClassLoader = buildClassLoader(plugin);</span><br><span class="line">        <span class="keyword">try</span> (ThreadContextClassLoader ignored = <span class="keyword">new</span> ThreadContextClassLoader(pluginClassLoader)) &#123;</span><br><span class="line">            loadPlugin(pluginClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"-- Finished loading plugin %s --"</span>, plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SPI 机制加载实现了 Plugin 接口的类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(URLClassLoader pluginClassLoader)</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Plugin&gt; serviceLoader = ServiceLoader.load(Plugin.class, pluginClassLoader);</span><br><span class="line">        List&lt;Plugin&gt; plugins = ImmutableList.copyOf(serviceLoader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (plugins.isEmpty()) &#123;</span><br><span class="line">            log.warn(<span class="string">"No service providers of type %s"</span>, Plugin.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Plugin plugin : plugins) &#123;</span><br><span class="line">            log.info(<span class="string">"Installing %s"</span>, plugin.getClass().getName());</span><br><span class="line">            installPlugin(plugin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装置 plugin ，将 plugin 单独实现的插件们，设置到 xxxManager 中</span></span><br><span class="line"><span class="comment">     * 如 Connector 插件存放到 ConnectorManager 中，xxxManager 中都会有一个内存 Map，称之为 factories</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPlugin</span><span class="params">(Plugin plugin)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ConnectorFactory connectorFactory : plugin.getConnectorFactories()) &#123;</span><br><span class="line">            </span><br><span class="line">            log.info(<span class="string">"Registering connector %s"</span>, connectorFactory.getName());</span><br><span class="line">            connectorManager.addConnectorFactory(connectorFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (QueryPrerequisitesFactory queryPrerequisitesFactory : plugin.getQueryPrerequisitesFactories()) &#123;</span><br><span class="line">            log.info(<span class="string">"Registering query prerequisite factory %s"</span>, queryPrerequisitesFactory.getName());</span><br><span class="line">            queryPrerequisitesManager.addQueryPrerequisitesFactory(queryPrerequisitesFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 plugin 构建 URLClassLoader</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> URLClassLoader <span class="title">buildClassLoader</span><span class="params">(String plugin)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(plugin);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile() &amp;&amp; (file.getName().equals(<span class="string">"pom.xml"</span>) || file.getName().endsWith(<span class="string">".pom"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> buildClassLoaderFromPom(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> buildClassLoaderFromDirectory(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildClassLoaderFromCoordinates(plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Presto 没有走配置 META-INF/services 来实现 SPI ，而是实现了一套插件自动发现功能，自动创建了对应的目录和文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> URLClassLoader <span class="title">buildClassLoaderFromPom</span><span class="params">(File pomFile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Artifact&gt; artifacts = resolver.resolvePom(pomFile);</span><br><span class="line">        URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath());</span><br><span class="line"></span><br><span class="line">        Artifact artifact = artifacts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件声明的发现</span></span><br><span class="line">        Set&lt;String&gt; plugins = discoverPlugins(artifact, classLoader);</span><br><span class="line">        <span class="keyword">if</span> (!plugins.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件声明的写入</span></span><br><span class="line">            writePluginServices(plugins, artifact.getFile());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_FILE_SUFFIX = <span class="string">".class"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICES_FILE = <span class="string">"META-INF/services/"</span> + Plugin.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件声明的发现</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">discoverPlugins</span><span class="params">(Artifact artifact, ClassLoader classLoader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> File(file, SERVICES_FILE).exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ImmutableSet.of();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> listClasses(file.toPath()).stream()</span><br><span class="line">                .filter(name -&gt; classInterfaces(name, classLoader).contains(Plugin.class.getName()))</span><br><span class="line">                .collect(toImmutableSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插件声明的写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writePluginServices</span><span class="params">(Iterable&lt;String&gt; plugins, File root)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Path path = root.toPath().resolve(SERVICES_FILE);</span><br><span class="line"></span><br><span class="line">        createDirectories(path.getParent());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Writer out = Files.newBufferedWriter(path, UTF_8)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String plugin : plugins) &#123;</span><br><span class="line">                out.write(plugin + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载-Catalogs"><a href="#加载-Catalogs" class="headerlink" title="加载 Catalogs"></a>加载 Catalogs</h2><p>Catalog -&gt; Schema -&gt; Table ，ConnectorFactory 可能存放多个 catalog 实例，例如每一个 mysql 实例都是一个 catalog 。</p><p>加载 Catalogs 时序图： </p><ol><li><code>PrestoServer.run()</code> 调用 <code>StaticCatalogStore.loadCatalogs()</code></li></ol><p><img src="PrestoServer_run_load_Catalogs.png" alt></p><ol start="2"><li><code>StaticCatalogStore.loadCatalogs()</code> 的具体调用</li></ol><p><img src="StaticCatalogStore_loadCatalogs.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCatalogStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载 etc/catalog 目录下的所有 properties 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadCatalogs</span><span class="params">(Map&lt;String, Map&lt;String, String&gt;&gt; additionalCatalogs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : listFiles(catalogConfigurationDir)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile() &amp;&amp; file.getName().endsWith(<span class="string">".properties"</span>)) &#123;</span><br><span class="line">                loadCatalog(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载某一个具体的 catalog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadCatalog</span><span class="params">(String catalogName, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"-- Loading catalog %s --"</span>, catalogName);</span><br><span class="line"></span><br><span class="line">        String connectorName = <span class="keyword">null</span>;</span><br><span class="line">        ImmutableMap.Builder&lt;String, String&gt; connectorProperties = ImmutableMap.builder();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : properties.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取 catalog.properties 中配置的 connector.name</span></span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(<span class="string">"connector.name"</span>)) &#123;</span><br><span class="line">                connectorName = entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                connectorProperties.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为 catalog 创建真正的物理连接</span></span><br><span class="line">        connectorManager.createConnection(catalogName, connectorName, connectorProperties.build());</span><br><span class="line">        log.info(<span class="string">"-- Added catalog %s using connector %s --"</span>, catalogName, connectorName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectorManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建一个 catalog connector ，根据 connectorName 和 catalogName 两个入参，结果输出 catalog 对应的 connectorId</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> ConnectorId <span class="title">createConnection</span><span class="params">(String catalogName, ConnectorFactory connectorFactory, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ConnectorId connectorId = <span class="keyword">new</span> ConnectorId(catalogName);</span><br><span class="line">        checkState(!connectors.containsKey(connectorId), <span class="string">"A connector %s already exists"</span>, connectorId);</span><br><span class="line"></span><br><span class="line">        addCatalogConnector(catalogName, connectorId, connectorFactory, properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectorId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IcebergConnectorFactory"><a href="#IcebergConnectorFactory" class="headerlink" title="IcebergConnectorFactory"></a>IcebergConnectorFactory</h2><p>下面以 iceberg 为例，看下如何实现一个 ConnectorFactory 。</p><p>实现一个 ConnectorFactory ，需要实现 <code>getName()</code>、<code>getHandleResolver()</code>、<code>create()</code> 3个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IcebergConnectorFactory</span> <span class="keyword">implements</span> <span class="title">ConnectorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"iceberg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回各自实现的 ConnectorHandleResolver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectorHandleResolver <span class="title">getHandleResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IcebergHandleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建 Connector</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">create</span><span class="params">(String catalogName, Map&lt;String, String&gt; config, ConnectorContext context)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ClassLoader classLoader = IcebergConnectorFactory.class.getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 java 反射，调用 InternalIcebergConnectorFactory.createConnector 创建 iceberg connector</span></span><br><span class="line">            <span class="keyword">return</span> (Connector) classLoader.loadClass(InternalIcebergConnectorFactory.class.getName())</span><br><span class="line">                    .getMethod(<span class="string">"createConnector"</span>, String.class, Map.class, ConnectorContext.class, Optional.class)</span><br><span class="line">                    .invoke(<span class="keyword">null</span>, catalogName, config, context, Optional.empty());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable targetException = e.getTargetException();</span><br><span class="line">            throwIfUnchecked(targetException);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(targetException);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大体是定义关于读写 iceberg 数据源的操作，后续再细拆</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalIcebergConnectorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InternalIcebergConnectorFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connector <span class="title">createConnector</span><span class="params">(String catalogName, Map&lt;String, String&gt; config, ConnectorContext context, Optional&lt;ExtendedHiveMetastore&gt; metastore)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        ClassLoader classLoader = InternalIcebergConnectorFactory.class.getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> (ThreadContextClassLoader ignored = <span class="keyword">new</span> ThreadContextClassLoader(classLoader)) &#123;</span><br><span class="line">            </span><br><span class="line">            Bootstrap app = <span class="keyword">new</span> Bootstrap(</span><br><span class="line">                    <span class="keyword">new</span> EventModule(),</span><br><span class="line">                    <span class="keyword">new</span> MBeanModule(),</span><br><span class="line">                    <span class="keyword">new</span> JsonModule(),</span><br><span class="line">                    <span class="keyword">new</span> IcebergModule(),</span><br><span class="line">                    <span class="keyword">new</span> IcebergMetastoreModule(),</span><br><span class="line">                    <span class="keyword">new</span> HiveS3Module(catalogName),</span><br><span class="line">                    <span class="keyword">new</span> HiveAuthenticationModule(),</span><br><span class="line">                    <span class="keyword">new</span> HiveMetastoreModule(catalogName, metastore),</span><br><span class="line">                    binder -&gt; &#123;</span><br><span class="line">                        binder.bind(NodeVersion.class).toInstance(<span class="keyword">new</span> NodeVersion(context.getNodeManager().getCurrentNode().getVersion()));</span><br><span class="line">                        binder.bind(NodeManager.class).toInstance(context.getNodeManager());</span><br><span class="line">                        binder.bind(TypeManager.class).toInstance(context.getTypeManager());</span><br><span class="line">                        binder.bind(PageIndexerFactory.class).toInstance(context.getPageIndexerFactory());</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Google Guice 是从 Google 开源的一款轻量级依赖注入框架；</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * Guice：整个框架的门面，通过 Guice 获得 Injector 实例；</span></span><br><span class="line"><span class="comment">             * Injector：一个依赖的管理上下文</span></span><br><span class="line"><span class="comment">             * Binder：一个接口和实现的绑定</span></span><br><span class="line"><span class="comment">             * Module：一组 Binder ，绑定一组被依赖的中间服务</span></span><br><span class="line"><span class="comment">             * Provider：bean 的提供者           </span></span><br><span class="line"><span class="comment">             * Scope：Provider 的作用域</span></span><br><span class="line"><span class="comment">             * @Inject：类似 Spring Autowired</span></span><br><span class="line"><span class="comment">             * @Name：和 @Inject 配合使用，类似 Spring Resource</span></span><br><span class="line"><span class="comment">             *          </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Injector injector = app</span><br><span class="line">                    .doNotInitializeLogging()</span><br><span class="line">                    .setRequiredConfigurationProperties(config)</span><br><span class="line">                    .initialize();</span><br><span class="line"></span><br><span class="line">            LifeCycleManager lifeCycleManager = injector.getInstance(LifeCycleManager.class);</span><br><span class="line">            IcebergTransactionManager transactionManager = injector.getInstance(IcebergTransactionManager.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据表元数据</span></span><br><span class="line">            IcebergMetadataFactory metadataFactory = injector.getInstance(IcebergMetadataFactory.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理分任务逻辑</span></span><br><span class="line">            ConnectorSplitManager splitManager = injector.getInstance(ConnectorSplitManager.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            ConnectorPageSourceProvider connectorPageSource = injector.getInstance(ConnectorPageSourceProvider.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            ConnectorPageSinkProvider pageSinkProvider = injector.getInstance(ConnectorPageSinkProvider.class);</span><br><span class="line"></span><br><span class="line">            ConnectorNodePartitioningProvider connectorDistributionProvider = injector.getInstance(ConnectorNodePartitioningProvider.class);</span><br><span class="line">            IcebergSessionProperties icebergSessionProperties = injector.getInstance(IcebergSessionProperties.class);</span><br><span class="line">            IcebergTableProperties icebergTableProperties = injector.getInstance(IcebergTableProperties.class);</span><br><span class="line">            Set&lt;Procedure&gt; procedures = injector.getInstance((Key&lt;Set&lt;Procedure&gt;&gt;) Key.get(Types.setOf(Procedure.class)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IcebergConnector(</span><br><span class="line">                    lifeCycleManager,</span><br><span class="line">                    transactionManager,</span><br><span class="line">                    metadataFactory,</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorSplitManager(splitManager, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorPageSourceProvider(connectorPageSource, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeConnectorPageSinkProvider(pageSinkProvider, classLoader),</span><br><span class="line">                    <span class="keyword">new</span> ClassLoaderSafeNodePartitioningProvider(connectorDistributionProvider, classLoader),</span><br><span class="line">                    ImmutableSet.of(),</span><br><span class="line">                    icebergSessionProperties.getSessionProperties(),</span><br><span class="line">                    IcebergSchemaProperties.SCHEMA_PROPERTIES,</span><br><span class="line">                    icebergTableProperties.getTableProperties(),</span><br><span class="line">                    <span class="keyword">new</span> AllowAllAccessControl(),</span><br><span class="line">                    procedures);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConnectorHandleResolver 接口用于对数据源 schema 结构等解析处理</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IcebergHandleResolver</span> <span class="keyword">implements</span> <span class="title">ConnectorHandleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTableHandle&gt; getTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTableLayoutHandle&gt; getTableLayoutHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergTableLayoutHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ColumnHandle&gt; getColumnHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergColumnHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorSplit&gt; getSplitClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergSplit.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorOutputTableHandle&gt; getOutputTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergWritableTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorInsertTableHandle&gt; getInsertTableHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> IcebergWritableTableHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConnectorTransactionHandle&gt; getTransactionHandleClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> HiveTransactionHandle.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/143115558" target="_blank" rel="noopener">Presto Connector 实现原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结下 Presto Connectors 的 SPI 实现。在 Presto 中，UDF、EventListener、DataTypes、ParameterTypes、Access Control、Resource Group 以及 Connector&lt;br&gt;都是通过插件机制实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="OLAP" scheme="http://yoursite.com/categories/OLAP/"/>
    
      <category term="Presto" scheme="http://yoursite.com/categories/OLAP/Presto/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Presto 基础</title>
    <link href="http://yoursite.com/2022/03/25/Presto%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2022/03/25/Presto基础/</id>
    <published>2022-03-24T17:18:43.000Z</published>
    <updated>2022-04-09T17:58:30.275Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍下 Presto 的基础概念。</p><a id="more"></a><h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p><img src="Presto%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><h2 id="查询计划"><a href="#查询计划" class="headerlink" title="查询计划"></a>查询计划</h2><h3 id="句法优化器"><a href="#句法优化器" class="headerlink" title="句法优化器"></a>句法优化器</h3><h4 id="初始查询计划"><a href="#初始查询计划" class="headerlink" title="初始查询计划"></a>初始查询计划</h4><p>查询最直接的查询计划非常接近其 SQL 语法结构，查询计划是树状的，执行从叶子节点开始，沿着树结构逐步上升。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- Limit[5]</span><br><span class="line">- Sort[orders_sum DESC]</span><br><span class="line">- LateralJoin[2]</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey AND c.custkey = o.custkey]</span><br><span class="line">- CrossJoin</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- EnforceSingleRow[region_name := r.name]</span><br><span class="line">- Filter[r.regionkey = n.regionkey]</span><br><span class="line">- TableScan[region]</span><br></pre></td></tr></table></figure><p>TableScan 算子从底层存储中访问表，并返回包含表中所有行的结果集；<br>Filter 算子接收行并在每一行数据上应用过滤条件，只留下满足条件的行；<br>CrossJoin 算子从两个子节点接收数据集，返回两个数据集中行的所有组合，它可能会将其中一个数据集存放在内存中，从而避免多次访问底层存储；</p><h4 id="谓词下推"><a href="#谓词下推" class="headerlink" title="谓词下推"></a>谓词下推</h4><p>将过滤条件移动到尽可能接近数据源的位置，使数据量在查询开始后尽可能早地开始缩减。<br>案例中，将原 Filter 算子的一部分条件保留在新的简化 Filter 算子中，另一部分和下层的 CrossJoin 算子合并为新的 InnerJoin 算子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey AND c.custkey = o.custkey]  // 原始 Filter 算子</span><br><span class="line">- CrossJoin</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey]      // 简化后的 Filter 算子</span><br><span class="line">- InnerJoin[o.custkey = c.custkey]   // 合并后新产生的 InnerJoin 算子</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">...</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### Cross Join 消除</span><br><span class="line"></span><br><span class="line">```txt</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- Filter[c.nationkey = n.nationkey]      // 先过滤 nationkey 列</span><br><span class="line">- InnerJoin[o.custkey = c.custkey]   // 然后是 Inner Join custkey</span><br><span class="line">- CrossJoin</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         // 重新排列为 custkey 在前面</span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] // nationkey 在后面</span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="局部聚合"><a href="#局部聚合" class="headerlink" title="局部聚合"></a>局部聚合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- Aggregate[by custkey; totalprice := sum(totalprice)] // 局部预聚合，聚合用户维度的订单金额</span><br><span class="line">- TableScan[orders]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="Lateral-Join-去关联化"><a href="#Lateral-Join-去关联化" class="headerlink" title="Lateral Join 去关联化"></a>Lateral Join 去关联化</h4><p>Lateral Join 可以通过如下方式实现：使用 for 循环迭代一个数据集中的所有行，并对每一行执行另一次查询。</p><p>Presto 将子查询去关联化，将所有的相关条件拉取上来并形成一个标准的 Left Join。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> region r <span class="keyword">WHERE</span> regionkey = n.regionkey)</span><br><span class="line"><span class="keyword">AS</span> region_name</span><br><span class="line"><span class="keyword">FROM</span> nation n</span><br></pre></td></tr></table></figure><p>变换为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">r.name <span class="keyword">AS</span> region_name,</span><br><span class="line">n.name <span class="keyword">AS</span> nation_name</span><br><span class="line"><span class="keyword">FROM</span> nation n <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> region r <span class="keyword">ON</span> r.regionkey = n.regionkey</span><br></pre></td></tr></table></figure><p>平时写 odps sql ，也是习惯用下面这种标准的 left join ，如曝光表 left join 点击表 left join 行为事件表等等。</p><h4 id="Semi-join-IN-去关联化"><a href="#Semi-join-IN-去关联化" class="headerlink" title="Semi-join (IN) 去关联化"></a>Semi-join (IN) 去关联化</h4><p>子查询不只用于在查询中拉取信息，也常用于配合 IN 谓词过滤行。</p><p>下面这个查询，用于找出客户和物品供应商来自同一个国家（地区）的订单，查询这样的订单非常有用，这样可以绕过分发中心直接从供应商发货到消费者，<br>以此来降低运送成本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> o.orderkey</span><br><span class="line"><span class="keyword">FROM</span> lineitem l</span><br><span class="line"><span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">JOIN</span> customer <span class="keyword">ON</span> o.custkey = c.custkey</span><br><span class="line"><span class="keyword">WHERE</span> c.nationkey <span class="keyword">IN</span> (</span><br><span class="line"><span class="comment">-- 多次调用的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> s.nationkey</span><br><span class="line"><span class="keyword">FROM</span> part p</span><br><span class="line"><span class="keyword">JOIN</span> partsupp ps <span class="keyword">ON</span> p.partkey = ps.partkey</span><br><span class="line"><span class="keyword">JOIN</span> supplier s <span class="keyword">ON</span> ps.suppkey = s.suppkey</span><br><span class="line"><span class="keyword">WHERE</span> p.partkey = l.partkey</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="基于代价的优化器-CBO"><a href="#基于代价的优化器-CBO" class="headerlink" title="基于代价的优化器 (CBO)"></a>基于代价的优化器 (CBO)</h3><p>Cost Based Optimizer ，计划转换时不但基于本身的形状，也将查询数据的形状考虑在內：</p><ul><li>CPU 时间</li><li>内存使用</li><li>网络带宽</li></ul><p>基于代价优化的查询案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n.name <span class="keyword">AS</span> nation_name,</span><br><span class="line"><span class="keyword">avg</span>(extendedprice) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> nation n, orders o, customer c, lineitem l</span><br><span class="line"><span class="keyword">WHERE</span> n.nationkey = c.nationkey</span><br><span class="line"><span class="keyword">AND</span> c.custkey = o.custkey</span><br><span class="line"><span class="keyword">AND</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> n.nationkey, n.name;</span><br></pre></td></tr></table></figure><p>如果不基于代价进行决策，查询优化器就会使用规则来优化此查询的初始计划。这个计划完全由 SQL 查询的语法结构所决定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[o.orderkey = l.orderkey]  </span><br><span class="line">- InnerJoin[c.custkey = o.custkey]         </span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey] </span><br><span class="line">- TableScan[nation]</span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[lineitem]</span><br></pre></td></tr></table></figure><p>下面变换一个 SQL ，仅仅改变一下 WHERE 语句中条件的顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n.name <span class="keyword">AS</span> nation_name,</span><br><span class="line"><span class="keyword">avg</span>(extendedprice) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> nation n, orders o, customer c, lineitem l</span><br><span class="line"><span class="keyword">WHERE</span> c.custkey = o.custkey </span><br><span class="line"><span class="keyword">AND</span> o.orderkey = l.orderkey</span><br><span class="line"><span class="keyword">AND</span> n.nationkey = c.nationkey</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> n.nationkey, n.name;</span><br></pre></td></tr></table></figure><p>就产生了一个具有不同 Join 顺序的查询计划：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Aggregate[by nationkey...; orders_sum := sum(totalprice)]</span><br><span class="line">- InnerJoin[n.nationkey = c.nationkey]  </span><br><span class="line">- InnerJoin[o.orderkey = l.orderkey]         </span><br><span class="line">- InnerJoin[c.custkey = o.custkey] </span><br><span class="line">- TableScan[customer]</span><br><span class="line">- TableScan[orders]</span><br><span class="line">- TableScan[lineitem]</span><br><span class="line">- TableScan[nation]</span><br></pre></td></tr></table></figure><p>从时间复杂度的角度来看，无论是将 nation 表 Join 到 customer 表，还是反过来将 customer 表 Join 到 nation 表，都无关紧要，<br>两个表都要处理，在使用 Hash Join 时，总的运行时间与输出行数成正比。<br>然而，时间复杂度并不是唯一的考量标准，通常对于处理数据的程序，尤其是大规模数据库系统来说，内存使用和网络流量也很重要。</p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><h3 id="blackhole-Connector"><a href="#blackhole-Connector" class="headerlink" title="blackhole Connector"></a>blackhole Connector</h3><p>它作为任何数据的最终消费者，类似于 UNIX 操作系统中的 null 设备（/dev/null）。可以把它作为从其他 catalog 中读取并插入数据的目标，实际上不写入任何内容，所以可以用它来衡量 catalog<br>读取的性能。</p><p>/etc/catalog/blackhole.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = blackhole</span><br></pre></td></tr></table></figure><h3 id="JMX-Connector"><a href="#JMX-Connector" class="headerlink" title="JMX Connector"></a>JMX Connector</h3><p>/etc/catalog/jmx.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = jmx</span><br></pre></td></tr></table></figure><p>为最新数据提供了名为 current 的 schema ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> jmx.current;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> vmname, uptime, node <span class="keyword">FROM</span> jmx.current.<span class="string">"java.lang.type=runtime"</span>;</span><br></pre></td></tr></table></figure><h3 id="Memory-Connector"><a href="#Memory-Connector" class="headerlink" title="Memory Connector"></a>Memory Connector</h3><p>可以像使用临时数据库一样使用内存连接器，所有的数据都存储在集群的内存中，停止集群就会销毁数据，可以用作调试。</p><p>/etc/catalog/memory.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name = memory</span><br></pre></td></tr></table></figure><h3 id="tpch-Connector"><a href="#tpch-Connector" class="headerlink" title="tpch Connector"></a>tpch Connector</h3><p>TPC-H 是一款面向商品零售业的决策支持系统测试基准，它定义了8张表，22个查询，遵循 SQL92 。TPC-H 基准的数据库模式遵循第三范式，其数据维护功能仅仅限制了潜在的对索引的过度使用，而没有测试 DBMS 执行 ETL 的能力。同时，新兴的数据仓库开始采用新的模型，如星型模型、雪花模型，TPC-H 已经不能精准反应当今数据库系统的真实性能。</p><p>/etc/catalog/tpch.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = tpch</span><br><span class="line">tpch.splits-per-node = 4</span><br></pre></td></tr></table></figure><p>从 TPC 官网下载 TPC-H 的 zip 包 ，需要填写一些个人信息，之后会发送一个下载链接到邮箱中：</p><p><img src="TPC%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDTPCH%E7%9A%84zip%E5%8C%85.png" alt></p><p><img src="TPCH%E5%B7%A5%E5%85%B7%E5%8C%85%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./916c6f4e-1935-4f81-ad6f-04165831ae11-tpc-h-tool/TPC-H_Tools_v3.0.0/dbgen</span><br><span class="line">cp makefile.suite Makefile</span><br><span class="line">vi Makefile</span><br></pre></td></tr></table></figure><p>修改 Makefile 的 103 ～ 111 行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CC      = gcc</span><br><span class="line"># Current values for DATABASE are: INFORMIX, DB2, TDAT (Teradata)</span><br><span class="line">#                                  SQLSERVER, SYBASE, ORACLE, VECTORWISE</span><br><span class="line"># Current values for MACHINE are:  ATT, DOS, HP, IBM, ICL, MVS, </span><br><span class="line">#                                  SGI, SUN, U2200, VMS, LINUX, WIN32 </span><br><span class="line"># Current values for WORKLOAD are:  TPCH</span><br><span class="line">DATABASE= ORACLE</span><br><span class="line">MACHINE = LINUX</span><br><span class="line">WORKLOAD = TPCH</span><br></pre></td></tr></table></figure><p><img src="%E4%BF%AE%E6%94%B9TPCH_Makefile.png" alt></p><p>执行 make ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>在 Mac 上编译可能会报如下错误，因为 mac 下的 malloc 头文件移动到了 sys 下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -DDBNAME=\"dss\" -DLINUX -DORACLE -DTPCH -DRNG_TEST -D_FILE_OFFSET_BITS=64    -c -o bm_utils.o bm_utils.c</span><br><span class="line">bm_utils.c:71:10: fatal error: <span class="string">'malloc.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;malloc.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [bm_utils.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>bm_utils.c</code> 文件的第71行，<code>varsub.c</code> 文件的第44行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>查看 <code>TPC-H_Tools_v3.0.0/dbgen</code> 目录下生成了两个新的命令 <code>dbgen</code> 与 <code>qgen</code> ，分别用来生成数据与生成 sql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt</span><br><span class="line">-rwxr-xr-x   1 staff  staff  105842  3 28 11:29 dbgen</span><br><span class="line">-rwxr-xr-x   1 staff  staff  100977  3 28 11:31 qgen</span><br></pre></td></tr></table></figure><p>生成数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 dbgen、qgen 命令拷贝至一个单独的目录，便于测试</span></span><br><span class="line">cp dbgen tpch-kit</span><br><span class="line">cp dists.dss tpch-kit</span><br><span class="line">cp queries tpch-kit</span><br><span class="line">cp qgen tpch-kit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数用于控制数据集规模，1GB；-f 参数强制覆盖已有数据；</span></span><br><span class="line"><span class="built_in">cd</span> tpch-kit</span><br><span class="line">./dbgen -s 1 -f </span><br><span class="line"></span><br><span class="line">ls -lrt *.tpl</span><br><span class="line">-rw-r--r--   1 staff  staff    1409184  3 28 11:42 supplier.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff   24346144  3 28 11:42 customer.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  171952161  3 28 11:42 orders.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  759863287  3 28 11:42 lineitem.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff   24135125  3 28 11:42 part.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff  118984616  3 28 11:42 partsupp.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff       2224  3 28 11:42 nation.tbl</span><br><span class="line">-rw-r--r--   1 staff  staff        389  3 28 11:42 region.tbl</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">表名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">supplier</td><td align="center">供货商</td></tr><tr><td align="center">customer</td><td align="center">顾客</td></tr><tr><td align="center">orders</td><td align="center">订单</td></tr><tr><td align="center">lineitem</td><td align="center">在线商品</td></tr><tr><td align="center">part</td><td align="center">零件</td></tr><tr><td align="center">partsupp</td><td align="center">供货商的零件信息</td></tr><tr><td align="center">nation</td><td align="center">国家</td></tr><tr><td align="center">region</td><td align="center">地区</td></tr></tbody></table><p>可以将 .tpl 数据转换为 csv ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls *.tbl`; <span class="keyword">do</span> sed <span class="string">'s/|$//'</span> <span class="variable">$i</span> &gt; <span class="variable">$&#123;i/tbl/csv&#125;</span>; <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>生成 query sql ，<code>DSS_QUERY=./queries</code> 是 sql 模板，<code>-s</code> 表示数据集规模：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpch-kit</span><br><span class="line">mkdir q</span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> `seq 1 22`; <span class="keyword">do</span>     DSS_QUERY=./queries ./qgen -s 1 <span class="variable">$id</span> -b ./dists.dss &gt; q/<span class="variable">$id</span>.sql; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>可能会产生如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Open failed <span class="keyword">for</span> ./queries/1.sql at qgen.c:170</span><br></pre></td></tr></table></figure><p>需要设置下环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> DSS_CONFIG=tpch-kit/dbgen</span><br><span class="line"><span class="built_in">export</span> DSS_QUERY=<span class="variable">$DSS_CONFIG</span>/PATH_TO_QUERIES_FOLDER</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>在 <code>tpch-kit/dbgen/q</code> 目录将会生成22个 query sql 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpch-kit/q</span><br><span class="line">ls -lrt</span><br><span class="line">-rw-r--r--@ 1 staff  staff   598  3 28 14:02 1.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   769  3 28 14:02 2.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   478  3 28 14:02 3.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   421  3 28 14:02 4.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   556  3 28 14:02 5.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   311  3 28 14:02 6.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   893  3 28 14:02 7.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   868  3 28 14:02 8.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   672  3 28 14:02 9.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   592  3 28 14:02 10.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   568  3 28 14:02 11.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   659  3 28 14:02 12.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   413  3 28 14:02 13.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   395  3 28 14:02 14.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   594  3 28 14:02 15.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   550  3 28 14:02 16.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   350  3 28 14:02 17.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   516  3 28 14:02 18.sql</span><br><span class="line">-rw-r--r--  1 staff  staff  1041  3 28 14:02 19.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   670  3 28 14:02 20.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   727  3 28 14:02 21.sql</span><br><span class="line">-rw-r--r--  1 staff  staff   726  3 28 14:02 22.sql</span><br></pre></td></tr></table></figure><h3 id="tpcds-Connector"><a href="#tpcds-Connector" class="headerlink" title="tpcds Connector"></a>tpcds Connector</h3><p>TPC-DS 采用星型、雪花等多维数据模式，包含7张事实表，17张维度表，平均每张表含有18列。其工作负载包含99个 SQL 查询，覆盖 SQL92 和 2003 的核心部分以及 OLAP 。这个测试集包含对大数据集的统计、报表生成、联机查询、数据挖掘等复杂应用，测试用的数据和值是有倾斜的，与真实数据一致。TPC-DS 是与真实场景非常接近的一个测试集。</p><p>/etc/catalog/tpcds.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = tpcds</span><br><span class="line">tpcds.splits-per-node = 4</span><br></pre></td></tr></table></figure><h4 id="安装-TPC-DS-工具"><a href="#安装-TPC-DS-工具" class="headerlink" title="安装 TPC-DS 工具"></a>安装 TPC-DS 工具</h4><p>由于从 TPC 官网下载的 zip 包：</p><p><img src="TPC%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDTPCDS%E7%9A%84zip%E5%8C%85.png" alt></p><p>生成数据时，会报如下错误，暂未找到解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dsdgen Population Generator (Version 3.2.0)</span><br><span class="line">Copyright Transaction Processing Performance Council (TPC) 2001 - 2021</span><br><span class="line">Warning: This scale factor is valid <span class="keyword">for</span> QUALIFICATION ONLY</span><br><span class="line">Runtime ERROR: Distribution over-run/under-run</span><br><span class="line">Check distribution definitions and usage <span class="keyword">for</span> cities.</span><br><span class="line">index = -1, length=1000.</span><br></pre></td></tr></table></figure><p>因此直接从 <a href="https://github.com/gregrahn/tpcds-kit" target="_blank" rel="noopener"></a> 下载并进行编译。</p><p>编译 tpcds ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../tpc-ds-tool/tools</span><br><span class="line">cp Makefile.suite Makefile</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>在 MacOS 上编译，可能会出现如下几个报错：</p><p>错误1 ：因为 <code>values.h</code> 是 GNU 的库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In file included from mkheader.c:37:</span><br><span class="line">./porting.h:46:10: fatal error: <span class="string">'values.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;values.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [mkheader.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>porting.h</code> 文件的第46行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;values.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>错误2：malloc.h 头文件位置不对：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date.c:40:10: fatal error: <span class="string">'malloc.h'</span> file not found</span><br><span class="line"><span class="comment">#include &lt;malloc.h&gt;</span></span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [date.o] Error 1</span><br></pre></td></tr></table></figure><p>修改 <code>date.c</code> 文件的第42行，<code>dist.c</code> 文件的第54行，<code>misc.c</code> 文件的第45行，<code>tokenizer.l</code>的第50行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/malloc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>错误3：缺少宏定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">genrand.c:87:12: error: use of undeclared identifier <span class="string">'MAXINT'</span></span><br><span class="line">      s += MAXINT;</span><br><span class="line">           ^</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>因为 mac 和 linux 的 h 文件差异，部分宏 mac 并没有，因此直接在 <code>genrand.h</code> 中自己添加即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXINT 4096000</span></span><br></pre></td></tr></table></figure><p>查看 <code>tpc-ds-tool/tools</code> 目录下生成了两个新的命令 <code>dbgen</code> 与 <code>qgen</code> ，分别用来生成数据与生成 sql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt *gen</span><br><span class="line">-rwxr-xr-x  1 staff  staff  329603  3 28 16:24 dsdgen</span><br><span class="line">-rwxr-xr-x  1 staff  staff  249219  3 28 16:25 dsqgen</span><br></pre></td></tr></table></figure><h4 id="创建-TPC-DS-测试需要用到的表"><a href="#创建-TPC-DS-测试需要用到的表" class="headerlink" title="创建 TPC-DS 测试需要用到的表"></a>创建 TPC-DS 测试需要用到的表</h4><ol><li>准备好创建表语句</li></ol><p>TPC-DS 已经提前准备好了创建表相关的 SQL 文件，位于 tools 目录下：</p><ul><li>tpcds.sql：创建25张表</li><li>tpcds_ri.sql：创建表与表之间关系的 sql 语句</li><li>tpcds_source.sql</li></ul><ol start="2"><li>利用数据库连接工具（如：navicat）创建相应的数据库和表</li></ol><h4 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpc-ds-tool</span><br><span class="line">mkdir data</span><br><span class="line"><span class="built_in">cd</span> tools</span><br><span class="line"></span><br><span class="line">./dsdgen -SCALE 1GB -FORCE -DIR ../data</span><br></pre></td></tr></table></figure><p>之后通常会通过命令将测试数据 load 到具体的数据源存储中，用于后续测试。</p><h4 id="生成99个-query-sql"><a href="#生成99个-query-sql" class="headerlink" title="生成99个 query sql"></a>生成99个 query sql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tpc-ds-tool</span><br><span class="line">mkdir sql</span><br><span class="line"><span class="built_in">cd</span> tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环命令，生成99个 query sql</span></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> `seq 1 99`; <span class="keyword">do</span>   ./dsqgen -DIRECTORY ../query_templates -TEMPLATE <span class="string">"query<span class="variable">$&#123;id&#125;</span>.tpl"</span> -DIALECT oracle -FILTER Y &gt; ../sql/query<span class="variable">$&#123;id&#125;</span>.sql; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成单个 query sql 示例</span></span><br><span class="line">./dsqgen -DIRECTORY ../query_templates -TEMPLATE <span class="string">"query8.tpl"</span> -DIALECT oracle -VERBOSE Y &gt; ../sql/query8.sql</span><br></pre></td></tr></table></figure><h3 id="RDBMS-Connector"><a href="#RDBMS-Connector" class="headerlink" title="RDBMS Connector"></a>RDBMS Connector</h3><p>/etc/catalog/postgresql.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connector.name = &apos;postgresql&apos;</span><br><span class="line">connectot-url = jdbc:postgresql://db.example.com:5432/database</span><br><span class="line">connector-user = root</span><br><span class="line">connector-password = secret</span><br></pre></td></tr></table></figure><h3 id="Hive-Connector"><a href="#Hive-Connector" class="headerlink" title="Hive Connector"></a>Hive Connector</h3><p>/etc/catalog/hive.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = hive-hadoop2</span><br><span class="line">hive.metastore.uri = thrift://example.net:9083</span><br></pre></td></tr></table></figure><p>建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hive.web.page_views (</span><br><span class="line">view_time <span class="built_in">timestamp</span>,</span><br><span class="line">user_id <span class="built_in">bigint</span>,</span><br><span class="line">page_url <span class="built_in">varchar</span>,</span><br><span class="line">view_date <span class="built_in">date</span>,</span><br><span class="line">country <span class="built_in">varchar</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="keyword">format</span> = <span class="string">'ORC'</span>,</span><br><span class="line">external_location = <span class="string">'s3://starburst-external/pageviews'</span>,</span><br><span class="line">partitioned_by = <span class="built_in">ARRAY</span>[<span class="string">'view_date'</span>, <span class="string">'country'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Presto 自动发现和添加分区的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> system.sync_partition_metadata (</span><br><span class="line"><span class="string">'web'</span>,</span><br><span class="line"><span class="string">'page_views'</span>,</span><br><span class="line"><span class="string">'FULL'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Phoenix-Connector"><a href="#Phoenix-Connector" class="headerlink" title="Phoenix Connector"></a>Phoenix Connector</h3><p>/etc/catalog/bigtables.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connector.name = phoenix</span><br><span class="line">phoenix.connection-url = jdbc:phoenix:zookeeper1.zookeeper2:2181:/hbase</span><br></pre></td></tr></table></figure><h3 id="Druid-Connector"><a href="#Druid-Connector" class="headerlink" title="Druid Connector"></a>Druid Connector</h3><p>/etc/catalog/druid.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connector.name = druid</span><br><span class="line">druid.coordinator-url = http://localhost:8081</span><br><span class="line">druid.broker-url = http://localhost:8082</span><br></pre></td></tr></table></figure><h3 id="Kafka-Connector"><a href="#Kafka-Connector" class="headerlink" title="Kafka Connector"></a>Kafka Connector</h3><p>/etc/catalog/trafficstream.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connector.name = kafka</span><br><span class="line">kafka.table-names = web.pages,web.users</span><br><span class="line">kafka.nodes = trafficstream.example.com:9092</span><br></pre></td></tr></table></figure><p>kafka 的消息过期配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.retention.hours = 168</span><br><span class="line">log.segment.bytes = 1073741824</span><br><span class="line">log.clenup.policy = delete</span><br></pre></td></tr></table></figure><p>可以定期将 kafka 的数据迁移至 hdfs：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 hdfs 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  hdfs.web.page_views</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line"><span class="keyword">format</span> = <span class="string">'ORC'</span>,</span><br><span class="line">partitioned_by = <span class="built_in">ARRAY</span>[<span class="string">'view_date'</span>]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> trafficstream.web.page_views;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定期查询导入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hdfs.web.page_views</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> trafficstream.web.page_views;</span><br></pre></td></tr></table></figure><h3 id="Iceberg-Connector"><a href="#Iceberg-Connector" class="headerlink" title="Iceberg Connector"></a>Iceberg Connector</h3><p>/etc/catalog/iceberg.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connector.name = iceberg</span><br><span class="line">hive.metastore.uri = thrift://example.net:9083</span><br><span class="line">iceberg.catalog.type = hive</span><br><span class="line">iceberg.file-format = PARQUET</span><br><span class="line">iceberg.compression-codec = GZIP</span><br></pre></td></tr></table></figure><h3 id="联邦查询"><a href="#联邦查询" class="headerlink" title="联邦查询"></a>联邦查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f.uniquecarrier, c.description, <span class="keyword">count</span>(*) <span class="keyword">AS</span> ct</span><br><span class="line"><span class="keyword">FROM</span> hive.ontime.flights_orc f,  <span class="comment">-- hive 事实明细表</span></span><br><span class="line">postgresql.airline.carrier c <span class="comment">-- postgresql 关系维表</span></span><br><span class="line"><span class="keyword">WHERE</span> c.code = f.uniquecarrier</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> f.uniquecarrier, c.description</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span>(*) <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考书籍：《Presto实战》、《Presto技术内幕》<br> <a href="https://github.com/prestodb/f8-2019-demo" target="_blank" rel="noopener">f8-2019-demo</a><br> <a href="https://prestodb.io" target="_blank" rel="noopener">官网</a><br> <a href="https://github.com/prestodb/presto" target="_blank" rel="noopener">presto 代码库</a><br> <a href="https://trino.io/Presto_SQL_on_Everything.pdf" target="_blank" rel="noopener">presto 论文</a><br> <a href="https://prestodb.io/resources.html#libraries" target="_blank" rel="noopener">presto 语言 libraries</a><br> <a href="https://jupyter.org" target="_blank" rel="noopener">jupyter notebook</a><br> <a href="https://www.tpc.org/tpch/?spm=a2c4g.11186623.0.0.b1752815xppTva" target="_blank" rel="noopener">TPC 官网</a><br> <a href="https://sq.sf.163.com/blog/article/169594668340142080" target="_blank" rel="noopener">【大数据之数据仓库】TPCH工具使用指南</a><br> <a href="https://sq.sf.163.com/blog/article/169598335655010304" target="_blank" rel="noopener">【大数据之数据仓库】基准测试之TPCH</a><br> <a href="https://programmerah.com/compiling-tpc-h-tools-for-mac-9846/" target="_blank" rel="noopener">Compiling TPC-H tools for Mac</a><br> <a href="https://github.com/gregrahn/tpch-kit" target="_blank" rel="noopener">tpch-kit包</a><br> <a href="https://sq.sf.163.com/blog/article/169593936715112448" target="_blank" rel="noopener">【大数据之数据仓库】TPCDS工具使用指南</a><br> <a href="https://sq.sf.163.com/blog/article/169597393857601536" target="_blank" rel="noopener">【大数据之数据仓库】基准测试之TPCDS</a><br> <a href="https://github.com/gregrahn/tpcds-kit" target="_blank" rel="noopener">tpcds-kit包</a><br> <a href="https://www.baifachuan.com/posts/34f97a60.html" target="_blank" rel="noopener">MacOS 下编译 tpcds</a><br> <a href="https://github.com/gregrahn/tpcds-kit/commit/1653aeca89658ff42ec544b8fca0386fa56c835a" target="_blank" rel="noopener">DEFINE 缺失修复记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍下 Presto 的基础概念。&lt;/p&gt;
    
    </summary>
    
      <category term="OLAP" scheme="http://yoursite.com/categories/OLAP/"/>
    
      <category term="Presto" scheme="http://yoursite.com/categories/OLAP/Presto/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-188: Introduce Built-in Dynamic Table Storage</title>
    <link href="http://yoursite.com/2022/03/09/Flink-FLIP-188-Introduce-Built-in-Dynamic-Table-Storage/"/>
    <id>http://yoursite.com/2022/03/09/Flink-FLIP-188-Introduce-Built-in-Dynamic-Table-Storage/</id>
    <published>2022-03-09T07:05:32.000Z</published>
    <updated>2022-04-05T07:18:20.379Z</updated>
    
    <content type="html"><![CDATA[<p>动态表：全新的 Flink 内置存储。</p><p>Flink Dynamic Table 可以理解为一套流批一体的存储，并无缝对接 Flink SQL 。原来 Flink 只能读写像 Kafka 、 HBase 这样的外部表，现在用一套 Flink SQL 语法就可以像原来创建源表和目标表一样，创建一个 Dynamic Table。流式数仓的分层数据可以全部放到 Flink Dynamic Table 中，通过 Flink SQL 就能实时地串联起整个数仓的分层，既可以对 Dynamic Table 中不同明细层的数据做实时查询和分析，也可以对不同分层做批量 ETL 处理。</p><p>最终，利用 Flink CDC 、Flink SQL 、Flink Dynamic Table 就可以构建一套完整的流式数仓，实现实时离线一体化的体验。</p><p>目前，作为一个独立的开源项目 <a href="https://github.com/apache/flink-table-store" target="_blank" rel="noopener">flink-table-store</a> 开发中，该功能预计在 Flink 1.15 中发布。</p><a id="more"></a><p><img src="Dynamic_Table_Storage%E5%A4%A7%E8%87%B4%E7%BB%93%E6%9E%84.png" alt></p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>生产应用中，用户倾向于使用 Kafka 存储 logs ，使用 hudi/iceberg/click 作为一张表。<code>FLIP-188</code> 提议引入一种内置的存储：动态表，从 Flink SQL 视角，真正统一 changelog&amp;table 实现，未来也可以支持点查。</p><p>内置存储有以下几个特点：</p><ol><li>Flink SQL 的内置存储</li></ol><ul><li>改善可用性问题</li><li>Flink DDL 不再是数据源的简单映射，而是真正创建表</li><li>屏蔽和抽象底层技术细节，去除连接 connector 需要填写的 options ，使 SQL 聚焦于业务逻辑本身</li></ul><ol start="2"><li>支持亚秒级写入和消耗</li></ol><ul><li>可以通过面向服务的消息队列（如 Kafka）支持</li><li>高吞吐的 scan 能力</li><li>使用 columnar 格式的文件系统，同 iceberg/hudi 一样</li></ul><ol start="3"><li>还需要自动处理各种 Insert/Update/Delete 操作和表定义</li><li>接收任何类型的变更日志</li><li>接收任何类型的数据类型</li><li>表可以有主键，也可以没有主键</li></ol><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>从数据结构上看， Dynamic Table 内部有两个核心组件，File Storage 和 Log Storage ：</p><p><img src="Flink_Dynamic_Table%E7%9A%84%E5%A4%A7%E4%BD%93%E6%A0%BC%E5%BC%8F.png" alt></p><h3 id="File-Storage"><a href="#File-Storage" class="headerlink" title="File Storage"></a>File Storage</h3><p>Table 的文件存储形式，采用 LSM 架构，支持流式的更新、删除、增加等。采用开放的列存结构，支持压缩等优化。对应 Flink SQL 的批模式，支持全量批式读取。</p><p><img src="FileStore%E7%9A%84%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F.png" alt></p><ol><li>Data 目录</li></ol><ul><li>Part 目录：partition，在 DDL 中以 “PARTITIONED BY” 定义，同 Hive 一样，如 “dt=2022-03-12”</li><li>Bucket 目录：partition 下的 bucket ，数据通过 hash 落入 bucket ，分桶对应一个由多个 files 组成的 LSM</li><li>LSM datafiles：数据文件，抽象 format，支持 orc、parquet、avro ，record schema 如下：<br>SequenceNumber<br>ValueKind(add or delete)<br>RowData: key<br>RowData: value</li></ul><ol start="2"><li>Meta 文件</li></ol><ul><li><p>Manifest file: 代表多少 files 已经 added ，多少 files 已经 deleted，代表 table 的一次变更，Manifest 记录增量文件的版本，schema 如下：<br>data file 名称<br>FileKind: delete 或 add<br>partition<br>bucket<br>min/max key: 用于 skipping<br>min/max sequenceNumber<br>统计数据：data file 大小，行数</p></li><li><p>Snapshot file: manifest files 集合，代表 table 的一个 snapshot 。snapshot 代表一个版本的所有 files ，snapshot file 的 schema 是一个 Manifest：<br>manifest file名称<br>lower/upper partition: 用于分区裁剪<br>统计数据：manifest file 大小，added file 个数，deleted file 个数</p></li></ul><ul><li><p>table path 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262$     ll</span><br><span class="line">total 0</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ./</span><br><span class="line">drwx------  3 staff  staff   96  3 11 17:51 ../</span><br><span class="line">drwxr-xr-x  5 staff  staff  160  3 11 17:55 manifest/</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 p=p1/</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 p=p2/</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:55 snapshot/</span><br></pre></td></tr></table></figure></li><li><p>分区 p1、分桶 bucket-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/p=p1$     ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ../</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 bucket-1/</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 bucket-2/</span><br><span class="line"></span><br><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/p=p1/bucket-1$     ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:57 ./</span><br><span class="line">drwxr-xr-x  4 staff  staff  128  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  426  3 11 17:55 sst-90911871-51d6-4323-aa55-f25c8a29021d-0</span><br></pre></td></tr></table></figure></li><li><p>manifest 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/manifest$     ll</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x  5 staff  staff   160  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff   192  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  2681  3 11 17:55 manifest-5a53de30-1d30-43f0-a837-078ca61e0b93-0</span><br><span class="line">-rw-r--r--  1 staff  staff   837  3 11 17:55 manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-0</span><br><span class="line">-rw-r--r--  1 staff  staff   931  3 11 17:55 manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-1</span><br></pre></td></tr></table></figure></li><li><p>snapshot-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">staff@localhost:/var/folders/px/n0m4_bp13077qbk54k30yy340000gp/T/junit1120128347261300405/junit4490023537149085262/snapshot$     ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 staff  staff   96  3 11 17:55 ./</span><br><span class="line">drwx------  6 staff  staff  192  3 11 17:55 ../</span><br><span class="line">-rw-r--r--  1 staff  staff  283  3 11 17:55 snapshot-1</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"baseManifestList"</span>:<span class="string">"manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-0"</span>,</span><br><span class="line">    <span class="attr">"deltaManifestList"</span>:<span class="string">"manifest-list-0267739b-40f7-4c33-b433-d8f73b50af17-1"</span>,</span><br><span class="line">    <span class="attr">"commitUser"</span>:<span class="string">"user"</span>,</span><br><span class="line">    <span class="attr">"commitIdentifier"</span>:<span class="string">"9223372036854775807"</span>,</span><br><span class="line">    <span class="attr">"commitKind"</span>:<span class="string">"APPEND"</span>,</span><br><span class="line">    <span class="attr">"timeMillis"</span>:<span class="number">1646992531086</span>,</span><br><span class="line">    <span class="attr">"logOffsets"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Log-Storage"><a href="#Log-Storage" class="headerlink" title="Log Storage"></a>Log Storage</h3><p>Table 的操作记录，是一个不可变更序列，对应 Flink SQL 的流模式，可以通过 Flink SQL 订阅 Dynamic Table 的增量变化做实时分析，支持插件化实现。<br>依赖 Kafka 作为底层存储，Log Storage 中的 bucket 就对应 Kafka Partition 。</p><h2 id="源码阅读准备"><a href="#源码阅读准备" class="headerlink" title="源码阅读准备"></a>源码阅读准备</h2><p><a href="https://github.com/apache/flink" target="_blank" rel="noopener">flink git仓库</a> 切换到 master 分支，当前是 1.15-SNAPSHOT 分支，需要 install 到本地，flink-table-store 需要引用这个版本。<br><a href="https://github.com/apache/flink-table-store" target="_blank" rel="noopener">flink-table-store git仓库</a>，切换到 master 分支。</p><p><code>FileStoreITCase</code> </p><ol><li>分区表</li></ol><p>测试数据集：</p><p>0,p1,1<br>0,p1,2<br>5,p1,1<br>6,p2,1<br>3,p2,5<br>5,p2,1</p><p>buckets = 3<br>partitions {1}<br>keys {2}</p><p>中间结果：<br>partition -&gt; p1<br>key -&gt; 1<br>row -&gt; 0,p1,1<br>partition -&gt; p1<br>key -&gt; 1<br>row -&gt; 5,p1,1<br>partition -&gt; p2<br>key -&gt; 1<br>row -&gt; 6,p2,1<br>partition -&gt; p2<br>key -&gt; 1<br>row -&gt; 5,p2,1<br>partition -&gt; p1<br>key -&gt; 2<br>row -&gt; 0,p1,2<br>partition -&gt; p2<br>key -&gt; 5<br>row -&gt; 3,p2,5</p><p>输出结果：<br>5,p2,1<br>3,p2,5<br>5,p1,1<br>0,p1,2  </p><ol start="2"><li>非分区表</li></ol><p>测试数据集：</p><p>0,p1,1<br>0,p1,2<br>5,p1,1<br>6,p2,1<br>3,p2,5<br>5,p2,1</p><p>buckets = 3<br>keys {2}</p><p>key -&gt; 1<br>row -&gt; 0,p1,1<br>key -&gt; 1<br>row -&gt; 5,p1,1<br>key -&gt; 1<br>row -&gt; 6,p2,1<br>key -&gt; 1<br>row -&gt; 5,p2,1<br>key -&gt; 2<br>row -&gt; 0,p1,2<br>key -&gt; 5<br>row -&gt; 3,p2,5</p><p>输出结果：<br>5,p2,1<br>0,p1,2<br>3,p2,5</p><h2 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h2><ol><li>LSM 处理（类似 Leveldb）</li></ol><ul><li>在内存中维护 memtable ，数据直接写入 memtable ，每条数据都有一个 sequenceNumber 。对于相同的 key ，最大 sequenceNumber 的 key 将会覆盖小 sequenceNumber </li><li>当 memtable 已满或 PrepareCommit ，执行刷盘，按 key + sequenceNumber 排序，合并重复的 key ，使用特殊的 format 将数据写入 remote file</li><li>异步线程执行 LSM compactions</li></ul><ol start="2"><li>PrepareCommit</li></ol><ul><li>刷写 memtable</li><li>提交信息：DeleteFiles 、AddFiles</li></ul><ol start="3"><li>Global Commit</li></ol><ul><li>读取旧 snapshots ，如果 checkpoint 已提交，则返回</li><li>读取前一个 snapshot-{i} ，将 buckets 的 deleteFiles 和 addFiles 写入新的 manifest ，生成一个新的 snapshot-${i+1}</li></ul><h2 id="读取流程"><a href="#读取流程" class="headerlink" title="读取流程"></a>读取流程</h2><ol><li>Planner</li></ol><ul><li>读取当前的 snapshot ，根据过滤条件裁剪分区，获得需要读取的 manifests</li><li>为每个 partition 中的每个 bucket ，合并 manifests 中的 deleteFiles 和 addFiles ，生成一个 file list</li></ul><ol start="2"><li>SplitEnumerator</li></ol><ul><li>遍历需要读取的 partitions ，为每个 bucket 生成相应的 SourceSplit</li><li>根据过滤条件过滤出 bucket 中需要读取的 files ，在 SourceSplit 生成一个 LSM 层</li></ul><ol start="3"><li>Runtime Task</li></ol><ul><li>获得要读取的 SourceSplit ，生成 LSM 的 MergeIterator ，并读取数据</li></ul><h2 id="几个关键类图"><a href="#几个关键类图" class="headerlink" title="几个关键类图"></a>几个关键类图</h2><h3 id="FileStore-类图"><a href="#FileStore-类图" class="headerlink" title="FileStore 类图"></a>FileStore 类图</h3><p><img src="FileStore%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="FileStoreSource-类图"><a href="#FileStoreSource-类图" class="headerlink" title="FileStoreSource 类图"></a>FileStoreSource 类图</h3><p><img src="FileStoreSource%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="StoreSink-类图"><a href="#StoreSink-类图" class="headerlink" title="StoreSink 类图"></a>StoreSink 类图</h3><p><img src="StoreSink%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="mergetree-包类图"><a href="#mergetree-包类图" class="headerlink" title="mergetree 包类图"></a>mergetree 包类图</h3><p><img src="mergetree%E5%8C%85%E7%B1%BB%E5%9B%BE.png" alt></p><h3 id="KafkaLogStore类图"><a href="#KafkaLogStore类图" class="headerlink" title="KafkaLogStore类图"></a>KafkaLogStore类图</h3><p>在 flink-table-store/flink-table-store-kafka/src/main/resources/META-INF/services 路径上有一个文件 <code>org.apache.flink.table.factories.Factory</code>  中定义了 <code>KafkaLogStoreFactory</code> ，用 SPI 机制来实现 flink-table-store 的 <code>LogStoreTableFactory</code> 。</p><p><img src="kafkaLogStore%E7%B1%BB%E5%9B%BE.png" alt></p><h4 id="KafkaLogSourceProvider"><a href="#KafkaLogSourceProvider" class="headerlink" title="KafkaLogSourceProvider"></a>KafkaLogSourceProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaLogSourceProvider</span> <span class="keyword">implements</span> <span class="title">LogSourceProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaSource&lt;RowData&gt; <span class="title">createSource</span><span class="params">(@Nullable Map&lt;Integer, Long&gt; bucketOffsets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (consistency) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启 Kafka 读取事务</span></span><br><span class="line">            <span class="keyword">case</span> TRANSACTIONAL:</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Add read committed for transactional consistency mode.</span></span><br><span class="line">                properties.setProperty(ISOLATION_LEVEL_CONFIG, <span class="string">"read_committed"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 满足最终一致性</span></span><br><span class="line">            <span class="keyword">case</span> EVENTUAL:</span><br><span class="line">                <span class="keyword">if</span> (keyDeserializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Can not use EVENTUAL consistency mode for non-pk table."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                properties.setProperty(ISOLATION_LEVEL_CONFIG, <span class="string">"read_uncommitted"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> KafkaSource.&lt;RowData&gt;builder()</span><br><span class="line">                .setTopics(topic)</span><br><span class="line">                .setStartingOffsets(toOffsetsInitializer(bucketOffsets))</span><br><span class="line">                .setProperties(properties)</span><br><span class="line">                .setDeserializer(createDeserializationSchema())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">KafkaRecordDeserializationSchema&lt;RowData&gt; <span class="title">createDeserializationSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> primaryKey.length &gt; <span class="number">0</span></span><br><span class="line">                ? KafkaRecordDeserializationSchema.of(</span><br><span class="line">                        <span class="keyword">new</span> KafkaLogKeyedDeserializationSchema(</span><br><span class="line">                                physicalType, primaryKey, keyDeserializer, valueDeserializer))</span><br><span class="line">                : KafkaRecordDeserializationSchema.valueOnly(valueDeserializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KafkaLogSinkProvider"><a href="#KafkaLogSinkProvider" class="headerlink" title="KafkaLogSinkProvider"></a>KafkaLogSinkProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaLogSinkProvider</span> <span class="keyword">implements</span> <span class="title">LogSinkProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaSink&lt;SinkRecord&gt; <span class="title">createSink</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        KafkaSinkBuilder&lt;SinkRecord&gt; builder = KafkaSink.builder();</span><br><span class="line">        <span class="keyword">switch</span> (consistency) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TRANSACTIONAL:</span><br><span class="line">                builder.setDeliverGuarantee(DeliveryGuarantee.EXACTLY_ONCE)</span><br><span class="line">                        .setTransactionalIdPrefix(<span class="string">"log-store-"</span> + topic);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> EVENTUAL:</span><br><span class="line">                <span class="keyword">if</span> (keySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Can not use EVENTUAL consistency mode for non-pk table."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.setDeliverGuarantee(DeliveryGuarantee.AT_LEAST_ONCE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.setBootstrapServers(</span><br><span class="line">                        properties.get(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG).toString())</span><br><span class="line">                .setKafkaProducerConfig(properties)</span><br><span class="line">                .setRecordSerializer(createSerializationSchema())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;RecordMetadata&gt; <span class="title">createMetadataConsumer</span><span class="params">(WriteCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> meta -&gt; callback.onCompletion(meta.partition(), meta.offset());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="function">KafkaLogSerializationSchema <span class="title">createSerializationSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaLogSerializationSchema(</span><br><span class="line">                topic, keySerializer, valueSerializer, changelogMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="Demo1-%E6%B5%81%E5%BC%8F%E6%95%B0%E4%BB%93-pipeline.png" alt></p><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>MySql CDC : 订单表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">order_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">trans_amount <span class="built_in">BIGINT</span>,</span><br><span class="line">gmt_create <span class="built_in">VARCHAR</span>,</span><br><span class="line">dt <span class="keyword">AS</span> <span class="keyword">DATE_FORMAT</span>(gmt_create, <span class="string">'yyyy-MM-dd'</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (order_id) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="string">'connector'</span> = <span class="string">'mysql-cdc'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'database-name'</span> = <span class="string">'retail'</span>,</span><br><span class="line"><span class="string">'table-name'</span> = <span class="string">'orders'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>MySql CDC : 类目表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> cate_dim (</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (cate_id) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="string">'connector'</span> = <span class="string">'mysql-cdc'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'database-name'</span> = <span class="string">'retail'</span>,</span><br><span class="line"><span class="string">'table-name'</span> = <span class="string">'category'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>Flink 动态表：DWD 订单类目宽表</li></ul><p>创建动态表的 DDL ，不用再指定 connector options ，就像在离线平台创建表一样，只需要指定表字段、主键、分区即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> dwd_orders_cate (</span><br><span class="line">dt <span class="keyword">STRING</span>,</span><br><span class="line">cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    order_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">    trans_amount <span class="built_in">BIGINT</span>,</span><br><span class="line">    gmt_create <span class="built_in">VARCHAR</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (order_id, dt) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (dt);</span><br></pre></td></tr></table></figure><ul><li>Flink 动态表：DWS 类目指标聚合表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dws_cate_day (</span><br><span class="line">dt <span class="keyword">STRING</span>,</span><br><span class="line">parent_cate_id <span class="built_in">VARCHAR</span>,</span><br><span class="line">cate_gmv <span class="built_in">BIGINT</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (parent_cate_id, dt) <span class="keyword">NOT</span> <span class="keyword">ENFORCED</span></span><br><span class="line">)  PARTITIONED <span class="keyword">BY</span> (dt);</span><br></pre></td></tr></table></figure><ul><li>流作业：两张 MySql CDC 表 join 写入 DWD</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">s.dt,</span><br><span class="line">s.parent_cate_id,</span><br><span class="line">s.cate_id,</span><br><span class="line">s.order_id,</span><br><span class="line">s.trans_amount,</span><br><span class="line">s.gmt_create</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`orders`</span> s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`cate_dim`</span> d</span><br><span class="line"><span class="keyword">ON</span> s.cate_id = d.cate_id;</span><br></pre></td></tr></table></figure><ul><li>流作业：DWD 经过聚合写入 DWS</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dws_cate_day</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dt,</span><br><span class="line">parent_cate_id,</span><br><span class="line"><span class="keyword">SUM</span>(trans_amount) <span class="keyword">AS</span> cate_gmv</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> parent_cate_id, dt;</span><br></pre></td></tr></table></figure><h3 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h3><ul><li>实时 OLAP：join 订单宽表和类目指标表，得出订单在这个类目下金额的占比</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">order_id,</span><br><span class="line">trans_amount,</span><br><span class="line"><span class="keyword">CAST</span>(trans_amount <span class="keyword">AS</span> <span class="keyword">DOUBLE</span>) / cate_gmv <span class="keyword">AS</span> ratio</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate d </span><br><span class="line"><span class="keyword">JOIN</span> dws_cate_day s</span><br><span class="line"><span class="keyword">ON</span> d.parent_cate_id = s.parent_cate_id</span><br><span class="line"><span class="keyword">WHERE</span> d.dt = <span class="string">'2021-12-08'</span> <span class="keyword">AND</span> s.dt = <span class="string">'2021-12-08'</span> <span class="comment">-- 分区裁剪</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ratio <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>历史 OLAP：查询订单宽表三天前的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dwd_orders_cate <span class="keyword">WHERE</span> dt = <span class="string">'2021-12-05'</span>;</span><br></pre></td></tr></table></figure><h3 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h3><p><img src="Demo2-%E7%A6%BB%E7%BA%BF%E6%95%B0%E4%BB%93-%E6%95%B0%E6%8D%AE%E8%AE%A2%E6%AD%A3.png" alt></p><ul><li>Batch 数据订正：覆写指定分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE dws_cate_day <span class="keyword">PARTITION</span> (dt = <span class="string">'2021-12-05'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">parent_cate_id,</span><br><span class="line"><span class="keyword">SUM</span>(trans_amount) <span class="keyword">AS</span> cate_gmv</span><br><span class="line"><span class="keyword">FROM</span> dwd_orders_cate</span><br><span class="line"><span class="keyword">WHERE</span> dt = <span class="string">'2021-12-05'</span> <span class="keyword">AND</span> trans_amount &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> parent_cate_id;</span><br></pre></td></tr></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>Flink 要统一存储，就必须要提供高质量的查询服务，如 OLAP 交互查询，这其中包括 Flink SQL 在 OLAP 交互场景下的优化、动态表存储性能和一致性的优化以及构建动态表服务化能力等诸多工作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-188%3A+Introduce+Built-in+Dynamic+Table+Storage" target="_blank" rel="noopener">FLIP-188: Introduce Built-in Dynamic Table Storage</a><br><a href="https://lists.apache.org/thread/tqyn1cro5ohl3c3fkjb1zvxbo03sofn7" target="_blank" rel="noopener">FLIP-188 讨论列表</a><br><a href="https://www.infoq.cn/article/ndur1dzox8g2muuddi56" target="_blank" rel="noopener">Apache Flink 不止于计算，数仓架构或兴起新一轮变革</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态表：全新的 Flink 内置存储。&lt;/p&gt;
&lt;p&gt;Flink Dynamic Table 可以理解为一套流批一体的存储，并无缝对接 Flink SQL 。原来 Flink 只能读写像 Kafka 、 HBase 这样的外部表，现在用一套 Flink SQL 语法就可以像原来创建源表和目标表一样，创建一个 Dynamic Table。流式数仓的分层数据可以全部放到 Flink Dynamic Table 中，通过 Flink SQL 就能实时地串联起整个数仓的分层，既可以对 Dynamic Table 中不同明细层的数据做实时查询和分析，也可以对不同分层做批量 ETL 处理。&lt;/p&gt;
&lt;p&gt;最终，利用 Flink CDC 、Flink SQL 、Flink Dynamic Table 就可以构建一套完整的流式数仓，实现实时离线一体化的体验。&lt;/p&gt;
&lt;p&gt;目前，作为一个独立的开源项目 &lt;a href=&quot;https://github.com/apache/flink-table-store&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flink-table-store&lt;/a&gt; 开发中，该功能预计在 Flink 1.15 中发布。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
      <category term="Flink-table-store" scheme="http://yoursite.com/categories/Flink/Flink-table-store/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-150: Introduce Hybrid Source</title>
    <link href="http://yoursite.com/2022/03/09/Flink-FLIP-150-Introduce-Hybrid-Source/"/>
    <id>http://yoursite.com/2022/03/09/Flink-FLIP-150-Introduce-Hybrid-Source/</id>
    <published>2022-03-09T07:04:50.000Z</published>
    <updated>2022-03-29T18:24:16.458Z</updated>
    
    <content type="html"><![CDATA[<p>在实践中，尤其在需要数据回溯的场景下，许多 Flink 作业需要按顺序从多个数据源中读取数据：</p><ul><li>CDC：用户可以将数据快照存储在 HDFS/S3 ，数据的更新日志存储在数据库 binlog 或 Kafka 中</li><li>机器学习特征回填：当向模型中添加新特性时，需要从历史到现在的原始数据计算该特性。在大多情况下，历史数据和实时数据分别存储在两种不同的存储系统中，如 HDFS 和 Kafka</li></ul><a id="more"></a><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>在过去，如果要读取不同的数据源，用户必须运行两个不同的 Flink 作业：</p><ul><li>基于不同连接器的代码实现，多个源之间的切换很复杂。在切换前控制上游 source 的具体状态，以及下游 source 如何获取上游的状态转换为初始状态。</li><li>目前还没有有效的机制来支持历史数据和实时数据之间平滑的迁移。平滑迁移需要定义切换的规则和时间，以确保数据的完整性和一致性。</li></ul><p>为了平滑的支持对两种数据源的读取，Flink 作业需要先从 HDFS 读取历史数据，然后切换至 Kafka 读取实时数据，所以需要引入一个建立在 <code>FLIP-27</code> 之上的 <code>混合 Source API</code>。</p><p>hybrid source 包含具体 source 列表，hybrid source 按照定义顺序读取每个 source 的数据。当 A source 读取之后，切换到下一个 B souce ：</p><ul><li>当前 source 的 splitEnumerator 提供读取 end position</li><li>下一个 source 支持设置 start position</li><li>用户提供自定义函数：将当前 source 的 end position 转换为下一个 source 的 start position</li></ul><p><img src="HybridSource%E5%A4%A7%E8%87%B4%E7%BB%93%E6%9E%84.png" alt></p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>HybridSource 内部切换示例：<br><img src="HybridSource%E5%86%85%E9%83%A8%E5%88%87%E6%8D%A2%E7%A4%BA%E4%BE%8B.png" alt></p><p>FileSource 串 KafkaSource ，Kafka 从指定位点开始消费：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FileSource&lt;String&gt; fileSource = </span><br><span class="line">FileSource.forRecordStreamFormat(<span class="keyword">new</span> TextLineFormat(), Path.fromLocalFile(testDir)).build();</span><br><span class="line"></span><br><span class="line">KafkaSource&lt;String&gt; KafkaSource =</span><br><span class="line">KafkaSource.&lt;String&gt;builder()</span><br><span class="line">.setBootstrapServers(<span class="string">"localost:9091"</span>)</span><br><span class="line">.setGroupId(<span class="string">"MyGroup"</span>)</span><br><span class="line">.setTopics(Arrays.asList(<span class="string">"quickstart-events"</span>))</span><br><span class="line">.setDeserializer(KafkaRecordDeserializer.valueOnly(StringDeserializer.class))</span><br><span class="line">.setStartingOffsets(OffsetInitializer.earliest())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">HybridSource&lt;String&gt; hybridSource =</span><br><span class="line">HybridSource.builder(fileSource)</span><br><span class="line">.addSource(KafkaSource)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><p>更复杂的示例，从前一个 source 获取 Kafka 的启动位点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HybridSource&lt;String&gt; hybridSource =</span><br><span class="line">HybridSource.&lt;String, StaticFileSplitEnumerator&gt;builder(fileSource)</span><br><span class="line">.addSource(</span><br><span class="line">switchContext -&gt; &#123;</span><br><span class="line">StaticFileSplitEnumerator previousEnumerator = switchContext.getPreviousEnumerator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> timestamp = previousEnumerator.getEndTimestamp();</span><br><span class="line"></span><br><span class="line">OffsetInitializer offsets = OffsetInitializer.timestamp(timestamp);</span><br><span class="line">KafkaSource&lt;String&gt; kafkaSource = </span><br><span class="line">KafkaSource.&lt;String&gt;builder()</span><br><span class="line">.setBootstrapServers(<span class="string">"localost:9091"</span>)</span><br><span class="line">.setGroupId(<span class="string">"MyGroup"</span>)</span><br><span class="line">.setTopics(Arrays.asList(<span class="string">"quickstart-events"</span>))</span><br><span class="line">.setDeserializer(KafkaRecordDeserializer.valueOnly(StringDeserializer.class))</span><br><span class="line">.setStartingOffsets(offsets)</span><br><span class="line">.build();</span><br><span class="line"><span class="keyword">return</span> kafkaSource;</span><br><span class="line">&#125;,</span><br><span class="line">),</span><br><span class="line">Boundedness.CONTINUOUS_UNBOUNDED)</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="HybridSource"><a href="#HybridSource" class="headerlink" title="HybridSource"></a>HybridSource</h3><p>HybridSource 是基于责任链设计模式实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSource</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Source</span>&lt;<span class="title">T</span>, <span class="title">HybridSourceSplit</span>, <span class="title">HybridSourceEnumeratorState</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SourceListEntry&gt; sources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 sources 列表中的最后一个 source 的有界属性，作为 HybirdSource 整体的有界属性</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boundedness <span class="title">getBoundedness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sources.get(sources.size() - <span class="number">1</span>).boundedness;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceReader&lt;T, HybridSourceSplit&gt; <span class="title">createReader</span><span class="params">(SourceReaderContext readerContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HybridSourceReader(readerContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SplitEnumerator&lt;HybridSourceSplit, HybridSourceEnumeratorState&gt; <span class="title">createEnumerator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SplitEnumeratorContext&lt;HybridSourceSplit&gt; enumContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HybridSourceSplitEnumerator(enumContext, sources, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中还包括以下几个函数式接口：</p><ul><li>SourceFactory ：创建具体 source 的工厂类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SourceFactory</span>&lt;<span class="title">T</span>, <span class="title">SourceT</span> <span class="keyword">extends</span> <span class="title">Source</span>&lt;<span class="title">T</span>,?,?&gt;, <span class="title">FromEnumT</span> <span class="keyword">extends</span> <span class="title">SplitEnumerator</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="function">SourceT <span class="title">create</span><span class="params">(SourceSwitchContext&lt;FromEnumT&gt; context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SourceSwitchContext</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SourceSwitchContext</span>&lt;<span class="title">EnumT</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">EnumT <span class="title">getPreviosEnumerator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HybridSourceBuilder </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceBuilder</span>&lt;<span class="title">T</span>, <span class="title">EnumT</span> <span class="keyword">extends</span> <span class="title">SplitEnumerator</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SourceListEntry&gt; sources;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HybridSourceBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接添加 Source 到 sources 中</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"><span class="keyword">public</span> &lt;ToEnumT extends SplitEnumerator, NextSourceT extends Source&lt;T,?,?&gt;&gt; HybridSourceBuilder&lt;T, ToEnumT&gt; </span><br><span class="line">addSource(NextSourceT source) &#123;</span><br><span class="line"><span class="keyword">return</span> addSource(<span class="keyword">new</span> PassthroughSourceFactory&lt;&gt;(source), source.getBoundedness());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 根据 SourceFactory 创建一个 Source ，再添加到 sources 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> &lt;ToEnumT extends SplitEnumerator, NextSourceT extends Source&lt;T,?,?&gt;&gt; HybridSourceBuilder&lt;T, ToEnumT&gt; </span><br><span class="line">addSource(SourceFactory&lt;T, NextSourceT, EnumT&gt; sourceFactory, Boundedness boundedness) &#123;</span><br><span class="line"><span class="keyword">if</span>(!sources.isEmpty()) &#123;</span><br><span class="line">Preconditions.checkArgument(</span><br><span class="line">                    Boundedness.BOUNDED.equals(sources.get(sources.size() - <span class="number">1</span>).boundedness),</span><br><span class="line">                    <span class="string">"All sources except the final source need to be bounded."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClosureCleaner.clean(sourceFactory, ExecutionConfig.ClosureCleanerLevel.RECURSIVE, <span class="keyword">true</span>);</span><br><span class="line">sources.add(SourceListEntry.of(sourceFactory, boundedness));</span><br><span class="line"><span class="keyword">return</span> (HybridSourceBuilder)<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> HybridSource&lt;T&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HybridSource(sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HybridSourceTest</li></ul><p>演示构建一个 HybridSource </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuilderWithSourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     HybridSource.SourceFactory&lt;Integer, Source&lt;Integer, ?, ?&gt;, MockSplitEnumerator&gt;</span><br><span class="line">            sourceFactory =</span><br><span class="line">                     <span class="keyword">new</span> HybridSource.SourceFactory&lt;</span><br><span class="line">                           Integer, Source&lt;Integer, ?, ?&gt;, MockSplitEnumerator&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Source&lt;Integer, ?, ?&gt; create(</span><br><span class="line">                                HybridSource.SourceSwitchContext&lt;MockSplitEnumerator&gt; context) &#123;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 从 SourceSwitchContext 上下文中获取上一个 source 的 SplitEnumerator</span></span><br><span class="line">                            MockSplitEnumerator enumerator = context.getPreviousEnumerator();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 通常从此 SplitEnumerator 中获取上一个 source 读取的 end position</span></span><br><span class="line">                            <span class="comment">// 作为下一 source 的 start position</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> MockBaseSource(<span class="number">1</span>, <span class="number">1</span>, Boundedness.BOUNDED);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">      HybridSource&lt;Integer&gt; source =</span><br><span class="line">            <span class="keyword">new</span> HybridSource.HybridSourceBuilder&lt;Integer, MockSplitEnumerator&gt;()</span><br><span class="line">                    .&lt;MockSplitEnumerator, Source&lt;Integer, ?, ?&gt;&gt;addSource(</span><br><span class="line">                            <span class="keyword">new</span> MockBaseSource(<span class="number">1</span>, <span class="number">1</span>, Boundedness.BOUNDED))</span><br><span class="line">                    .addSource(sourceFactory, Boundedness.BOUNDED)</span><br><span class="line">                    .build();</span><br><span class="line">      assertNotNull(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HybridSourceSplitEnumerator 与 HybridSourceReader 交互流程：<br><img src="HybridSourceSplitEnumerator%E4%B8%8EHybridSourceReader%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B.png" alt></p><h3 id="HybridSourceSplitEnumerator"><a href="#HybridSourceSplitEnumerator" class="headerlink" title="HybridSourceSplitEnumerator"></a>HybridSourceSplitEnumerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceSplitEnumerator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SplitEnumerator</span>&lt;<span class="title">HybridSourceSplit</span>, <span class="title">HybridSourceEnumeratorState</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SplitEnumeratorContext&lt;HybridSourceSplit&gt; context;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HybridSource 处理的 source 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HybridSource.SourceListEntry&gt; sources;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已切换 source 列表，在日常开发中，最好将多个 Map 封装成一个具体的类，面向对象编程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwitchedSources switchedSources = <span class="keyword">new</span> SwitchedSources();</span><br><span class="line">    <span class="comment">// Splits that have been returned due to subtask reset</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, TreeMap&lt;Integer, List&lt;HybridSourceSplit&gt;&gt;&gt; pendingSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录跟踪已读取完成的 SourceReader 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Integer&gt; finishedReaders;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Integer&gt; readerSourceIndex;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当前 source 下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSourceIndex;</span><br><span class="line">    <span class="keyword">private</span> HybridSourceEnumeratorState restoredEnumeratorState;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当前 source 对应的 SplitEnumerator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SplitEnumerator&lt;SourceSplit, Object&gt; currentEnumerator;</span><br><span class="line">    <span class="keyword">private</span> SimpleVersionedSerializer&lt;Object&gt; currentEnumeratorCheckpointSerializer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        switchEnumerator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSourceEvent</span><span class="params">(<span class="keyword">int</span> subtaskId, SourceEvent sourceEvent)</span> </span>&#123;</span><br><span class="line">        LOG.debug(</span><br><span class="line">                <span class="string">"handleSourceEvent &#123;&#125; subtask=&#123;&#125; pendingSplits=&#123;&#125;"</span>,</span><br><span class="line">                sourceEvent,</span><br><span class="line">                subtaskId,</span><br><span class="line">                pendingSplits);</span><br><span class="line">        <span class="keyword">if</span> (sourceEvent <span class="keyword">instanceof</span> SourceReaderFinishedEvent) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收处理 HybridSourceReader 发送的 SourceReaderFinishedEvent</span></span><br><span class="line">            SourceReaderFinishedEvent srfe = (SourceReaderFinishedEvent) sourceEvent;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> subtaskSourceIndex =</span><br><span class="line">                    readerSourceIndex.computeIfAbsent(</span><br><span class="line">                            subtaskId,</span><br><span class="line">                            k -&gt; &#123;</span><br><span class="line">                                <span class="comment">// first time we see reader after cold start or recovery</span></span><br><span class="line">                                LOG.debug(</span><br><span class="line">                                        <span class="string">"New reader subtask=&#123;&#125; sourceIndex=&#123;&#125;"</span>,</span><br><span class="line">                                        subtaskId,</span><br><span class="line">                                        srfe.sourceIndex());</span><br><span class="line">                                <span class="keyword">return</span> srfe.sourceIndex();</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (srfe.sourceIndex() &lt; subtaskSourceIndex) &#123;</span><br><span class="line">                <span class="comment">// duplicate event</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (subtaskSourceIndex &lt; currentSourceIndex) &#123;</span><br><span class="line">            <span class="comment">// source index +1</span></span><br><span class="line">                subtaskSourceIndex++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向 HybridSourceReader 发送 SwitchSourceEvent 事件</span></span><br><span class="line">                sendSwitchSourceEvent(subtaskId, subtaskSourceIndex);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// track readers that have finished processing for current enumerator</span></span><br><span class="line">            finishedReaders.add(subtaskId);</span><br><span class="line">            <span class="keyword">if</span> (finishedReaders.size() == context.currentParallelism()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"All readers finished, ready to switch enumerator!"</span>);</span><br><span class="line">                <span class="keyword">if</span> (currentSourceIndex + <span class="number">1</span> &lt; sources.size()) &#123;</span><br><span class="line">                    switchEnumerator();</span><br><span class="line">                    <span class="comment">// switch all readers prior to sending split assignments</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; context.currentParallelism(); i++) &#123;</span><br><span class="line">                        sendSwitchSourceEvent(i, currentSourceIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentEnumerator.handleSourceEvent(subtaskId, sourceEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSwitchSourceEvent</span><span class="params">(<span class="keyword">int</span> subtaskId, <span class="keyword">int</span> sourceIndex)</span> </span>&#123;</span><br><span class="line">        readerSourceIndex.put(subtaskId, sourceIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定位到下一个 source</span></span><br><span class="line">        Source source = switchedSources.sourceOf(sourceIndex);</span><br><span class="line">        context.sendEventToSourceReader(</span><br><span class="line">                subtaskId,</span><br><span class="line">                <span class="comment">// SwitchSourceEvent 中包括 source 下标、Source 类、是否为最后一个 source</span></span><br><span class="line">                <span class="keyword">new</span> SwitchSourceEvent(sourceIndex, source, sourceIndex &gt;= (sources.size() - <span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// send pending splits, if any</span></span><br><span class="line">        TreeMap&lt;Integer, List&lt;HybridSourceSplit&gt;&gt; splitsBySource = pendingSplits.get(subtaskId);</span><br><span class="line">        <span class="keyword">if</span> (splitsBySource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;HybridSourceSplit&gt; splits = splitsBySource.remove(sourceIndex);</span><br><span class="line">            <span class="keyword">if</span> (splits != <span class="keyword">null</span> &amp;&amp; !splits.isEmpty()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"Restoring splits to subtask=&#123;&#125; &#123;&#125;"</span>, subtaskId, splits);</span><br><span class="line">                context.assignSplits(</span><br><span class="line">                        <span class="keyword">new</span> SplitsAssignment&lt;&gt;(Collections.singletonMap(subtaskId, splits)));</span><br><span class="line">                context.signalNoMoreSplits(subtaskId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (splitsBySource.isEmpty()) &#123;</span><br><span class="line">                pendingSplits.remove(subtaskId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sourceIndex == currentSourceIndex) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"adding reader subtask=&#123;&#125; sourceIndex=&#123;&#125;"</span>, subtaskId, currentSourceIndex);</span><br><span class="line">            currentEnumerator.addReader(subtaskId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HybridSourceReader"><a href="#HybridSourceReader" class="headerlink" title="HybridSourceReader"></a>HybridSourceReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HybridSourceReader</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">HybridSourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SourceReaderContext readerContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已经切换的 source 集合</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwitchedSources switchedSources = <span class="keyword">new</span> SwitchedSources();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的 source 下标，启动时默认为 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentSourceIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标记是否为最后一个 source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFinalSource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的 SourceReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SourceReader&lt;T, ? extends SourceSplit&gt; currentReader;</span><br><span class="line">    <span class="keyword">private</span> CompletableFuture&lt;Void&gt; availabilityFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;HybridSourceSplit&gt; restoredSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> initialSourceIndex = currentSourceIndex;</span><br><span class="line">        <span class="keyword">if</span> (!restoredSplits.isEmpty()) &#123;</span><br><span class="line">            initialSourceIndex = restoredSplits.get(<span class="number">0</span>).sourceIndex() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向 HybridSourceSplitEnumerator 发送 SourceReaderFinishedEvent</span></span><br><span class="line">        readerContext.sendSourceEventToCoordinator(</span><br><span class="line">                <span class="keyword">new</span> SourceReaderFinishedEvent(initialSourceIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentReader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> InputStatus.NOTHING_AVAILABLE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 currentReader 继续拉取数据</span></span><br><span class="line">        InputStatus status = currentReader.pollNext(output);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (status == InputStatus.END_OF_INPUT) &#123;</span><br><span class="line">            <span class="comment">//  当前 source 已读取完毕</span></span><br><span class="line">            LOG.info(</span><br><span class="line">                    <span class="string">"End of input subtask=&#123;&#125; sourceIndex=&#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    currentSourceIndex,</span><br><span class="line">                    currentReader);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向 HybridSourceSplitEnumerator 发送 SourceReaderFinishedEvent</span></span><br><span class="line">            <span class="comment">// 准备激活下一个 source</span></span><br><span class="line">            readerContext.sendSourceEventToCoordinator(</span><br><span class="line">                    <span class="keyword">new</span> SourceReaderFinishedEvent(currentSourceIndex));</span><br><span class="line">            <span class="keyword">if</span> (!isFinalSource) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (availabilityFuture.isDone()) &#123;</span><br><span class="line">                    <span class="comment">// reset to avoid continued polling</span></span><br><span class="line">                    availabilityFuture = <span class="keyword">new</span> CompletableFuture();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> InputStatus.NOTHING_AVAILABLE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSourceEvents</span><span class="params">(SourceEvent sourceEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceEvent <span class="keyword">instanceof</span> SwitchSourceEvent) &#123;</span><br><span class="line">            SwitchSourceEvent sse = (SwitchSourceEvent) sourceEvent;</span><br><span class="line">            LOG.info(</span><br><span class="line">                    <span class="string">"Switch source event: subtask=&#123;&#125; sourceIndex=&#123;&#125; source=&#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    sse.sourceIndex(),</span><br><span class="line">                    sse.source());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收 HybridSourceSplitEnumerator 发送的 SwitchSourceEvent 事件，从中获取 source 的 index 和 Source 类</span></span><br><span class="line">            <span class="comment">// 并加入到 switchedSources</span></span><br><span class="line">            switchedSources.put(sse.sourceIndex(), sse.source());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 currentReader</span></span><br><span class="line">            setCurrentReader(sse.sourceIndex());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断当前 source 是否为 sources 中的最后一个</span></span><br><span class="line">            isFinalSource = sse.isFinalSource();</span><br><span class="line">            <span class="keyword">if</span> (!availabilityFuture.isDone()) &#123;</span><br><span class="line">                <span class="comment">// continue polling</span></span><br><span class="line">                availabilityFuture.complete(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 currentReader 处理其余类型的 SourceEvent</span></span><br><span class="line">            currentReader.handleSourceEvents(sourceEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCurrentReader</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(index != currentSourceIndex);</span><br><span class="line">        <span class="keyword">if</span> (currentReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to close current reader"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.debug(</span><br><span class="line">                    <span class="string">"Reader closed: subtask=&#123;&#125; sourceIndex=&#123;&#125; currentReader=&#123;&#125;"</span>,</span><br><span class="line">                    readerContext.getIndexOfSubtask(),</span><br><span class="line">                    currentSourceIndex,</span><br><span class="line">                    currentReader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Source source = switchedSources.sourceOf(index);</span><br><span class="line">        SourceReader&lt;T, ?&gt; reader;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从 HybridSourceSplitEnumerator 接收到的 Source 类，创建该 Source 的 SourceReader</span></span><br><span class="line">            reader = source.createReader(readerContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed tp create reader"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 启动新的 SourceReader</span></span><br><span class="line">        reader.start();</span><br><span class="line">        currentSourceIndex = index;</span><br><span class="line">        currentReader = reader;</span><br><span class="line">        currentReader</span><br><span class="line">                .isAvailable()</span><br><span class="line">                .whenComplete(</span><br><span class="line">                        (result, ex) -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ex == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                availabilityFuture.complete(result);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                availabilityFuture.completeExceptionally(ex);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">        LOG.debug(</span><br><span class="line">                <span class="string">"Reader started: subtask=&#123;&#125; sourceIndex=&#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">                readerContext.getIndexOfSubtask(),</span><br><span class="line">                currentSourceIndex,</span><br><span class="line">                reader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加存储的 splits</span></span><br><span class="line">        <span class="keyword">if</span> (!restoredSplits.isEmpty()) &#123;</span><br><span class="line">            List&lt;HybridSourceSplit&gt; splits = <span class="keyword">new</span> ArrayList&lt;&gt;(restoredSplits.size());</span><br><span class="line">            Iterator&lt;HybridSourceSplit&gt; it = restoredSplits.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                HybridSourceSplit hybridSplit = it.next();</span><br><span class="line">                <span class="keyword">if</span> (hybridSplit.sourceIndex() == index) &#123;</span><br><span class="line">                    splits.add(hybridSplit);</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            addSplits(splits);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-150%3A+Introduce+Hybrid+Source" target="_blank" rel="noopener">FLIP-150: Introduce Hybrid Source</a><br><a href="https://blog.csdn.net/penriver/article/details/122377396" target="_blank" rel="noopener">Flink–Hybrid Source提出的动机及实现原理介绍</a><br><a href="https://lists.apache.org/thread/j9t31qx1h9w60w2p2j14yqyttox8nxnl" target="_blank" rel="noopener">FLIP-150 讨论列表</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实践中，尤其在需要数据回溯的场景下，许多 Flink 作业需要按顺序从多个数据源中读取数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDC：用户可以将数据快照存储在 HDFS/S3 ，数据的更新日志存储在数据库 binlog 或 Kafka 中&lt;/li&gt;
&lt;li&gt;机器学习特征回填：当向模型中添加新特性时，需要从历史到现在的原始数据计算该特性。在大多情况下，历史数据和实时数据分别存储在两种不同的存储系统中，如 HDFS 和 Kafka&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac单机安装zeppelin</title>
    <link href="http://yoursite.com/2022/03/08/Mac%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85zeppelin/"/>
    <id>http://yoursite.com/2022/03/08/Mac单机安装zeppelin/</id>
    <published>2022-03-08T03:49:23.000Z</published>
    <updated>2022-03-09T06:59:13.746Z</updated>
    
    <content type="html"><![CDATA[<p>Zeppelin 是基于 Web 的交互式数据分析 notebook ，支持 SQL 、 Scala 、 Python 等语言。<br>Zeppelin 通过插件化的 Interpreter 来解析用户提交的代码，并将其转化到对应的后端（计算框架、数据库等）执行，支持 angular 、beam 、 bigquery 、cassandra 、es 、HBase 、 influxdb 、Flink 、Spark 等引擎。</p><p>本机搭建一个 Zeppelin 环境，方便在界面上写简单的代码或 sql 进行测试任务。</p><a id="more"></a><h2 id="本机安装"><a href="#本机安装" class="headerlink" title="本机安装"></a>本机安装</h2><p><a href="https://www.apache.org/dyn/closer.cgi/zeppelin/zeppelin-0.10.1/zeppelin-0.10.1-bin-all.tgz" target="_blank" rel="noopener">zeppelin 安装包下载地址</a></p><ul><li>zeppelin 启动命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh start</span><br></pre></td></tr></table></figure><p>本机会启动一个 ZeppelinServer 进程</p><ul><li>zeppelin 停止命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh stop</span><br></pre></td></tr></table></figure><ul><li>访问入口：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p><img src="Zeppelin%E6%9C%AC%E6%9C%BA%E5%90%AF%E5%8A%A8web%E7%95%8C%E9%9D%A2.png" alt></p><ul><li>也可以以服务形式启动 zeppelin ：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service zepplin start</span><br><span class="line">sudo service zepplin stop</span><br><span class="line">sudo service zepplin restart</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zeppelin-daemon.sh upstart</span><br></pre></td></tr></table></figure><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><ul><li>拉取 docker 镜像：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache/zeppelin:0.10.0</span><br></pre></td></tr></table></figure><ul><li>启动 docker 镜像，–name 指定容器名称，-p 指定暴露的端口：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zeppelin0.10.0 -p 8888:8080 apache/zeppelin:0.10.0</span><br></pre></td></tr></table></figure><h2 id="Flink-with-Zeppelin"><a href="#Flink-with-Zeppelin" class="headerlink" title="Flink with Zeppelin"></a>Flink with Zeppelin</h2><ol><li>启动 flink</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$FLINK_HOME</span></span><br><span class="line"></span><br><span class="line">bin/start-cluster.sh</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在 Zeppelin 界面上设置 FLINK_HOME<br>需要修改以下几个配置项：<br><img src="Zepplin%E8%AE%BE%E7%BD%AEflink_remote%E6%A8%A1%E5%BC%8F.png" alt></p></li><li><p>使用 Zeppelin 自带的 Flink tourial 脚本测试</p></li></ol><ul><li><code>%flink</code>    - 创建 scala environment</li><li><code>%flink.pyflink</code>    - 提供 python environment </li><li><code>%flink.ipyflink</code>    - 提供 ipython environment </li><li><code>%flink.ssql</code>     - 提供 stream sql environment </li><li><code>%flink.bsql</code>    - 提供 batch sql environment </li></ul><p>执行脚本测试，会启动 RemoteInterpreterServer 进程</p><ul><li>Batch WordCount</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%flink</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = benv.fromElements(<span class="string">"hello world"</span>,<span class="string">"hello flink"</span>,<span class="string">"hello hadoop"</span>);</span><br><span class="line">data.flatMap(line =&gt; line.split(<span class="string">"\\s"</span>))</span><br><span class="line">.map(w =&gt; (w,<span class="number">1</span>))</span><br><span class="line">.groupBy(<span class="number">0</span>)</span><br><span class="line">.sum(<span class="number">1</span>)</span><br><span class="line">.print()</span><br></pre></td></tr></table></figure><p><img src="%E6%89%A7%E8%A1%8Cscala_BatchWordCount.png" alt></p><ul><li>Streaming WordCount</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%flink</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = senv.fromElements(<span class="string">"hello world"</span>,<span class="string">"hello flink"</span>,<span class="string">"hello hadoop"</span>)</span><br><span class="line">data.flatMap(line =&gt; line.split(<span class="string">"\\s"</span>))</span><br><span class="line">.map(w =&gt; (w,<span class="number">1</span>))</span><br><span class="line">.keyBy(<span class="number">0</span>)</span><br><span class="line">.sum(<span class="number">1</span>)</span><br><span class="line">.print</span><br></pre></td></tr></table></figure><p><img src="%E6%89%A7%E8%A1%8Cscala_Streaming_WordCount.png" alt><br><img src="%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9Cscala_Streaming_WordCount.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zeppelin.apache.org/docs/latest/quickstart/install.html#downloading-binary-package" target="_blank" rel="noopener">Zeppelin 官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zeppelin 是基于 Web 的交互式数据分析 notebook ，支持 SQL 、 Scala 、 Python 等语言。&lt;br&gt;Zeppelin 通过插件化的 Interpreter 来解析用户提交的代码，并将其转化到对应的后端（计算框架、数据库等）执行，支持 angular 、beam 、 bigquery 、cassandra 、es 、HBase 、 influxdb 、Flink 、Spark 等引擎。&lt;/p&gt;
&lt;p&gt;本机搭建一个 Zeppelin 环境，方便在界面上写简单的代码或 sql 进行测试任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-Hudi-构建流式数据湖平台</title>
    <link href="http://yoursite.com/2022/02/24/Flink-Hudi-%E6%9E%84%E5%BB%BA%E6%B5%81%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%B9%96%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2022/02/24/Flink-Hudi-构建流式数据湖平台/</id>
    <published>2022-02-24T11:49:18.000Z</published>
    <updated>2022-04-05T07:00:35.839Z</updated>
    
    <content type="html"><![CDATA[<p>Flink 和 Hudi 的集成使用。<br>在查询时确认数据的 Schema ，湖存储成本低、灵活性高，非常适用于各种查询场景的中心化存储；<br>基于云服务兴起及成熟的对象存储，在云上构建存算分离的架构；<br>通过快照隔离，实现基础的 ACID 事务；<br>对接不同的查询引擎，实现各自的查询分析场景，实现湖仓一体的架构；</p><a id="more"></a><h2 id="数据集成场景"><a href="#数据集成场景" class="headerlink" title="数据集成场景"></a>数据集成场景</h2><ul><li>Batch Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Batch_Mode.png" alt></p><ul><li>Streaming Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Streaming_Mode.png" alt></p><ul><li>Incremental Mode</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_Incremental_Mode.png" alt></p><ul><li>批流一体解决方案</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90_%E6%89%B9%E6%B5%81%E4%B8%80%E4%BD%93%E6%A8%A1%E5%BC%8F.png" alt></p><p>可以看出，借助 Flink 引擎的批流统一，将增量模式合并到流式模式中，摆脱对 Spark 的依赖，数据集成平台可以逐步实现计算引擎层的批流统一，同时实现批式、流式、增量三种数据集成场景。</p><p>在增量模式上，提供和流模式相当的数据延迟，赋予用户近实时分析的能力，进一步提高效率和降低计算成本：<br>流处理管道面向行处理提供秒级处理延迟，增量管道中面向列处理应该也提供相同的延迟，支持高效的 upsert 和查询能力。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Hudi 是 Hadoop Updates and Incrementals 的简写，是由 Uber 开发并开源的 Data Lakes 解决方案。<br>它的设计目标是基于 Hadoop 兼容的文件系统（如 HDFS、S3 等），重度依赖 Spark 的数据处理能力来实现增量处理和丰富的查询能力。<br>Hudi 可以作为 Source、Sink ，它把数据存储到分布式文件系统（如 HDFS）中。<br>Hudi 有自己的数据表，从而具备将 Hudi 的 Bundle 整合进 Hive、Spark、Presto 等这类引擎中，<br>使得这些引擎可以查询 Hudi 表数据，从而具备 Hudi 所提供的 Snapshot Query 、Incremental Query 、Read Optimized Query 的能力。</p><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><p>Hudi 内部对每个表维护了一个 Timeline ，由一组作用在表上的 Instant 对象组成。Instant 表示在某个时间点对表进行操作达到某一个状态的表示，包含3部分内容：</p><p><img src="Timeline%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><ol><li>Instant Action ： 对 Hudi 表的执行操作类型</li></ol><ul><li>COMMITS ：将一批数据原子写入到表中</li><li>CLEANS ：后台清除表中不再需要的就版本文件</li><li>DELTA_COMMIT ：将一批数据原子写入到 Merge On Read 类型表中，其中部分或所有数据可能只写入到 delta 增量日志文件中</li><li>COMPACTION ：后台使用 Hudi 重组多种文件格式，例如：将更新操作的行式日志文件移动到列式，compaction 在 timeline 上表现为一种特殊的提交</li><li>ROLLBACK ：表示提交或增量提交未成功并回滚，删除写入期间生成的任何文件</li><li>SAVEPOINT ： 将某些文件组标记为”已保存”，cleaner 不会删除这些文件，也有助于恢复某一时间点上的数据表</li></ul><ol start="2"><li>Instant Time ： 表示一个时间戳，从 Instant Action 开始执行的时间顺序单调递增 ；</li></ol><ol start="3"><li>Instant State ：表示在指定的时间点（Instant Time）对 Hudi 表执行操作（Instant Action）后，表所处的状态</li></ol><ul><li>REQUESTED ：已调度但未初始化 </li><li>INFLIGHT ：当前正在执行 </li><li>COMPLETED ：操作执行完成</li></ul><p><img src="Timeline%E5%AE%9E%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子，展示了 Hudi 表上 10:00 至 12:00 之间发生的 upserts ，大约每5分钟一次 ，Hudi Timeline 会记录 COMMIT 元数据，以及在后台进行 CLEANING/COMPACTION 。</p><p>从数据生成到最终到达 Hudi 系统，可能存在延迟，如图中的 07:00、08:00、09:00 生成的数据，数据到达大约延迟了 3、2、1 小时，最终生成 COMIMIT 的时间才是 upsert 的时间。<br>对于数据到达时间（Arrival Time）和事件时间（Event Time）相关的数据延迟性（Latency）和完整性（Completeness）的权衡，Hudi 可以将数据 upsert 到更早时间的 buckets 或 folders 下。<br>通过使用 Timeline 管理，当增量查询 10:00 之后的最新数据时，可以高效的找到 10:00 之后发生过更新的文件，而不必根据延迟时间再去扫描更早时间的文件，比如这里，就不需要扫描 07:00、08:00、09:00 这些时刻对应的文件。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p><img src="Hudi%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>Hudi 采用 MVCC 设计，当执行 COMPACTION 操作时，会合并日志文件和 Base 文件，生成新的文件分片。<br>CLEAN 操作会清理掉不用的文件分片，释放存储空间。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Hudi 会通过记录 key 与分区 path 组成 Hoodie Key ，即 Record Key + Partition Path ， 通过将 Hoodie Key 映射到 file_group/file_id 。<br>一旦记录的第一个版本被写入文件中，对应的 Hoodie Key 就不会再改变了。</p><p>Hudi 提供多种索引来适配不同场景，需要根据具体的数据分布进行取舍，从而达到最佳的写入和查询效率。</p><h4 id="场景一：日志去重"><a href="#场景一：日志去重" class="headerlink" title="场景一：日志去重"></a>场景一：日志去重</h4><p>这种日志数据通常会有一个 create_time 时间戳，底表也是按照时间戳进行分区，最近几个小时或几天的数据需要频繁更新，更老的数据则不需要太多变化。</p><p>这种冷热分离的数据，推荐使用：</p><ol><li><p>Bloom index</p></li><li><p>State index with TTL</p></li><li><p>Hash index</p></li></ol><h4 id="场景二：数据库导出（CDC）"><a href="#场景二：数据库导出（CDC）" class="headerlink" title="场景二：数据库导出（CDC）"></a>场景二：数据库导出（CDC）</h4><p>更新的数据随机分布，没有规律可循，底表数据量通常比较大，新增数据量比较小。</p><ol><li><p>Hash index</p></li><li><p>State index</p></li><li><p>HBase index</p></li></ol><h3 id="Hudi-表类型"><a href="#Hudi-表类型" class="headerlink" title="Hudi 表类型"></a>Hudi 表类型</h3><h4 id="Copy-On-Write"><a href="#Copy-On-Write" class="headerlink" title="Copy On Write"></a>Copy On Write</h4><p>使用专门的列式文件格式存储数据，例如 parquet 格式，更新时保存多版本，并且在写的过程中通过异步的 Merge 来实现重写文件。Copy On Write 表只包含列式格式的 Base 文件，每次执行 COMMIT 操作会生成新版本的 Base 文件，最终执行 COMPACTION 操作时还是会生成列式格式的 Base 文件。所以，Copy On Write 表存在写放大的问题。</p><p><img src="Copy_On_Write_commit_%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子：</p><p>在写入数据时，对现有文件组的 UPDATE 操作会为该文件组生成一个新的文件分片，并标记提交时间。<br>INSERT 操作会分配一个新的文件组，并为该文件组写入其第一个文件分片。</p><p>写入的过程中也可以进行查询（例如：<code>select count(*)</code>），如果查询 COMMIT 为 10:10 之前的数据，<br>会首先检查最新提交的时间线，过滤出每个文件组中除了最新文件分片以外的所有文件分片，即把文件 ID 为 1、2、3 且版本为 10:05 的文件分片查询出来。<br>因此，查询不受任何写入失败/部分写入的影响，只查询已提交的数据。</p><h4 id="Merge-On-Read"><a href="#Merge-On-Read" class="headerlink" title="Merge On Read"></a>Merge On Read</h4><p>使用列式和行式混合存储，列式文件格式如 parquet ，行式文件格式如 avro ，所以 Merge On Read 表存在列式的 Base 文件，也存在行式的 Delta 文件。更新时写入到增量 Delta 文件中，之后通过同步或异步的 COMPACTION 操作，生成新版本的列式文件。</p><p>通常，需要有效的控制增量日志文件的大小，来平衡读放大和写方法的影响。</p><p><img src="Merge_On_Read_commit_%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p>上图为官网给出的例子：</p><pre><code>每个文件分组都对应一个增量日志文件（Delta Log File），COMPACTION 操作在后台定时执行，会把对应的增量日志文件合并到文件分组的 Base 文件中，生成新版本的 Base 文件。</code></pre><p>使用 Read Optimized Query 模式查询 10:10 之后的数据，只能查询到包含版本为 10:05 ，文件 ID 为 1、2、3 的文件；<br>使用 Snapshot Query 模式是可以查询到 10:05 之后的数据的。</p><h2 id="Hudi-Flink-Writer"><a href="#Hudi-Flink-Writer" class="headerlink" title="Hudi Flink Writer"></a>Hudi Flink Writer</h2><ul><li>大致写入流程</li></ul><p><img src="Flink_Writer_%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B.png" alt></p><ul><li>Hudi_On_Flink写入问题及解决办法</li></ul><p><img src="Hudi_On_Flink%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.png" alt></p><ul><li>写入状态机</li></ul><p>在作业刚启动时， Coordinator 会尝试去文件系统上新建表，如果当前表不存在，会在文件目录上写一些 meta 信息，进行表构建。<br>在收到所有 task 的初始化 meta 信息后， Coordinator 会开启一个新的 transaction 。<br>    <img src="Write_State_Machine_%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%AF%E5%8A%A8.png" alt></p><p>当 write task 看到了事务的发起之后，就会解锁当前数据的 flush 操作，writer 是会先在内存中积攒一批数据。<br>当达到内存阈值时，刷盘：<br>    <img src="Write_State_Machine_%E8%BE%BE%E5%88%B0%E5%86%85%E5%AD%98%E9%98%88%E5%80%BC%E5%88%B7%E7%9B%98.png" alt></p><p>当上游的 checkpoint barrier 到达做快照时，刷盘：<br>    <img src="Write_State_Machine_Checkpoint_barrier%E5%88%B0%E8%BE%BE%E4%B9%8B%E6%97%B6%E5%88%B7%E7%9B%98.png" alt></p><p>write task 在每次 flush 之后，都会发送 meta 信息给 Coordinator ，当 Coordinator 收到 checkpoint 的 success 事件之后，会提交对应的事务，并发起新一轮事务。<br>write task 看到新事务后，会解锁下一轮事务的写入。</p><p>遇到错误时，取消刷盘：<br>    <img src="Write_State_Machine_%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E6%97%B6%E5%8F%96%E6%B6%88%E5%88%B7%E7%9B%98.png" alt></p><h2 id="使用用例"><a href="#使用用例" class="headerlink" title="使用用例"></a>使用用例</h2><p>创建 Hudi 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> h_table(</span><br><span class="line"><span class="keyword">uuid</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">ts <span class="built_in">timestamp</span>(<span class="number">3</span>),</span><br><span class="line"><span class="string">`partition`</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">'connetor'</span> = <span class="string">'hudi'</span>,</span><br><span class="line">    <span class="string">'path'</span> = <span class="string">'xxx/h_table'</span>,</span><br><span class="line">    <span class="string">'table.type'</span> = <span class="string">'MERGE_ON_READ'</span>,</span><br><span class="line">    <span class="string">'write.operation'</span> = <span class="string">'upsert'</span>,</span><br><span class="line">    <span class="string">'write.precombine.field'</span> = <span class="string">'ts'</span>,</span><br><span class="line">    <span class="string">'write.payload.class'</span> = <span class="string">'OverwriteWithLatestAvroPayload.class'</span>,</span><br><span class="line">    <span class="string">'write.insert.drop.duplicates'</span> = <span class="string">'false'</span>,</span><br><span class="line">    <span class="string">'write.ignore.failed'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'hoodie.datasource.write.recordkey.field'</span> = <span class="string">'uuid'</span>,</span><br><span class="line">    <span class="string">'hoodie.datasource.write.keygenerator.class'</span> = <span class="string">'SimpleAvroKeyGenerator.class'</span>,   </span><br><span class="line">    <span class="string">'write.bucket_assign.tasks'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'read.streaming.enabled'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'read.streaming.check-interval'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'write.tasks'</span> = <span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'write.batch.size.MB'</span> = <span class="string">'128'</span>,</span><br><span class="line">    <span class="string">'compaction.async.enabled'</span> = <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'compaction.trigger.strategy'</span> = <span class="string">'num_commits'</span>,</span><br><span class="line">    <span class="string">'compaction.delta_commits'</span> = <span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'compaction.delta_seconds'</span> = <span class="string">'3600'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>更改 Hudi 表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> h0 <span class="keyword">rename</span> <span class="keyword">to</span> h0_1;</span><br></pre></td></tr></table></figure><p>插入 Hudi 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hudi_table </span><br><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br></pre></td></tr></table></figure><p>Flink-CDC 整库同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql catalog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">CATALOG</span> mysql</span><br><span class="line"><span class="keyword">WITH</span>(</span><br><span class="line"><span class="string">'type'</span> = <span class="string">'mysql'</span>,</span><br><span class="line"><span class="string">'hostname'</span> = <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'port'</span> = <span class="string">'3306'</span>,</span><br><span class="line"><span class="string">'username'</span> = <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> = <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'default-database'</span> = <span class="string">'benchmark_db'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- hudi catalog</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">CATALOG</span> hudi</span><br><span class="line"><span class="keyword">WITH</span>(</span><br><span class="line"><span class="string">'type'</span> = <span class="string">'hudi'</span>,</span><br><span class="line"><span class="string">'catalog.path'</span> = <span class="string">'oss://hudi-ffa/'</span>,</span><br><span class="line"><span class="string">'default-database'</span> = <span class="string">'db1'</span>,</span><br><span class="line"><span class="string">'oss.endpoint'</span> = <span class="string">'xxx'</span>,</span><br><span class="line"><span class="string">'accessKeyId'</span> = <span class="string">'xxx'</span>,</span><br><span class="line"><span class="string">'accessKeySecret'</span> = <span class="string">'xxx'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行整库、多表同步作业，写入 Hudi, 过程中会自动创建 Hudi 目标表</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">STATEMENT</span> <span class="keyword">SET</span>;</span><br><span class="line">    <span class="comment">-- CDAS 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hudi.cdas_demo</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">DATABASE</span> <span class="string">`mysql`</span>.<span class="string">`benchmark1`</span> <span class="keyword">INCLUDING</span> <span class="keyword">ALL</span> <span class="keyword">TABLES</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- CTAS 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`hudi`</span>.<span class="string">`db1`</span>.<span class="string">`ctas_demo`</span></span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">TABLE</span> <span class="string">`mysql`</span>.<span class="string">`benchmark2`</span>.<span class="string">`sbtest.*`</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询hudi</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> hudi.cdas_demo.sbtest1;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>CDC 数据库数据入仓库，使用 Flink-CDC connector 一次性导入或者消费 Kafka 中的 changelog</li><li>对接 Presto 等 OLAP 引擎，满足近实时分析场景</li><li>增量 ETL ，Hudi 支持存储流计算过程中的行级别变更，通过流读消费变更，可以实现端到端的近实时 ETL 生产</li><li>双流 join 应用场景<br><img src="%E5%8F%8C%E6%B5%81join%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt></li></ol><p>Roadmap：</p><ol><li>流读语义增强</li><li>Record Level Index</li><li>二级索引</li><li>ID-based Schema Evolution</li><li>Metastore Catalog</li><li>支持 Trino Connector</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hudi.apache.org/cn/docs/overview" target="_blank" rel="noopener">Hudi 官网</a><br><a href="https://cloud.tencent.com/developer/article/1694530" target="_blank" rel="noopener">Apache Hudi 架构设计和基本概念</a><br>FFA 2021</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flink 和 Hudi 的集成使用。&lt;br&gt;在查询时确认数据的 Schema ，湖存储成本低、灵活性高，非常适用于各种查询场景的中心化存储；&lt;br&gt;基于云服务兴起及成熟的对象存储，在云上构建存算分离的架构；&lt;br&gt;通过快照隔离，实现基础的 ACID 事务；&lt;br&gt;对接不同的查询引擎，实现各自的查询分析场景，实现湖仓一体的架构；&lt;/p&gt;
    
    </summary>
    
      <category term="DataLake" scheme="http://yoursite.com/categories/DataLake/"/>
    
      <category term="Hudi" scheme="http://yoursite.com/categories/DataLake/Hudi/"/>
    
    
      <category term="Flink-CDC" scheme="http://yoursite.com/tags/Flink-CDC/"/>
    
  </entry>
  
  <entry>
    <title>Test: Docker 拉起 MySqlContainer 唯一数据库实例</title>
    <link href="http://yoursite.com/2022/02/20/Test-Docker-%E6%8B%89%E8%B5%B7-MySqlContainer-%E5%94%AF%E4%B8%80%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2022/02/20/Test-Docker-拉起-MySqlContainer-唯一数据库实例/</id>
    <published>2022-02-20T07:39:32.000Z</published>
    <updated>2022-03-17T09:12:28.082Z</updated>
    
    <content type="html"><![CDATA[<p>我们在进行大数据组件相关测试时，通常需要先在外部部署测试数据源，显得有些麻烦。在代码中拉起 docker container ，创建一个唯一干净的数据源环境，会方便许多。<br>本文以 MySql 数据源为例，说明下在单测中拉起 MySqlContainer ，创建唯一数据库实例，执行 sql 脚本等过程。</p><a id="more"></a><p><img src="MySqlContainer%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%AE%B9%E5%99%A8.png" alt></p><h2 id="MySqlContainer"><a href="#MySqlContainer" class="headerlink" title="MySqlContainer"></a>MySqlContainer</h2><p>需引入以下 maven 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testcontainers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testcontainers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlContainer</span> <span class="keyword">extends</span> <span class="title">JdbcDatabaseContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE = <span class="string">"mysql"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MYSQL_PORT = <span class="number">3306</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MY_CNF_CONFIG_OVERRIDE_PARAM_NAME = <span class="string">"MY_CNF"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SETUP_SQL_PARAM_NAME = <span class="string">"SETUP_SQL"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MYSQL_ROOT_USER = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlContainer</span><span class="params">(MySqlVersion version)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 docker 镜像</span></span><br><span class="line">        <span class="keyword">super</span>(DockerImageName.parse(IMAGE + <span class="string">":"</span> + version.getVersion()));</span><br><span class="line">        <span class="comment">// 设置容器暴露的端口</span></span><br><span class="line">        addExposedPort(MYSQL_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 docker 镜像时，</span></span><br><span class="line"><span class="comment">     * MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="comment">     * MYSQL_ALLOW_EMPTY_PASSWORD</span></span><br><span class="line"><span class="comment">     * MYSQL_RANDOM_ROOT_PASSWORD</span></span><br><span class="line"><span class="comment">     * 三者中必须指定一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// MY_CNF -&gt; docker/server-gtids/my.cnf</span></span><br><span class="line">        optionallyMapResourceParameterAsVolume(</span><br><span class="line">                MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, <span class="string">"/etc/mysql/"</span>, <span class="string">"mysql-default-conf"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SETUP_SQL -&gt; docker/setup.sql</span></span><br><span class="line">        <span class="keyword">if</span> (parameters.containsKey(SETUP_SQL_PARAM_NAME)) &#123;</span><br><span class="line">            optionallyMapResourceParameterAsVolume(</span><br><span class="line">                    SETUP_SQL_PARAM_NAME, <span class="string">"/docker-entrypoint-initdb.d/"</span>, <span class="string">"N/A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEnv(<span class="string">"MYSQL_DATABASE"</span>, databaseName);</span><br><span class="line">        addEnv(<span class="string">"MYSQL_USER"</span>, username);</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !password.isEmpty()) &#123;</span><br><span class="line">            addEnv(<span class="string">"MYSQL_PASSWORD"</span>, password);</span><br><span class="line">            addEnv(<span class="string">"MYSQL_ROOT_PASSWORD"</span>, password);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MYSQL_ROOT_USER.equalsIgnoreCase(username)) &#123;</span><br><span class="line">            addEnv(<span class="string">"MYSQL_ALLOW_EMPTY_PASSWORD"</span>, <span class="string">"yes"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ContainerLaunchException(</span><br><span class="line">                    <span class="string">"Empty password can be used only with the root user"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setStartupAttempts(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJdbcUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJdbcUrl(databaseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJdbcUrl</span><span class="params">(String databaseName)</span> </span>&#123;</span><br><span class="line">        String additionalUrlParams = constructUrlParameters(<span class="string">"?"</span>, <span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"jdbc:mysql://"</span></span><br><span class="line">                + getHost()</span><br><span class="line">                + <span class="string">":"</span></span><br><span class="line">                + getDatabasePort()</span><br><span class="line">                + <span class="string">"/"</span></span><br><span class="line">                + databaseName</span><br><span class="line">                + additionalUrlParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabaseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getTestQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SELECT 1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDatabasePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMappedPort(MYSQL_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">constructUrlForConnection</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">        String url = <span class="keyword">super</span>.constructUrlForConnection(queryString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">"useSSL="</span>)) &#123;</span><br><span class="line">            String separator = url.contains(<span class="string">"?"</span>) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>;</span><br><span class="line">            url = url + separator + <span class="string">"useSSL=false"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">"allowPublicKeyRetrieval="</span>)) &#123;</span><br><span class="line">            url = url + <span class="string">"&amp;allowPublicKeyRetrieval=true"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withConfigurationOverride</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        parameters.put(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withSetupSQL</span><span class="params">(String sqlPath)</span> </span>&#123;</span><br><span class="line">        parameters.put(SETUP_SQL_PARAM_NAME, sqlPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withDatabaseName</span><span class="params">(<span class="keyword">final</span> String databaseName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.databaseName = databaseName;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withUsername</span><span class="params">(<span class="keyword">final</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySqlContainer <span class="title">withPassword</span><span class="params">(<span class="keyword">final</span> String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UniqueDatabase"><a href="#UniqueDatabase" class="headerlink" title="UniqueDatabase"></a>UniqueDatabase</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CREATE_DATABASE_DDL =</span><br><span class="line">            <span class="keyword">new</span> String[]&#123;<span class="string">"CREATE DATABASE $DBNAME$;"</span>, <span class="string">"USE $DBNAME$;"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern COMMENT_PATTERN = Pattern.compile(<span class="string">"^(.*)--.*$"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlContainer container;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String templateName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniqueDatabase</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlContainer container,</span></span></span><br><span class="line"><span class="function"><span class="params">            String databaseName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String username,</span></span></span><br><span class="line"><span class="function"><span class="params">            String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">        String identifier = Integer.toUnsignedString(<span class="keyword">new</span> Random().nextInt(), <span class="number">36</span>);</span><br><span class="line">        <span class="keyword">this</span>.databaseName = databaseName + <span class="string">"_"</span> + identifier;</span><br><span class="line">        <span class="keyword">this</span>.templateName = databaseName;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行ddl脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAndInitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String ddlFile = String.format(<span class="string">"ddl/%s.sql"</span>, templateName);</span><br><span class="line">        <span class="keyword">final</span> URL ddlTestFile = UniqueDatabase.class.getClassLoader().getResource(ddlFile);</span><br><span class="line">        assertNotNull(<span class="string">"Cannot locate "</span> + ddlFile, ddlTestFile);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> (Connection connection =</span><br><span class="line">                         DriverManager.getConnection(</span><br><span class="line">                                 container.getJdbcUrl(), username, password);</span><br><span class="line">                 Statement statement = connection.createStatement()) &#123;</span><br><span class="line">                <span class="keyword">final</span> List&lt;String&gt; statements =</span><br><span class="line">                        Arrays.stream(</span><br><span class="line">                                Stream.concat(</span><br><span class="line">                                        Arrays.stream(CREATE_DATABASE_DDL),</span><br><span class="line">                                        Files.readAllLines(</span><br><span class="line">                                                Paths.get(ddlTestFile.toURI()))</span><br><span class="line">                                                .stream())</span><br><span class="line">                                        .map(String::trim)</span><br><span class="line">                                        .filter(x -&gt; !x.startsWith(<span class="string">"--"</span>) &amp;&amp; !x.isEmpty())</span><br><span class="line">                                        .map(</span><br><span class="line">                                                x -&gt; &#123;</span><br><span class="line">                                                    <span class="keyword">final</span> Matcher m =</span><br><span class="line">                                                            COMMENT_PATTERN.matcher(x);</span><br><span class="line">                                                    <span class="keyword">return</span> m.matches() ? m.group(<span class="number">1</span>) : x;</span><br><span class="line">                                                &#125;)</span><br><span class="line">                                        .map(<span class="keyword">this</span>::convertSQL)</span><br><span class="line">                                        .collect(Collectors.joining(<span class="string">"\n"</span>))</span><br><span class="line">                                        .split(<span class="string">";"</span>))</span><br><span class="line">                                .map(x -&gt; x.replace(<span class="string">"$$"</span>, <span class="string">";"</span>))</span><br><span class="line">                                .collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">for</span> (String stmt : statements) &#123;</span><br><span class="line">                    statement.execute(stmt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getJdbcConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(container.getJdbcUrl(databaseName), username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertSQL</span><span class="params">(<span class="keyword">final</span> String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sql.replace(<span class="string">"$DBNAME$"</span>, databaseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container.getHost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDatabasePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container.getDatabasePort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabaseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySqlVersion"><a href="#MySqlVersion" class="headerlink" title="MySqlVersion"></a>MySqlVersion</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * MySql version enum. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MySqlVersion &#123;</span><br><span class="line">    V5_5(<span class="string">"5.5"</span>),</span><br><span class="line">    V5_6(<span class="string">"5.6"</span>),</span><br><span class="line">    V5_7(<span class="string">"5.7"</span>),</span><br><span class="line">    V8_0(<span class="string">"8.0"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    MySqlVersion(String version) &#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MySqlVersion&#123;"</span> + <span class="string">"version='"</span> + version + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySqlSourceTest"><a href="#MySqlSourceTest" class="headerlink" title="MySqlSourceTest"></a>MySqlSourceTest</h2><p>首先，安装并启动 docker 服务进程，再执行以下单测用例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ververica.cdc.connectors.mysql.matty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.ververica.cdc.connectors.mysql.testutils.MySqlVersion;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.testcontainers.containers.output.Slf4jLogConsumer;</span><br><span class="line"><span class="keyword">import</span> org.testcontainers.lifecycle.Startables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(MySqlSourceTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String databaseNamePrefix = <span class="string">"customer"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String tableName = <span class="string">"customers"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String username = <span class="string">"mysqluser"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String password = <span class="string">"mysqlpw"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MySqlContainer MYSQL_CONTAINER = createMySqlContainer(MySqlVersion.V5_7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, databaseNamePrefix, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDdlAndDml</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"初始化数据库表，并插入21条数据："</span>);</span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        query();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"操作数据库表并查询："</span>);</span><br><span class="line">        dml();</span><br><span class="line">        query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 MySqlContainer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> version MySql 版本枚举</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MySqlContainer 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MySqlContainer <span class="title">createMySqlContainer</span><span class="params">(MySqlVersion version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MySqlContainer)</span><br><span class="line">                <span class="keyword">new</span> MySqlContainer(version)</span><br><span class="line">                        .withConfigurationOverride(<span class="string">"docker/server-gtids/my.cnf"</span>)</span><br><span class="line">                        .withSetupSQL(<span class="string">"docker/setup.sql"</span>)</span><br><span class="line">                        .withDatabaseName(<span class="string">"flink-test"</span>)</span><br><span class="line">                        .withUsername(<span class="string">"flinkuser"</span>)</span><br><span class="line">                        .withPassword(<span class="string">"flinkpw"</span>)</span><br><span class="line">                        .withLogConsumer(<span class="keyword">new</span> Slf4jLogConsumer(LOG));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 MySqlContainer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startContainers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Starting containers..."</span>);</span><br><span class="line">        <span class="comment">// testcontainers 包中的启动类</span></span><br><span class="line">        Startables.deepStart(Stream.of(MYSQL_CONTAINER)).join();</span><br><span class="line">        LOG.info(<span class="string">"Containers are started."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dml</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = customerDatabase.getJdbcConnection();</span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        statement.addBatch(<span class="string">"UPDATE "</span> + tableName + <span class="string">" SET address = 'Hangzhou' where id = 103"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"DELETE FROM "</span> + tableName + <span class="string">" where id = 102"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"INSERT INTO "</span> + tableName + <span class="string">" VALUES(102, 'user_2','Beijing','123567891234')"</span>);</span><br><span class="line">        statement.addBatch(<span class="string">"UPDATE "</span> + tableName + <span class="string">" SET address = 'Nanjing' where id = 103"</span>);</span><br><span class="line">        statement.executeBatch();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = customerDatabase.getJdbcConnection();</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(</span><br><span class="line">                String.format(<span class="string">"SELECT * FROM %s"</span>, tableName));</span><br><span class="line">        JSONArray resultArray = resultSetToJson(resultSet);</span><br><span class="line">        System.out.println(resultArray);</span><br><span class="line"></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JSONArray <span class="title">resultSetToJson</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException, JSONException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JSONArray array = <span class="keyword">new</span> JSONArray();</span><br><span class="line"></span><br><span class="line">        ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">        <span class="keyword">int</span> columnCount = metaData.getColumnCount();</span><br><span class="line">        <span class="comment">// 遍历ResultSet中的每条数据</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            JSONObject jsonObj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="comment">// 遍历每一列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                String value;</span><br><span class="line">                String columnName = metaData.getColumnLabel(i);</span><br><span class="line">                <span class="keyword">if</span> (rs.getString(columnName) != <span class="keyword">null</span> &amp;&amp; !rs.getString(columnName).equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                    value = <span class="keyword">new</span> String(rs.getBytes(columnName), <span class="string">"UTF-8"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    value = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                jsonObj.put(columnName, value);</span><br><span class="line">            &#125;</span><br><span class="line">            array.add(jsonObj);</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">初始化数据库表，并插入21条数据：</span><br><span class="line">[</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_1"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"101"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_2"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"102"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_3"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"103"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_4"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"109"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_5"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"110"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_6"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"111"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_7"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"118"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_8"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"121"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_9"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"123"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_10"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1009"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_11"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1010"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_12"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1011"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_13"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1012"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_14"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1013"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_15"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1014"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_16"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1015"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_17"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1016"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_18"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1017"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_19"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1018"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_20"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1019"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_21"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"2000"</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">操作数据库表并查询：</span><br><span class="line">[</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_1"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"101"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Beijing"</span>,<span class="attr">"name"</span>:<span class="string">"user_2"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"102"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Nanjing"</span>,<span class="attr">"name"</span>:<span class="string">"user_3"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"103"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_4"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"109"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_5"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"110"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_6"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"111"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_7"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"118"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_8"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"121"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_9"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"123"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_10"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1009"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_11"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1010"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_12"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1011"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_13"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1012"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_14"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1013"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_15"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1014"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_16"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1015"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_17"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1016"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_18"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1017"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_19"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1018"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_20"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"1019"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"address"</span>:<span class="string">"Shanghai"</span>,<span class="attr">"name"</span>:<span class="string">"user_21"</span>,<span class="attr">"phone_number"</span>:<span class="string">"123567891234"</span>,<span class="attr">"id"</span>:<span class="string">"2000"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以下文件需要作为 resource 加到测试类所在的 classpath 中。</p><ul><li><p>my.cnf :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">secure-file-priv=/var/lib/mysql</span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"># ----------------------------------------------</span><br><span class="line"># Enable the binlog for replication &amp; CDC</span><br><span class="line"># ----------------------------------------------</span><br><span class="line">server-id         = 223344</span><br><span class="line">log_bin           = mysql-bin</span><br><span class="line">expire_logs_days  = 1</span><br><span class="line">binlog_format     = row</span><br><span class="line"></span><br><span class="line"># enable gtid mode</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br></pre></td></tr></table></figure></li><li><p>setup.sql :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1) 'flinkuser' - all privileges required by the snapshot reader AND binlog reader (used for testing) </span></span><br><span class="line"><span class="comment">-- 2) 'mysqluser' - all privileges</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, RELOAD, <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>, <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>, <span class="keyword">LOCK</span> <span class="keyword">TABLES</span>  <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'flinkuser'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'mysqluser'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mysqlpw'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'mysqluser'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- DATABASE:  emptydb</span></span><br><span class="line"><span class="comment">-- ----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> emptydb;</span><br></pre></td></tr></table></figure></li><li><p>customer.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'flink'</span>,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">"user_1"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">"user_2"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">"user_3"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">"user_4"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">"user_5"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">111</span>,<span class="string">"user_6"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">118</span>,<span class="string">"user_7"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">121</span>,<span class="string">"user_8"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">123</span>,<span class="string">"user_9"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1009</span>,<span class="string">"user_10"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1010</span>,<span class="string">"user_11"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1011</span>,<span class="string">"user_12"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1012</span>,<span class="string">"user_13"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1013</span>,<span class="string">"user_14"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1014</span>,<span class="string">"user_15"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1015</span>,<span class="string">"user_16"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1016</span>,<span class="string">"user_17"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1017</span>,<span class="string">"user_18"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1018</span>,<span class="string">"user_19"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1019</span>,<span class="string">"user_20"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">2000</span>,<span class="string">"user_21"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/ververica/flink-cdc-connectors.git" target="_blank" rel="noopener">flink-cdc-connector</a><br><code>com.ververica.cdc.connectors.mysql.testutils</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在进行大数据组件相关测试时，通常需要先在外部部署测试数据源，显得有些麻烦。在代码中拉起 docker container ，创建一个唯一干净的数据源环境，会方便许多。&lt;br&gt;本文以 MySql 数据源为例，说明下在单测中拉起 MySqlContainer ，创建唯一数据库实例，执行 sql 脚本等过程。&lt;/p&gt;
    
    </summary>
    
      <category term="junit" scheme="http://yoursite.com/categories/junit/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-CDC-增量快照读取算法</title>
    <link href="http://yoursite.com/2022/02/17/Flink-CDC-%E5%A2%9E%E9%87%8F%E5%BF%AB%E7%85%A7%E8%AF%BB%E5%8F%96%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2022/02/17/Flink-CDC-增量快照读取算法/</id>
    <published>2022-02-17T05:51:03.000Z</published>
    <updated>2022-02-28T07:08:37.272Z</updated>
    
    <content type="html"><![CDATA[<p>Flink CDC 2.0 的设计方案，借鉴了 Netflix 的 DBLog paper 实现全程无锁，并基于 Flink FLIP-27 Source 实现水平扩展，并支持全量阶段 checkpoint 。</p><a id="more"></a><h2 id="1-x-集成-Debezium"><a href="#1-x-集成-Debezium" class="headerlink" title="1.x 集成 Debezium"></a>1.x 集成 Debezium</h2><p>Flink CDC 1.x 是通过集成 Debezium 引擎来采集数据，支持全量 + 增量的模式，保证所有数据的一致性。存在以下痛点：</p><ol><li>一致性通过加锁保证<br>Debezium 在保证数据一致性时，需要对读取的库或表加锁，全局锁可能导致数据库 hang 住，表级锁会锁住表读</li><li>不支持水平扩展<br>Debezium 为单机节点，在全量读取阶段，如果表非常大，读取时长可能达到小时级</li><li>全量读取阶段不支持 checkpoint<br>CDC 读取分为两个阶段，全量和增量，全量读取阶段不支持 checkpoint，fail 之后则需要重新读取。</li></ol><p><img src="Debezium%E5%85%A8%E5%B1%80%E9%94%81%E7%A4%BA%E4%BE%8B.png" alt></p><ul><li><p>全局锁<br>首先是获取一个锁，然后去开启可重复读事务。锁住操作是读取 binlog 的起始位置和当前表的 schema 。这样做的目的是保证 binlog 的起始位置和读取到的当前 schema 可以对应上，因为表的 schema 是会变的，比如增加列或删除列。在读取这两个信息后， SnapshotReader 会在可重复读事务里读取全量数据，在全量数据读取完成之后，会启动 BinlogReader 从读取的 binlog 起始位置开始增量读取，从而保证全量数据 + 增量数据的无缝衔接。</p></li><li><p>表锁<br>表锁是全局锁的退化版，因为全局锁的权限比较高，在某些场景下用户只能得到表锁。表锁锁的时间会更长，表锁提前释放了可重复读的事务默认会提交，所以锁需要等到全量数据读完之后才能释放。</p></li></ul><p><code>FLUSH TABLES WITH READ LOCK</code></p><ul><li>该命令等待所有正在进行的 update 完成，同时阻止所有新来的 update</li><li>该命令执行成功前必须等到所有正在运行的 select 完成，更换的情况是，在等待正在运行 select 完成时，DB 实际上处于不可用状态，即使是新加入的 select 也会被阻止，这是 MySQL Query Cache 机制</li><li>该命令阻止其他事务 commit</li></ul><h2 id="单-Chunk-读一致性"><a href="#单-Chunk-读一致性" class="headerlink" title="单 Chunk 读一致性"></a>单 Chunk 读一致性</h2><p>与 DBLog 不同，Flink CDC 2.0 没有维护额外的表，而是在 select 数据前后使用 <code>SHOW MASTER STATUS</code> 获取 binlog offset ，这种方式避免了侵入源端系统。</p><p>快照读取逻辑：<br><img src="Flink-CDC-Chunk%E5%86%85%E5%BF%AB%E7%85%A7%E8%AF%BB%E5%8F%96%E9%80%BB%E8%BE%91.png" alt></p><ol><li><code>SHOW MASTER STATUS</code> 获取 lw，插入队列</li><li>读取该分片内的记录，插入记录</li><li><code>SHOW MASTER STATUS</code> 获取 hw，插入队列</li><li>判断 lw 和 hw 之间是否有增量变更</li><li>如果没有变更，队列中插入 BINLOG_END 记录</li><li>否则读取 [lw,hw] 之间的 binlog 并插入队列，最后一条记录为 BINLOG_END</li></ol><p>修正队列里的数据，获取该分片 point-in-time 为 hw 的数据：<br><img src="Flink-CDC-Chunk_upsertBinlog%E9%80%BB%E8%BE%91.png" alt></p><ol><li>将 lw 加入到 normalizedBinlogRecords</li><li>遍历 binlogRecords 中的记录</li><li>对于删除记录，将其从 snapshotRecords 删除</li><li>对于更新记录，将记录中的 After 作为 READ 记录 map.put 到 snapshotRecords</li><li>对于创建记录，使用 map.put 到 snapshotRecords</li><li>将 snapshotRecords.values 加入到 normalizedBinlogRecords</li><li>将 hw 加入到 normalizedBinlogRecords</li></ol><h2 id="增量阶段"><a href="#增量阶段" class="headerlink" title="增量阶段"></a>增量阶段</h2><p>单 Chunk 读取是在多个 <code>SourceReader</code> 上并发执行，互不影响。假设一个任务同步的三张表 t1/t2/t3 被切分成 6 个分片，由于并发执行，其高低水位在 binlog 上的位置可能如下：</p><p><img src="Flink-CDC-%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%8F%96Chunk.png" alt></p><p>可以看出，t1.split1 和 t2.split1 读取的 binlog 范围有交叉，都读取了 [lw2.1,hw1.1] 之间的 binlog，t3.split2 可以早于 t3.split1 执行。这些交叉或者乱序并不影响正确性，因为全量阶段 MysqlSourceReader 会将每个 split 的 hw 汇报给 MysqlSourceEnumerator ，在增量阶段通过这些 hw 信息来保证 binlog 处理不丢失。</p><p>当 MysqlSourceEnumerator 把所有 split 的 hw 收集齐之后，会创建一个 binlog split ， 该分片包含了需要读取 binlog 的起始位置（所有分片 hw 的最小值）和所有分片的 hw 信息。MysqlSourceEnumerator 把该 binlog 分片 assign 给一个 MysqlSourceReader ，任务从全量阶段转为增量阶段。</p><p>MysqlSourceReader 在读取 binlog 数据之后，通过以下条件判断记录是否应该发送给下游：</p><ol><li>判断当前记录已经处于所在表的最大 hw ，即该表已经进入 Pure Binlog Phase ，对于这样的 binlog 记录，不需要进行比较，直接发送给下游</li><li>当一个 binlog 记录属于一个分片的主键范围时，如果该记录在这个分片的 hw 之后，则该记录应该发送给下游</li></ol><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><p>MySql cdc 类图关系如下：</p><p><img src="MySql-cdc%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB.png" alt></p><h3 id="MySqlSourceReader"><a href="#MySqlSourceReader" class="headerlink" title="MySqlSourceReader"></a>MySqlSourceReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceReader</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">SingleThreadMultiplexSourceReaderBase</span>&lt;</span></span><br><span class="line"><span class="class">                <span class="title">SourceRecord</span>, <span class="title">T</span>, <span class="title">MySqlSplit</span>, <span class="title">MySqlSplitState</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MySqlSource 配置类，</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlSourceConfig sourceConfig;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 存放结束未确认的 snapshot splits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MySqlSnapshotSplit&gt; finishedUnackedSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放未完成的 binlog splits</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MySqlBinlogSplit&gt; uncompletedBinlogSplits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * tm 中对应的 sub task id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> subtaskId;           </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 启动 SourceReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getNumberOfCurrentlyAssignedSplits() == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 当前状态后端里存储的 Splits 为空，则通过 SourceOperator 中的方法向 SourceCoordinator 的 SplitEnumerator 组件发送 RequestSplitEvent 事件</span></span><br><span class="line">            context.sendSplitRequest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询当前状态后端里存储的 Splits</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfCurrentlyAssignedSplits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.splitStates.size();</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * addSplits -&gt; initializedState -&gt; super.addSplits -&gt; </span></span><br><span class="line"><span class="comment">     * createSplitFetcher -&gt; fetcher.addSplits() 加入任务双端队列中 -&gt; fetcher.start() 提交 fetcher 线程到线程池     </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;MySqlSplit&gt; splits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// restore for finishedUnackedSplits， 循环处理，查找出还没有完成处理的 splits</span></span><br><span class="line">        List&lt;MySqlSplit&gt; unfinishedSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MySqlSplit split : splits) &#123;</span><br><span class="line">            <span class="keyword">if</span> (split.isSnapshotSplit()) &#123;</span><br><span class="line">                MySqlSnapshotSplit snapshotSplit = split.asSnapshotSplit();</span><br><span class="line">                <span class="keyword">if</span> (snapshotSplit.isSnapshotReadFinished()) &#123;</span><br><span class="line">                    finishedUnackedSplits.put(snapshotSplit.splitId(), snapshotSplit);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    unfinishedSplits.add(split);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// the binlog split is uncompleted</span></span><br><span class="line">                <span class="keyword">if</span> (!split.asBinlogSplit().isCompletedSplit()) &#123;</span><br><span class="line">                    uncompletedBinlogSplits.put(split.splitId(), split.asBinlogSplit());</span><br><span class="line">                    requestBinlogSplitMetaIfNeeded(split.asBinlogSplit());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    uncompletedBinlogSplits.remove(split.splitId());</span><br><span class="line">                    MySqlBinlogSplit mySqlBinlogSplit =</span><br><span class="line">                            discoverTableSchemasForBinlogSplit(split.asBinlogSplit());</span><br><span class="line">                    unfinishedSplits.add(mySqlBinlogSplit);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// notify split enumerator again about the finished unacked snapshot splits</span></span><br><span class="line">        reportFinishedSnapshotSplitsIfNeed();</span><br><span class="line">        <span class="comment">// add all un-finished splits (including binlog split) to SourceReaderBase</span></span><br><span class="line">        <span class="keyword">super</span>.addSplits(unfinishedSplits);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 构建 MySqlSplit 对应的 MySqlSplitState</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MySqlSplitState <span class="title">initializedState</span><span class="params">(MySqlSplit split)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (split.isSnapshotSplit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlSnapshotSplitState(split.asSnapshotSplit());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlBinlogSplitState(split.asBinlogSplit());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每次做 checkpoint 时，记录 MySqlSplit 列表状态后端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MySqlSplit&gt; <span class="title">snapshotState</span><span class="params">(<span class="keyword">long</span> checkpointId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// unfinished splits</span></span><br><span class="line">        List&lt;MySqlSplit&gt; stateSplits = <span class="keyword">super</span>.snapshotState(checkpointId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add finished snapshot splits that didn't receive ack yet</span></span><br><span class="line">        stateSplits.addAll(finishedUnackedSplits.values());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add binlog splits who are uncompleted</span></span><br><span class="line">        stateSplits.addAll(uncompletedBinlogSplits.values());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stateSplits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SourceReaderBase：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceReaderBase</span>&lt;<span class="title">E</span>, <span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">SplitStateT</span>&gt; <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父类 SourceReaderBase 中的拉取数据方法</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput&lt;T&gt; output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        RecordsWithSplitIds&lt;E&gt; recordsWithSplitId = <span class="keyword">this</span>.currentFetch;</span><br><span class="line">        <span class="keyword">if</span> (recordsWithSplitId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            recordsWithSplitId = <span class="keyword">this</span>.getNextFetch(output);</span><br><span class="line">            <span class="keyword">if</span> (recordsWithSplitId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.trace(<span class="keyword">this</span>.finishedOrAvailableLater());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 从 split 中读取出 record</span></span><br><span class="line">            E record = recordsWithSplitId.nextRecordFromSplit();</span><br><span class="line">            <span class="keyword">if</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过 MySqlRecordEmitter 将数据传递到外部 SourceOutput ，从 output.collect 中获取 SourceRecord，写入下游存储系统</span></span><br><span class="line">                <span class="keyword">this</span>.recordEmitter.emitRecord(record, <span class="keyword">this</span>.currentSplitOutput, <span class="keyword">this</span>.currentSplitContext.state);</span><br><span class="line">                LOG.trace(<span class="string">"Emitted record: &#123;&#125;"</span>, record);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.trace(InputStatus.MORE_AVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.moveToNextSplit(recordsWithSplitId, output));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pollNext(output);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父类 SourceReaderBase 中 addSplits 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;SplitT&gt; splits)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Adding split(s) to reader: &#123;&#125;"</span>, splits);</span><br><span class="line">        splits.forEach((s) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录每一个 splitId 对应的 SplitState ，调用子类的 initializedState(s) 构建 SplitState ，存储在 splitStates map 中</span></span><br><span class="line">            SourceReaderBase.SplitContext var10000 = (SourceReaderBase.SplitContext)<span class="keyword">this</span>.splitStates.put(s.splitId(), <span class="keyword">new</span> SourceReaderBase.SplitContext(s.splitId(), <span class="keyword">this</span>.initializedState(s)));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.splitFetcherManager.addSplits(splits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 关闭 reader 操作，即关掉 splitFetcherManager 中线程池管理的 SplitFetcher 线程及关闭该线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Closing Source Reader."</span>);</span><br><span class="line">        <span class="keyword">this</span>.splitFetcherManager.close(<span class="keyword">this</span>.options.sourceReaderCloseTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MySqlSourceReaderTest"><a href="#MySqlSourceReaderTest" class="headerlink" title="MySqlSourceReaderTest"></a>MySqlSourceReaderTest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSourceReaderTest</span> <span class="keyword">extends</span> <span class="title">MySqlSourceTestBase</span> </span>&#123;</span><br><span class="line"><span class="comment">// 为每次运行JUnit测试创建并填充MySQL数据库的唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, <span class="string">"customer"</span>, <span class="string">"mysqluser"</span>, <span class="string">"mysqlpw"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试binlog读取故障恢复流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBinlogReadFailoverCrossTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建数据库，并执行 sql 脚本</span></span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        <span class="comment">// MySqlSource 相关配置项，读表 customers</span></span><br><span class="line">        <span class="keyword">final</span> MySqlSourceConfig sourceConfig = getConfig(<span class="keyword">new</span> String[] &#123;<span class="string">"customers"</span>&#125;);</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">final</span> DataType dataType =</span><br><span class="line">                DataTypes.ROW(</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"id"</span>, DataTypes.BIGINT()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"name"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"address"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"phone_number"</span>, DataTypes.STRING()));</span><br><span class="line">        MySqlSplit binlogSplit;</span><br><span class="line">        <span class="keyword">try</span> (MySqlConnection jdbc =</span><br><span class="line">                DebeziumUtils.createMySqlConnection(sourceConfig.getDbzConfiguration())) &#123;</span><br><span class="line">            Map&lt;TableId, TableChanges.TableChange&gt; tableSchemas =</span><br><span class="line">                    TableDiscoveryUtils.discoverCapturedTableSchemas(sourceConfig, jdbc);</span><br><span class="line">            <span class="comment">// 创建一个 MySqlBinlogSplit ，`SHOW MASTER STATUS` 查询出 binlog offset ，并设置 tableSchema</span></span><br><span class="line">            binlogSplit =</span><br><span class="line">                    MySqlBinlogSplit.fillTableSchemas(</span><br><span class="line">                            createBinlogSplit(sourceConfig).asBinlogSplit(), tableSchemas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 MysqlSourceReader ，分别创建 elementsQueue、MySqlRecordEmitter 、MySqlSplitReader</span></span><br><span class="line">        MySqlSourceReader&lt;SourceRecord&gt; reader = createReader(sourceConfig);</span><br><span class="line">        reader.start();</span><br><span class="line">        <span class="comment">// 模拟分配 MySqlBinlogSplit 给 MysqlSourceReader -&gt; SplitFetcherManager -&gt; MySqlSplitReader</span></span><br><span class="line">        reader.addSplits(Arrays.asList(binlogSplit));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-1: make 6 change events in one MySQL transaction</span></span><br><span class="line">        TableId tableId = binlogSplit.getTableSchemas().keySet().iterator().next();</span><br><span class="line">        makeBinlogEventsInOneTransaction(sourceConfig, tableId.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-2: fetch the first 2 records belong to the MySQL transaction</span></span><br><span class="line">        String[] expectedRecords =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"-U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Hangzhou, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="comment">// the 2 records are produced by 1 operations</span></span><br><span class="line">        List&lt;String&gt; actualRecords = consumeRecords(reader, dataType, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        assertEqualsInOrder(Arrays.asList(expectedRecords), actualRecords);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储 binlog split state ，将 MySqlBinlogSplit 整体序列化写入 state</span></span><br><span class="line">        List&lt;MySqlSplit&gt; splitsState = reader.snapshotState(<span class="number">1L</span>);</span><br><span class="line">        <span class="comment">// check the binlog split state</span></span><br><span class="line">        assertEquals(<span class="number">1</span>, splitsState.size());</span><br><span class="line">        <span class="comment">// 关闭 reader</span></span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-3: mock failover from a restored state</span></span><br><span class="line">        MySqlSourceReader&lt;SourceRecord&gt; restartReader = createReader(sourceConfig);</span><br><span class="line">        restartReader.start();</span><br><span class="line">        <span class="comment">// 模拟从 splitsState 恢复，读取存储的 split</span></span><br><span class="line">        restartReader.addSplits(splitsState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-4: fetch the rest 4 records belong to the MySQL transaction</span></span><br><span class="line">        String[] expectedRestRecords =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"-D[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Shanghai, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="comment">// the 4 records are produced by 3 operations</span></span><br><span class="line">        List&lt;String&gt; restRecords = consumeRecords(restartReader, dataType, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        assertEqualsInOrder(Arrays.asList(expectedRestRecords), restRecords);</span><br><span class="line">        restartReader.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 binlog split</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSplit <span class="title">createBinlogSplit</span><span class="params">(MySqlSourceConfig sourceConfig)</span> </span>&#123;</span><br><span class="line">        MySqlBinlogSplitAssigner binlogSplitAssigner = <span class="keyword">new</span> MySqlBinlogSplitAssigner(sourceConfig);</span><br><span class="line">        binlogSplitAssigner.open();</span><br><span class="line">        <span class="keyword">return</span> binlogSplitAssigner.getNext().get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建 MysqlSourceReader ，分别创建阻塞队列、MySqlRecordEmitter、MySqlSplitReader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSourceReader&lt;SourceRecord&gt; <span class="title">createReader</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceConfig configuration, SourceReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FutureCompletingBlockingQueue&lt;RecordsWithSplitIds&lt;SourceRecord&gt;&gt; elementsQueue =</span><br><span class="line">                <span class="keyword">new</span> FutureCompletingBlockingQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> MySqlRecordEmitter&lt;SourceRecord&gt; recordEmitter =</span><br><span class="line">                <span class="keyword">new</span> MySqlRecordEmitter&lt;&gt;(</span><br><span class="line">                        <span class="keyword">new</span> ForwardDeserializeSchema(),</span><br><span class="line">                        <span class="keyword">new</span> MySqlSourceReaderMetrics(readerContext.metricGroup()),</span><br><span class="line">                        configuration.isIncludeSchemaChanges());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlSourceReader&lt;&gt;(</span><br><span class="line">                elementsQueue,</span><br><span class="line">                () -&gt; createSplitReader(configuration),</span><br><span class="line">                recordEmitter,</span><br><span class="line">                readerContext.getConfiguration(),</span><br><span class="line">                readerContext,</span><br><span class="line">                configuration);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在一个事务中，进行4笔数据库操作</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeBinlogEventsInOneTransaction</span><span class="params">(MySqlSourceConfig sourceConfig, String tableId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        JdbcConnection connection = DebeziumUtils.openJdbcConnection(sourceConfig);</span><br><span class="line">        <span class="comment">// make 6 binlog events by 4 operations</span></span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        connection.execute(</span><br><span class="line">                <span class="string">"UPDATE "</span> + tableId + <span class="string">" SET address = 'Hangzhou' where id = 103"</span>,</span><br><span class="line">                <span class="string">"DELETE FROM "</span> + tableId + <span class="string">" where id = 102"</span>,</span><br><span class="line">                <span class="string">"INSERT INTO "</span> + tableId + <span class="string">" VALUES(102, 'user_2','Shanghai','123567891234')"</span>,</span><br><span class="line">                <span class="string">"UPDATE "</span> + tableId + <span class="string">" SET address = 'Shanghai' where id = 103"</span>);</span><br><span class="line">        connection.commit();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 elementQueues 中拉取下一批数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">consumeRecords</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceReader&lt;SourceRecord&gt; sourceReader, DataType recordType, <span class="keyword">int</span> changeEventNum)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Poll all the n records of the single split.</span></span><br><span class="line">        <span class="comment">// 创建 ReaderOutput</span></span><br><span class="line">        <span class="keyword">final</span> SimpleReaderOutput output = <span class="keyword">new</span> SimpleReaderOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ReaderOutput 的取出结果小于指定个数，则继续执行 sourceReader.pollNext()</span></span><br><span class="line">        <span class="keyword">while</span> (output.getResults().size() &lt; changeEventNum) &#123;</span><br><span class="line">            sourceReader.pollNext(output);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> RecordsFormatter formatter = <span class="keyword">new</span> RecordsFormatter(recordType);</span><br><span class="line">        <span class="keyword">return</span> formatter.format(output.getResults());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类中执行的 sql 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'flink'</span>,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">"user_1"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">"user_2"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">"user_3"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">"user_4"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">"user_5"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">111</span>,<span class="string">"user_6"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">118</span>,<span class="string">"user_7"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">121</span>,<span class="string">"user_8"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">123</span>,<span class="string">"user_9"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1009</span>,<span class="string">"user_10"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1010</span>,<span class="string">"user_11"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1011</span>,<span class="string">"user_12"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1012</span>,<span class="string">"user_13"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1013</span>,<span class="string">"user_14"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1014</span>,<span class="string">"user_15"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1015</span>,<span class="string">"user_16"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1016</span>,<span class="string">"user_17"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1017</span>,<span class="string">"user_18"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1018</span>,<span class="string">"user_19"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">1019</span>,<span class="string">"user_20"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>),</span><br><span class="line">       (<span class="number">2000</span>,<span class="string">"user_21"</span>,<span class="string">"Shanghai"</span>,<span class="string">"123567891234"</span>);</span><br></pre></td></tr></table></figure><p>下面来监测一下数据变化：</p><ol><li><p>创建的 MySqlBinlogSplit 格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"splitId"</span>:<span class="string">"binlog-split"</span>,</span><br><span class="line">    <span class="attr">"binlogSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    "completedSplit":true,  // totalFinishedSplitSize == finishedSnapshotSplitInfos</span><br><span class="line">    "finishedSnapshotSplitInfos":[</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    "snapshotSplit":false,</span><br><span class="line">    "startingOffset":&#123;</span><br><span class="line">        "filename":"mysql-bin.000003",</span><br><span class="line">        "gtidSet":"fb8daa95-9602-11ec-9adb-0242ac110003:1-35",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"mysql-bin.000003",</span><br><span class="line">            "pos":"11790",</span><br><span class="line">            "gtids":"fb8daa95-9602-11ec-9adb-0242ac110003:1-35",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":11790,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "endingOffset":&#123;</span><br><span class="line">        "filename":"",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"",</span><br><span class="line">            "pos":"-9223372036854775808",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":-9223372036854775808,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "totalFinishedSplitSize":0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取的 SourceRecord 格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SourceRecord&#123;</span><br><span class="line">sourcePartition=&#123;server=mysql_binlog_source&#125;,</span><br><span class="line">sourceOffset=&#123;transaction_id=null, ts_sec=1645771455, file=mysql-bin.000003, pos=11855, gtids=a5adbd99-9603-11ec-a0a1-0242ac110003:1-35, row=1, server_id=223344, event=2&#125;</span><br><span class="line">&#125; </span><br><span class="line">ConnectRecord&#123;</span><br><span class="line">topic=&apos;mysql_binlog_source.customer_va47fu.customers&apos;, </span><br><span class="line">kafkaPartition=null, </span><br><span class="line">key=Struct&#123;id=103&#125;, </span><br><span class="line">keySchema=Schema&#123;mysql_binlog_source.customer_va47fu.customers.Key:STRUCT&#125;, </span><br><span class="line">value=Struct&#123;</span><br><span class="line">before=Struct&#123;id=103,name=user_3,address=Shanghai,phone_number=123567891234&#125;,</span><br><span class="line">after=Struct&#123;id=103,name=user_3,address=Hangzhou,phone_number=123567891234&#125;,</span><br><span class="line">source=Struct&#123;</span><br><span class="line">version=1.5.4.Final,</span><br><span class="line">connector=mysql,</span><br><span class="line">name=mysql_binlog_source,</span><br><span class="line">ts_ms=1645771455000,</span><br><span class="line">db=customer_va47fu,</span><br><span class="line">table=customers,</span><br><span class="line">server_id=223344,</span><br><span class="line">gtid=a5adbd99-9603-11ec-a0a1-0242ac110003:36,</span><br><span class="line">file=mysql-bin.000003,pos=11995,</span><br><span class="line">row=0</span><br><span class="line">&#125;,</span><br><span class="line">op=u,</span><br><span class="line">ts_ms=1645771666855</span><br><span class="line">&#125;, </span><br><span class="line">valueSchema=Schema&#123;mysql_binlog_source.customer_va47fu.customers.Envelope:STRUCT&#125;, timestamp=null, headers=ConnectHeaders(headers=)&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取一个事件数据之后，MySqlBinlogSplit 数据变化如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"binlogSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"completedSplit"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"startingOffset"</span>:&#123;</span><br><span class="line">        <span class="attr">"filename"</span>:<span class="string">"mysql-bin.000003"</span>,</span><br><span class="line">        <span class="attr">"gtidSet"</span>:<span class="string">"a5adbd99-9603-11ec-a0a1-0242ac110003:1-35"</span>,</span><br><span class="line">        <span class="attr">"offset"</span>:&#123;</span><br><span class="line">            <span class="attr">"ts_sec"</span>:<span class="string">"1645771455"</span>,</span><br><span class="line">            <span class="attr">"file"</span>:<span class="string">"mysql-bin.000003"</span>,</span><br><span class="line">            "pos":"11855",    // 起始位置由原来的 11790 变成了 11855</span><br><span class="line">            "gtids":"a5adbd99-9603-11ec-a0a1-0242ac110003:1-35",</span><br><span class="line">            "row":"1",</span><br><span class="line">            "server_id":"223344",</span><br><span class="line">            "event":"2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":11855,</span><br><span class="line">        "restartSkipEvents":2,</span><br><span class="line">        "restartSkipRows":1,</span><br><span class="line">        "serverId":223344,</span><br><span class="line">        "timestamp":1645771455</span><br><span class="line">    &#125;,</span><br><span class="line">    "endingOffset":&#123;</span><br><span class="line">        "filename":"",</span><br><span class="line">        "offset":&#123;</span><br><span class="line">            "ts_sec":"0",</span><br><span class="line">            "file":"",</span><br><span class="line">            "pos":"-9223372036854775808",</span><br><span class="line">            "row":"0",</span><br><span class="line">            "event":"0"</span><br><span class="line">        &#125;,</span><br><span class="line">        "position":-9223372036854775808,</span><br><span class="line">        "restartSkipEvents":0,</span><br><span class="line">        "restartSkipRows":0,</span><br><span class="line">        "serverId":0,</span><br><span class="line">        "timestamp":0</span><br><span class="line">    &#125;,</span><br><span class="line">    "finishedSnapshotSplitInfos":[</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    "snapshotSplit":false,</span><br><span class="line">    "totalFinishedSplitSize":0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MysqlSplitReader"><a href="#MysqlSplitReader" class="headerlink" title="MysqlSplitReader"></a>MysqlSplitReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSplitReader</span> <span class="keyword">implements</span> <span class="title">SplitReader</span>&lt;<span class="title">SourceRecord</span>, <span class="title">MySqlSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被分配到的 split</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;MySqlSplit&gt; splits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MySqlSourceConfig sourceConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> subtaskId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前处理的 MySqlSplit 类型确定 Reader 类型：</span></span><br><span class="line"><span class="comment">     * MySqlBinlogSplit -&gt; SnapshotSplitReader</span></span><br><span class="line"><span class="comment">     * MySqlSnapshotSplit -&gt;  BinlogSplitReader</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这两个类都实现了 DebeziumReader ，复用 1.x 中的 reader 能力</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> DebeziumReader&lt;SourceRecord, MySqlSplit&gt; currentReader;</span><br><span class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> String currentSplitId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlSplitReader</span><span class="params">(MySqlSourceConfig sourceConfig, <span class="keyword">int</span> subtaskId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceConfig = sourceConfig;</span><br><span class="line">        <span class="keyword">this</span>.subtaskId = subtaskId;</span><br><span class="line">        <span class="keyword">this</span>.splits = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordsWithSplitIds&lt;SourceRecord&gt; <span class="title">fetch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同的 MySqlSplit 类型创建不同的 DebeziumReader</span></span><br><span class="line">        checkSplitOrStartNext();</span><br><span class="line">        Iterator&lt;SourceRecord&gt; dataIt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataIt = currentReader.pollSplitRecords();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"fetch data failed."</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataIt == <span class="keyword">null</span></span><br><span class="line">                ? finishedSnapshotSplit()</span><br><span class="line">                : MySqlRecords.forRecords(currentSplitId, dataIt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BinlogSplitReaderTest"><a href="#BinlogSplitReaderTest" class="headerlink" title="BinlogSplitReaderTest"></a>BinlogSplitReaderTest</h4><p>先 SnapshotSplitReader ，再 BinlogSplitReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinlogSplitReaderTest</span> <span class="keyword">extends</span> <span class="title">MySqlSourceTestBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个单独的数据库实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UniqueDatabase customerDatabase =</span><br><span class="line">            <span class="keyword">new</span> UniqueDatabase(MYSQL_CONTAINER, <span class="string">"customer"</span>, <span class="string">"mysqluser"</span>, <span class="string">"mysqlpw"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BinaryLogClient binaryLogClient;</span><br><span class="line">    <span class="keyword">private</span> MySqlConnection mySqlConnection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadSingleBinlogSplit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化创建数据库，并执行 sql 脚本</span></span><br><span class="line">        customerDatabase.createAndInitialize();</span><br><span class="line">        MySqlSourceConfig sourceConfig = getConfig(<span class="keyword">new</span> String[] &#123;<span class="string">"customers_even_dist"</span>&#125;);</span><br><span class="line">        binaryLogClient = DebeziumUtils.createBinaryClient(sourceConfig.getDbzConfiguration());</span><br><span class="line">        mySqlConnection = DebeziumUtils.createMySqlConnection(sourceConfig.getDbzConfiguration());</span><br><span class="line">        <span class="keyword">final</span> DataType dataType =</span><br><span class="line">                DataTypes.ROW(</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"id"</span>, DataTypes.BIGINT()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"name"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"address"</span>, DataTypes.STRING()),</span><br><span class="line">                        DataTypes.FIELD(<span class="string">"phone_number"</span>, DataTypes.STRING()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 根据当前 customers_even_dist 表中记录，获取 MySqlSnapshotSplit 列表</span></span><br><span class="line"><span class="comment">         * 1. (null,105)</span></span><br><span class="line"><span class="comment">         * 2. (105,109)</span></span><br><span class="line"><span class="comment">         * 3. (109,null)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;MySqlSnapshotSplit&gt; splits =</span><br><span class="line">                getMySqlSplits(<span class="keyword">new</span> String[] &#123;<span class="string">"customers_even_dist"</span>&#125;, sourceConfig);</span><br><span class="line"></span><br><span class="line">        String[] expected =</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"+I[101, user_1, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-D[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[102, user_2, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"-U[103, user_3, Hangzhou, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+U[103, user_3, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[104, user_4, Shanghai, 123567891234]"</span>,</span><br><span class="line">                    <span class="string">"+I[103, user_3, Shanghai, 123567891234]"</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; actual =</span><br><span class="line">                readBinlogSplits(</span><br><span class="line">                        splits,</span><br><span class="line">                        dataType,</span><br><span class="line">                        sourceConfig,</span><br><span class="line">                        <span class="comment">// scanSplitsNum 设置为1，因此只处理第一个 split 区间 (null,105)</span></span><br><span class="line">                        <span class="number">1</span>,</span><br><span class="line">                        expected.length,</span><br><span class="line">                        splits.get(splits.size() - <span class="number">1</span>).getTableId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In any order </span></span><br><span class="line">        assertEqualsInAnyOrder(Arrays.asList(expected), actual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前 customers_even_dist 表中记录，获取 MySqlSnapshotSplit 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;MySqlSnapshotSplit&gt; <span class="title">getMySqlSplits</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] captureTables, MySqlSourceConfig sourceConfig)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; captureTableIds =</span><br><span class="line">                Arrays.stream(captureTables)</span><br><span class="line">                        .map(tableName -&gt; customerDatabase.getDatabaseName() + <span class="string">"."</span> + tableName)</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">        List&lt;TableId&gt; remainingTables =</span><br><span class="line">                captureTableIds.stream().map(TableId::parse).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MySqlSnapshotSplitAssigner assigner =</span><br><span class="line">                <span class="keyword">new</span> MySqlSnapshotSplitAssigner(</span><br><span class="line">                        sourceConfig, DEFAULT_PARALLELISM, remainingTables, <span class="keyword">false</span>);</span><br><span class="line">        assigner.open();</span><br><span class="line">        List&lt;MySqlSnapshotSplit&gt; mySqlSplits = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Optional&lt;MySqlSplit&gt; mySqlSplit = assigner.getNext();</span><br><span class="line">            <span class="keyword">if</span> (mySqlSplit.isPresent()) &#123;</span><br><span class="line">                mySqlSplits.add(mySqlSplit.get().asSnapshotSplit());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        assigner.close();</span><br><span class="line">        <span class="keyword">return</span> mySqlSplits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SplitReader 读取分片数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">readBinlogSplits</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;MySqlSnapshotSplit&gt; sqlSplits,</span></span></span><br><span class="line"><span class="function"><span class="params">            DataType dataType,</span></span></span><br><span class="line"><span class="function"><span class="params">            MySqlSourceConfig sourceConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> scanSplitsNum,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> expectedSize,</span></span></span><br><span class="line"><span class="function"><span class="params">            TableId binlogChangeTableId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StatefulTaskContext statefulTaskContext =</span><br><span class="line">                <span class="keyword">new</span> StatefulTaskContext(sourceConfig, binaryLogClient, mySqlConnection);</span><br><span class="line">        <span class="keyword">final</span> SnapshotSplitReader snapshotSplitReader =</span><br><span class="line">                <span class="keyword">new</span> SnapshotSplitReader(statefulTaskContext, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-1: read snapshot splits firstly</span></span><br><span class="line">        <span class="comment">// 先读取 snapshot split 分片中的数据</span></span><br><span class="line">        List&lt;SourceRecord&gt; fetchedRecords = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scanSplitsNum; i++) &#123;</span><br><span class="line">            MySqlSplit sqlSplit = sqlSplits.get(i);</span><br><span class="line">            <span class="keyword">if</span> (snapshotSplitReader.isFinished()) &#123;</span><br><span class="line">                snapshotSplitReader.submitSplit(sqlSplit);</span><br><span class="line">            &#125;</span><br><span class="line">            Iterator&lt;SourceRecord&gt; res;</span><br><span class="line">            <span class="keyword">while</span> ((res = snapshotSplitReader.pollSplitRecords()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (res.hasNext()) &#123;</span><br><span class="line">                    SourceRecord sourceRecord = res.next();</span><br><span class="line">                    fetchedRecords.add(sourceRecord);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 读取数据结果如下，包括lw、hw、4条分区数据：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;split_id=customer_1bioqsl.customers_even_dist:0,watermark_kind=LOW&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=101,name=user_1,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411405&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=104,name=user_4,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411412&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=102,name=user_2,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411411&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;after=Struct&#123;id=103,name=user_3,address=Shanghai,phone_number=123567891234&#125;,source=Struct&#123;version=1.5.4.Final,connector=mysql,name=mysql_binlog_source,ts_ms=0,db=customer_1bioqsl,table=customers_even_dist,server_id=0,file=,pos=0,row=0&#125;,op=r,ts_ms=1645779411412&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct&#123;split_id=customer_1bioqsl.customers_even_dist:0,watermark_kind=HIGH&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-2: create binlog split according the finished snapshot splits</span></span><br><span class="line">        <span class="comment">// 获取已读取完成的 snapshot split 相关信息，FinishedSnapshotSplitInfo.highwatermark.offset 为 11837</span></span><br><span class="line">        List&lt;FinishedSnapshotSplitInfo&gt; finishedSplitsInfo =</span><br><span class="line">                getFinishedSplitsInfo(sqlSplits, fetchedRecords);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取已完成的 snapshot split 的最大 hw offset ，作为 binlog split 的起点     </span></span><br><span class="line">        BinlogOffset startingOffset = getStartingOffsetOfBinlogSplit(finishedSplitsInfo);</span><br><span class="line">        Map&lt;TableId, TableChange&gt; tableSchemas = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MySqlSplit mySqlSplit : sqlSplits) &#123;</span><br><span class="line">            tableSchemas.putAll(mySqlSplit.getTableSchemas());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 binlog split</span></span><br><span class="line">        MySqlSplit binlogSplit =</span><br><span class="line">                <span class="keyword">new</span> MySqlBinlogSplit(</span><br><span class="line">                        <span class="string">"binlog-split"</span>,</span><br><span class="line">                        startingOffset,</span><br><span class="line">                        <span class="comment">// end offset 设置为 Long 的最大值</span></span><br><span class="line">                        BinlogOffset.NO_STOPPING_OFFSET,</span><br><span class="line">                        finishedSplitsInfo,</span><br><span class="line">                        tableSchemas,</span><br><span class="line">                        finishedSplitsInfo.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-3: test read binlog split</span></span><br><span class="line">        BinlogSplitReader binlogReader = <span class="keyword">new</span> BinlogSplitReader(statefulTaskContext, <span class="number">0</span>);</span><br><span class="line">        binlogReader.submitSplit(binlogSplit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-4: make some binlog events</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * "UPDATE " + tableId + " SET address = 'Hangzhou' where id = 103"</span></span><br><span class="line"><span class="comment">         * "DELETE FROM " + tableId + " where id = 102"</span></span><br><span class="line"><span class="comment">         * "INSERT INTO " + tableId + " VALUES(102, 'user_2','Shanghai','123567891234')"</span></span><br><span class="line"><span class="comment">         * "UPDATE " + tableId + " SET address = 'Shanghai' where id = 103"</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 103、after 103&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 102&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;after 102&#125;</span></span><br><span class="line"><span class="comment">         * Struct &#123;before 103、after 103&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (binlogChangeTableId.table().contains(<span class="string">"customers"</span>)) &#123;</span><br><span class="line">            makeCustomersBinlogEvents(</span><br><span class="line">                    statefulTaskContext.getConnection(),</span><br><span class="line">                    binlogChangeTableId.toString(),</span><br><span class="line">                    scanSplitsNum == <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            makeCustomerCardsBinlogEvents(</span><br><span class="line">                    statefulTaskContext.getConnection(), binlogChangeTableId.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step-5: fetched all produced binlog data and format them</span></span><br><span class="line">        List&lt;String&gt; actual = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator&lt;SourceRecord&gt; recordIterator;</span><br><span class="line">        <span class="keyword">while</span> ((recordIterator = binlogReader.pollSplitRecords()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (recordIterator.hasNext()) &#123;</span><br><span class="line">                fetchedRecords.add(recordIterator.next());</span><br><span class="line">            &#125;</span><br><span class="line">            actual.addAll(formatResult(fetchedRecords, dataType));</span><br><span class="line">            fetchedRecords.clear();</span><br><span class="line">            <span class="keyword">if</span> (actual.size() &gt;= expectedSize) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> actual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前测试用例构建最上层的 MySqlSource 配置类</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> MySqlSourceConfig <span class="title">getConfig</span><span class="params">(String[] captureTables)</span> </span>&#123;</span><br><span class="line">        String[] captureTableIds =</span><br><span class="line">                Arrays.stream(captureTables)</span><br><span class="line">                        .map(tableName -&gt; customerDatabase.getDatabaseName() + <span class="string">"."</span> + tableName)</span><br><span class="line">                        .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlSourceConfigFactory()</span><br><span class="line">                .databaseList(customerDatabase.getDatabaseName())</span><br><span class="line">                .tableList(captureTableIds)</span><br><span class="line">                .hostname(MYSQL_CONTAINER.getHost())</span><br><span class="line">                .port(MYSQL_CONTAINER.getDatabasePort())</span><br><span class="line">                .username(customerDatabase.getUsername())</span><br><span class="line">                <span class="comment">// snapshot 分片大小设置为 4</span></span><br><span class="line">                .splitSize(<span class="number">4</span>)</span><br><span class="line">                <span class="comment">// 每次取数范围为 2 条</span></span><br><span class="line">                .fetchSize(<span class="number">2</span>)</span><br><span class="line">                .password(customerDatabase.getPassword())</span><br><span class="line">                .createConfig(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类中执行的 sql 脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create table whose split key is evenly distributed</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers_even_dist (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">1024</span>),</span><br><span class="line">  phone_number <span class="built_in">VARCHAR</span>(<span class="number">512</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- splitSize 设置为 4，划分成左闭右开的区间，所以已经插入的 10 条数据会被分成 3 个 SnapshotSplit:</span></span><br><span class="line"><span class="comment">-- （null,105）101、102、103、104</span></span><br><span class="line"><span class="comment">-- [105,109)  105、106、107、108</span></span><br><span class="line"><span class="comment">-- [109,null) 109、110</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers_even_dist</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="string">'user_1'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">102</span>,<span class="string">'user_2'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">103</span>,<span class="string">'user_3'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">104</span>,<span class="string">'user_4'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">105</span>,<span class="string">'user_5'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">106</span>,<span class="string">'user_6'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">107</span>,<span class="string">'user_7'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">108</span>,<span class="string">'user_8'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">109</span>,<span class="string">'user_9'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>),</span><br><span class="line">       (<span class="number">110</span>,<span class="string">'user_10'</span>,<span class="string">'Shanghai'</span>,<span class="string">'123567891234'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.percona.com/blog/2014/03/11/introducing-backup-locks-percona-server-2/" target="_blank" rel="noopener">Percona文章- FLUSH TABLES WITH READ LOCK 命令行影响</a><br><a href="https://zhjwpku.com/2022/01/16/flink-cdc-2-0-analysis.html" target="_blank" rel="noopener">Flink CDC 2.0实现原理剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flink CDC 2.0 的设计方案，借鉴了 Netflix 的 DBLog paper 实现全程无锁，并基于 Flink FLIP-27 Source 实现水平扩展，并支持全量阶段 checkpoint 。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink-CDC/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-FLIP-27: Refactor Source Interface</title>
    <link href="http://yoursite.com/2022/02/16/Flink-FLIP-27-Refactor-Source-Interface/"/>
    <id>http://yoursite.com/2022/02/16/Flink-FLIP-27-Refactor-Source-Interface/</id>
    <published>2022-02-16T03:30:05.000Z</published>
    <updated>2022-03-29T18:24:19.181Z</updated>
    
    <content type="html"><![CDATA[<p>FLIP-27: Refactor Source Interface ，是对 SourceFunction 的重构，旨在解决 <code>SourceFunction</code> 中存在的几个痛点。<code>SplitEnumerator</code> 负责发现并 split，<code>SourceReader</code> 负责读取 split 的实际数据。也是批流一体 API 推进的产物。</p><a id="more"></a><h2 id="重构动机"><a href="#重构动机" class="headerlink" title="重构动机"></a>重构动机</h2><p>先前的 SourceFunction 存在以下几个痛点：</p><ul><li>split 的发现逻辑（work discovery）和实际读取数据的逻辑耦合在 SourceFunction 和 DataStream 接口中，导致 sourcce 实现的复杂度</li><li>批处理和流处理需要实现不同的 source</li><li>partitions/shards/splits 等概念没有在接口中显示定义，使得很难以独立于源的方式实现事件时间对齐、分区 watermark 、动态 split 分配 、work stealing 等功能</li><li>checkpoint 锁由 SourceFunction 占有，导致框架难以优化</li><li>没有通用框架，意味着每个 source 都要实现一个复杂的线程模型，增加了新 source 实现及测试的难度</li></ul><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="发现读取分离"><a href="#发现读取分离" class="headerlink" title="发现读取分离"></a>发现读取分离</h3><p>Source 端有两个主要组件：</p><ul><li>SplitEnumerator: 发现并分配 split (files, partitions 等)<br>SplitEnumerator 仅运行一次，非并行的，未来可以考虑并行化。通常运行在 JobManager 上，或者作为 TaskManager 上的单任务。<br>在 File Source 中， SplitEnumerator 列举出所有文件；<br>在 Kafka Source 中，SplitEnumerator 查询出 kafka 需要读取的所有分区；</li><li>Reader: 读取 splits 中的真实数据<br>从分配到的 splits 中读取数据。可以一个接一个的读取有界 splits ，也可以并发读取多个 splits。</li></ul><p>这两个组件组成了核心功能，主要的 Source 接口是一个创建 split enumerators 和 readers 的工厂：</p><p><img src="FLIP-27_Refactor-Source-Interface%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt></p><h3 id="统一批流-API"><a href="#统一批流-API" class="headerlink" title="统一批流 API"></a>统一批流 API</h3><p>任意 source 都应该既能作为 batch source ，也能作为 streaming source 。有界性是 source 接口的内在属性，大多数情况下，仅 SplitEnumerator 需要识别有界性属性，而 SplitReaders 不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setRuntimeMode(RuntimeMode.BATCH);</span><br></pre></td></tr></table></figure><h3 id="通用-enumerator-reader-通信机制"><a href="#通用-enumerator-reader-通信机制" class="headerlink" title="通用 enumerator-reader 通信机制"></a>通用 enumerator-reader 通信机制</h3><p>SplitEnumerator 和 SourceReader 都有各自的实现类，两个组件之间需要通信，在二者之间引入了一种通用的消息传递机制。<br>需要在 JobMasterGateway 和 TaskExecutorGateway 中分别实现 RPC 方法。消息传递栈如下图：<br><img src="SplitEnumerator%E5%92%8CSourceReader%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%A0%88.png" alt></p><p>SourceCoordinator 和 SourceOperator 作为上图中 OperatorCoordinator 和 Operator 针对 FLIP-27 的实现，其类图和时序图如下：</p><p><code>SourceEvent</code> 是在 SplitEnumerator 和 SourceReader 之间传递消息的接口，<code>OperatorEvent</code> 是在 OperatorCoordinator 和 Operator 之间传递消息的接口。<br>在这个 FLIP 中，SourceCoordinator 将是封装 SplitEnumerator 的 OperatorCoordinator 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobMasterGateway</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">CompletableFuture&lt;Acknowledge&gt; <span class="title">sendOperatorEventToCoordinator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ExecutionAttemptID task,</span></span></span><br><span class="line"><span class="function"><span class="params">            OperatorID operatorID,</span></span></span><br><span class="line"><span class="function"><span class="params">            SerializedValue&lt;OperatorEvent&gt; event)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskExecutorGateway</span> <span class="keyword">extends</span> <span class="title">RpcGateway</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="function">CompletableFuture&lt;Acknowledge&gt; <span class="title">sendOperatorEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ExecutionAttemptID task,</span></span></span><br><span class="line"><span class="function"><span class="params">            OperatorID operator,</span></span></span><br><span class="line"><span class="function"><span class="params">            SerializedValue&lt;OperatorEvent&gt; evt)</span></span>;</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SplitEnumerator"><a href="#SplitEnumerator" class="headerlink" title="SplitEnumerator"></a>SplitEnumerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitEnumerator</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">CheckpointT</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AutoCloseable</span>, <span class="title">CheckpointListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleSplitRequest</span><span class="params">(<span class="keyword">int</span> subtaskId, @Nullable String requesterHostname)</span></span>;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addSplitsBack</span><span class="params">(List&lt;SplitT&gt; splits, <span class="keyword">int</span> subtaskId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 subTaskId 添加一个新的 source reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addReader</span><span class="params">(<span class="keyword">int</span> subtaskId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitEnumeratorContext</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 source event 到 source reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendEventToSourceReader</span><span class="params">(<span class="keyword">int</span> subtaskId, SourceEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已经注册的 source reader 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Integer, ReaderInfo&gt; <span class="title">registeredReaders</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分配 splits</span></span><br><span class="line"><span class="comment">     * 根据 subTaskId 构建 gateway ，并下发 SourceSplits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">assignSplits</span><span class="params">(SplitsAssignment&lt;SplitT&gt; newSplitAssignments)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitsAssignment</span>&lt;<span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * subTaskId, SourceSplit 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, List&lt;SplitT&gt;&gt; assignment;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SourceReader-抽象"><a href="#SourceReader-抽象" class="headerlink" title="SourceReader 抽象"></a>SourceReader 抽象</h3><p>首先，看下 Flink 的 Source 核心接口被设计地非常通用，但是 Reader 的实现复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Source</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">EnumChkT</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 source 的有界性，BOUNDED ｜ CONTINUOUS_UNBOUNDED</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boundedness <span class="title">getBoundedness</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SourceReader&lt;T, SplitT&gt; <span class="title">createReader</span><span class="params">(SourceReaderContext readerContext)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 enumerator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SplitEnumerator&lt;SplitT, EnumChkT&gt; <span class="title">createEnumerator</span><span class="params">(SplitEnumeratorContext&lt;SplitT&gt; enumContext)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在 FLIP-27 中封装了一个抽象类来提供更简单的接口以允许阻塞调用，SourceReaderBase 作为 SourceReader 的一个抽象实现，基于生产者消费者模式，提供了主线程和内部读取线程之间的同步机制。用户只需专注于：</p><ul><li>自定义 SourceReader (继承 SourceReaderBase)</li><li>从外部系统获取记录（实现 SplitReader 接口）</li><li>发送数据到下游 (实现 RecordEmitter 接口)</li><li>watermark 相关处理</li></ul><h4 id="SourceReaderBase"><a href="#SourceReaderBase" class="headerlink" title="SourceReaderBase"></a>SourceReaderBase</h4><p>SourceReaderBase 的工作流程如下图：<br><img src="SourceReaderBase%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91.png" alt></p><ol><li>当 SplitEnumerator 将一个新的 split 分配给 SourceReader ，SourceReader 先为该 split 初始化 state ，再经过 SplitFetcherManager -&gt; SplitFetcher -&gt; SplitReader 分配到指定的 SplitReader</li><li>外部数据经过 SplitReader -&gt; SplitFetcher.elementQueues -&gt; SourceReaderBase.elementQueues -&gt; RecordsWithSplitIds<e> -&gt; RecordEmitter ，数据批形式地入队列出队列，性能更好</e></li><li>SourceReaderBase 遍历每一条数据，并查询数据对应的 split state ，二者会通过 RecordEmitter 发送到下游</li></ol><p>SourceReaderBase 类的关键属性和方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceReaderBase</span>&lt;<span class="title">E</span>, <span class="title">T</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>, <span class="title">SplitStateT</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SourceReader</span>&lt;<span class="title">T</span>, <span class="title">SplitT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================================================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者消费者模式的阻塞队列，存放 SplitFetcher 线程从外部系统读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureCompletingBlockingQueue&lt;RecordsWithSplitIds&lt;E&gt;&gt; elementsQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SplitFetcher 线程池管理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> SplitFetcherManager&lt;E, SplitT&gt; splitFetcherManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SplitReader最新读取的records-by-split批</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RecordsWithSplitIds&lt;E&gt; currentFetch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前遍历处理到的 Output</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SourceOutput&lt;T&gt; currentSplitOutput;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 SplitReaders 读取的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> RecordEmitter&lt;E, T, SplitStateT&gt; recordEmitter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * source reader 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> SourceReaderContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * splits 的状态后端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SplitContext&lt;T, SplitStateT&gt;&gt; splitStates;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拉取下一批数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStatus <span class="title">pollNext</span><span class="params">(ReaderOutput&lt;T&gt; output)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被分配到新一批 splits</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSplits</span><span class="params">(List&lt;SplitT&gt; splits)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SplitReader"><a href="#SplitReader" class="headerlink" title="SplitReader"></a>SplitReader</h4><p>大多数 readers 可以分为以下几类：</p><ul><li>顺序单 split （file，数据库查询，大多数有界 splits）<br><img src="Sequential_Single_Split.png" alt></li><li>多 split 多路 （Kafka，Pulsar，Pravega…）<br><img src="Multi-split_Multiplexed.png" alt></li><li>多 split 多线程 (Kinesis…)<br><img src="Multi-split_Multi-threaded.png" alt></li></ul><p>SourceReader 实现如下接口中的方法，fetch 和 handleSplitsChanges 需要在相同线程中执行，无需在 connector 中进行任何并发处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SplitReader</span>&lt;<span class="title">E</span>, <span class="title">SplitT</span> <span class="keyword">extends</span> <span class="title">SourceSplit</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从外部系统读取记录，转换数据格式，写入到 blocking queue，传递给 &#123;<span class="doctag">@link</span> RecordEmitter&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RecordsWithSplitIds&lt;E&gt; <span class="title">fetch</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 split change</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleSplitsChanges</span><span class="params">(Queue&lt;SplitsChange&lt;SplitT&gt;&gt; splitsChanges)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * fetcher 线程阻塞时唤醒 split reader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface" target="_blank" rel="noopener">FLIP-27: Refactor Source Interface</a><br><a href="https://zhjwpku.com/2022/01/16/flink-cdc-2-0-analysis.html" target="_blank" rel="noopener">Flink CDC 2.0实现原理剖析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FLIP-27: Refactor Source Interface ，是对 SourceFunction 的重构，旨在解决 &lt;code&gt;SourceFunction&lt;/code&gt; 中存在的几个痛点。&lt;code&gt;SplitEnumerator&lt;/code&gt; 负责发现并 split，&lt;code&gt;SourceReader&lt;/code&gt; 负责读取 split 的实际数据。也是批流一体 API 推进的产物。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink" scheme="http://yoursite.com/categories/Flink/"/>
    
    
      <category term="Flink-CDC" scheme="http://yoursite.com/tags/Flink-CDC/"/>
    
  </entry>
  
  <entry>
    <title>Flink-CDC-DBLog无锁算法</title>
    <link href="http://yoursite.com/2022/02/15/Flink-CDC-DBLog%E6%97%A0%E9%94%81%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2022/02/15/Flink-CDC-DBLog无锁算法/</id>
    <published>2022-02-15T05:50:40.000Z</published>
    <updated>2022-03-17T07:51:10.846Z</updated>
    
    <content type="html"><![CDATA[<p>DBLog 是一个 java 框架，可以从数据库的事务日志中捕获变更行，也可以通过执行表 select 语句获得数据库的全量数据。</p><a id="more"></a><h2 id="MySQL-主从同步原理"><a href="#MySQL-主从同步原理" class="headerlink" title="MySQL 主从同步原理"></a>MySQL 主从同步原理</h2><p><img src="MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt></p><ol><li>Master 主库，启动 binlog 机制，将变更数据写入 binlog 文件。（binary log，记录的是二进制日志事件 log events，可以通过 <code>show binlog events</code> 命令查看）</li><li>Slave (I/O thread)，从 Master 主库拉取 binlog 数据，将它拷贝到 Slave 的中继日志（relay log）中</li><li>Slave (SQL thread)， 回放 relay log，更新从数据库以此来达到数据一致</li></ol><p>注意，Master 主库一般会有多台 Slave 订阅，且 Master 主库要支持业务系统实时变更操作，服务器资源会有瓶颈。</p><h2 id="CDC-工具比较"><a href="#CDC-工具比较" class="headerlink" title="CDC 工具比较"></a>CDC 工具比较</h2><p>全量同步：</p><table><thead><tr><th>需求点</th><th>Databus</th><th>Debezium</th><th>MaxWell</th><th>MySQLStreamer</th><th>DBLog</th></tr></thead><tbody><tr><td>任何时间点触发</td><td>Yes</td><td>No</td><td>Yes</td><td>Unknown</td><td>Yes</td></tr><tr><td>暂停与恢复</td><td>Yes</td><td>No</td><td>No</td><td>Unknown</td><td>Yes</td></tr><tr><td>日志事件处理不暂缓</td><td>No</td><td>No</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>保证历史数据顺序</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>不使用锁</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>无厂商定制化</td><td>No</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr></tbody></table><h2 id="DBLog"><a href="#DBLog" class="headerlink" title="DBLog"></a>DBLog</h2><p><img src="DBLog_Architecture.png" alt></p><h3 id="全量状态捕获"><a href="#全量状态捕获" class="headerlink" title="全量状态捕获"></a>全量状态捕获</h3><p><img src="Chunk%E5%88%87%E5%88%86.png" alt><br>通过表的主键对表中的数据进行分片。假设每个 Chunk 的步长为 3 ，按照这个规则进行切分，只需要把这些 Chunk 的区间做成左开右闭或者左闭右开的区间，保证衔接后的区间能够等于表的主键区间即可。<br>Chunk2 的查询条件为 <code>c1 &gt; 4</code>。</p><p>在 Zookeeper 中存储最新 Chunk 的最后一行，以便从最新的 Chunk 中暂停和恢复读取。</p><p>针对全量读取，DBLog 提出的算法叫做 <code>Watermark-based Chunk Selection</code>，通过在源数据库中维护一个单行单列的表作为信号表，在查询每个 chunk 数据前后分别更新该记录使得在事务日志中生产两个事件<br>lw（低水位）和 hw（高水位），然后将 select 数据和 [lw,hw] 之间的日志进行处理，获得该 chunk 的 point-in-time 为 hw 的一组数据。</p><p>Chunk 读取算法步骤：<br><img src="Watermar-based_Chunk_Selection%E7%AE%97%E6%B3%95%E4%BC%AA%E4%BB%A3%E7%A0%81.png" alt></p><ol><li>暂停日志事件处理</li><li>更新 watermark 表的 uuid，生成 lw</li><li>select chunk ，存储在内存中</li><li>更新 watermark 表的 uuid，生成 hw</li><li>恢复日志事件处理，输出接收到的日志事件，监听 low watermark event 到来</li></ol><p>当接收到 low watermark event 时，去除内存中发生变化的数据主键。当接收到 high watermark event 时，拼接 chunk 中的剩余数据主键并输出。<br>定义一个 window 来处理 chunk 数据，写入 lw 时打开 window，写入 hw 时关闭 window。</p><p>举例一张表中包含主键 K1、k2、k3、k4、k5、k6，每一个 change log entry 都代表对主键的一个 create、update 或 delete 事件。</p><ol><li><p>首先通过 <code>SHOW MASTER STATUS</code> 获取当前 binlog 文件的偏移量当作 lw；</p></li><li><p>然后通过 SELECT 读取全量数据的快照 snapshot ，在读取的过程中无锁操作，允许数据的插入和更新；</p></li><li><p>读取完快照 Snapshot ，再通过 <code>SHOW MASTER STATUS</code> 获取当前 binlog 文件的偏移量当作 hw；<br>更新信号表分别生成 lw 和 hw，并通过 change log 接收到：<br><img src="Watermar-based_Chunk_Selection%E7%94%9F%E6%88%90%E4%BD%8E%E9%AB%98%E7%82%B9%E4%BD%8D.png" alt></p></li><li><p>读取 lw ～ hw 中的数据集 delta，设置 Snapshot = Snapshot - delta；<br>窗口中发生变更的数据将被移除出内存，没有变更的数据将被拼接到 output buffer 中：<br><img src="Watermar-based_Chunk_Selection%E5%90%88%E5%B9%B6%E5%A2%9E%E9%87%8F%E5%88%B0%E5%85%A8%E9%87%8F.png" alt></p></li><li><p>基于最新的 snapshot ，从 lw 开始消费 binlog ，执行 binlog 回放；<br>全量同步与增量同步交叉合并输出结果：<br><img src="%E5%85%A8%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E4%BA%A4%E5%8F%89%E8%BE%93%E5%87%BA.png" alt></p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_replication.html" target="_blank" rel="noopener">MySQL Replication Protocol</a><br><a href="https://netflixtechblog.com/dblog-a-generic-change-data-capture-framework-69351fb9099b" target="_blank" rel="noopener">DBLog: A Generic Change-Data-Capture Framework</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DBLog 是一个 java 框架，可以从数据库的事务日志中捕获变更行，也可以通过执行表 select 语句获得数据库的全量数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink-CDC/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-CDC-整库同步语法及Source合并优化</title>
    <link href="http://yoursite.com/2022/02/14/Flink-CDC-%E6%95%B4%E5%BA%93%E5%90%8C%E6%AD%A5%E8%AF%AD%E6%B3%95%E5%8F%8ASource%E5%90%88%E5%B9%B6%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2022/02/14/Flink-CDC-整库同步语法及Source合并优化/</id>
    <published>2022-02-14T11:45:10.000Z</published>
    <updated>2022-03-01T03:55:46.649Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9020e3808c30b25b16dff743fdaf1b0d1bcc147b54ba9fe52e15b73960d739d2">d1dec04d5d63f2a84f3c2560c37aae469752446a81cb91bac7034cf5e410474fbdaf9590c898af394fa33f0b7b8973a755c3535c1523dfa6fa415df27095b3261f99bc61c3f4e07de59f1ac8c84f0f7683b7713a4527ea3d150e055c191ff0708d0aecb1dba430a6ca13f8cd4950ed744a131a3a0968a9c287365d59802538006fe0eaf0127abb34dca8b1bce7a563a36078bc7a05d09a8a4d93cc7153089302e433ee842aadfc6a29bdf9d7513d2ce4f6552b8108fff55fd8e0a8dfc45cc7106988999796595c98617f59f3263861a5a679ddb6a160d0476e2edb579ed55b006f83d85ab44b240be127bf1088da0a247f603fe60dc2b10757a211fff99ac9d74777b0da09f6fc912e4e88869c74e9f5cc4ac259a88e92548275c1b0c784da6bdf48347bd8d26dea9fa42f7dea61241bbba007203bf755bd021306d0a0d65ed295de180cdf2fa1ef1570edcfb9a93734b8715d7cffcb10b58917c8c265ba94497bffaf23fadc3f54545d248e918d12b8268387b8c95ea7204fe5ee837d3fe4ba7ce10af12b16534c16ff3dde12903331c9a0eeb9c08a24c4c456d684b4ba12e8eeeeacb200e5b2b7c84dd786ab7dbd9fe2d6598010453697da098a15bc951101737754b7d33e1dc0453615f540c46516cf8f87a6c4bd08d3839fb524ac48815630794d8bbf0e6c8a3edbf4e3b08edfa365b557a84b17740a4a949ba7e5cbfc8369cef2eb19f42c09bd8441ef5f4c660a105661e1115bfb1b67c84ecc87c7bff4eaa99e766becc36f1a9788d2a4d032ce226a229e32522f302378d16de96115e29063c53ef976d4ee772c8256e2ccaab7c598cff8d49a086978aad626f6eeb5a76aff0c9e88fb0822ff71864c4e842d4fc217895c2682a2857c691edb851a5ae3cb01a1de196796e2d171021949605ce13e08ee0af10d61fc1f9d8abcdea587f407da9825a6e1db21e1ac423e1f69c8999bc2602c19c273a3aa4e390b7722a392e88342e5874c2e6c4b96c1e98bca2a1c503f8c7e9a12fb7c5a03bcb52825648e1174dc8ce91c0863a48a8349359436797f379b32de131d28a675d78485bdc05e6862583fd571eb15fe3d7640d27df139d656f3f61f1cda7239d0bd86176c2c1f42bee52e11774c50f62c9df4eb447909a061dae1d1af9aa49d2a9266152e146d3606a6318a70f7a93916823aaebaa6b1e962810d12e6543d048630851ad8679c518a09a765e99766ae5dc6e8ff4eff56d35c6bd7351a6ec6b4854ea3d1a47738f5defa8c600d7a0c4f832e0749617d43bfd17180854dd03067fa8f026b80bbec86f22f834de4aa10bb1e69d88d956ccbbf4d9a30ac44b37c23610be615555a4e74cd833ceaac6ddb18650f133d514373ca0e3655fbf073a0887b1122ff3095e8941053cfbc245a5753cb41d712d9328d38c438fc664d0fd705558c2b871f58147b1756173597d75b1e0d29e817a42a0dd67cbf6a7caf1197b99b13f98d4b0401fcd7a048a05ffefc86754e0fded33bece75eb146c56913c63e41f3dff1973f3a84ff29cd3af2a9a1522b879575162f3f854f9b83c8be39f18ca0632b7c1ecf9dac3e5461ce553b6018c082f120bc928286e2ecfd0120c3b70b42d82b6c254efedd33f5728175f033e853f255ee616a2709977eb1a68e891d040d3457d862323031dfd88920cebdb4be9a4c98f32f30826125bb0591c987b10f666506e23ba5f4a817ee97cbf2ba3a4407ac4bbc70b255f8df1ea1d9c31ef76da824c975c775e73227068a187c565fae02fc7c65e90202bd0083c4dbcc431ce78406b357aee89f991ff365b1446b5c1834c368289bc77bb12c6930cdb04913e526c8a977c79c102a064d206c6aaad4fbab67c31bafbd0d345a3f1b540c9800b851315aa1f15b9fc71ab65262d1aad47e75c7c93d798303d7a0ca8bd27fe1febff0cf02d5fcb0b26f63f3466ac9cfee271395b6d9eb57a607e9a420f8008d4870966f556187b0f2cbc667202b76b5d89b55dbc4ef50873e92d25cc5b2065937eca56631ca14adba8df981ccc9758978f8bef4fd7011630cf6b2f9edb45ef3650c97c5a7fe0ab7695d3b5fd4ec80a734346ab4f9ba39ef58b9019d4b8098ec9fccc67ae093d54946ede70e0bde1b391b1ea2b96e84a7a9f5a78afb85cba15f3d229e75bde231e976431e57dac243cf56a29532ee1d670c436957e00d62da0b140ca2e516b6b60c100896eb4c1d3e86a9d03f8b3813c48429a059403db0889d36cc17cad2451edf332ec217c0a2c7b61312bd8de0bf36287eb4d636aa0841db0087bce037059a7b8e698443f534fcae216e5340c660d491ec8834f2cbaaabca50f0bc8f3b1f901d465a01612fe7a39eb70452c2502cbce9a3e2d779c7635365dd9d6561ae7d40903ea19144bae512e34d669dac079a0da7c55e006e792ac32ee88772e4abfe65a709525cd76a6fe8758f642b7da4cfe5c21f5642889672c133f44d75f74476987f95aef747dfa43b44a9fac8d1061389598ec1354d3ee7d061094ff69a2add75b2fd6bc673e920020cd3ebeafc2dfd5beae190e451fcd7a748c51e499fcfa2bf6d0d4be8b2ba196360324f0a6d7cb13a09f9b713aac368176ad580f146579577dc59397eb9da16ab6800b8b04dbf20f37c68376302251a8b537eaa06822509cc46ccc5ee8d8ecee61a5e4efd6b0916907754f9e43802dd0c85b0c06f6f1903f3513e2baf56e54dd756717510b2e41474ebad08c42fda49c3b4cab838b7a9198189b8268f2084e2ce6df100cdd43f01b8fdf9fbb361a97315bd99f40526d2aa7577a7061dd95e85d02bf234f09b9bdd6f89f1b6a4c315c404086f596a892659cb3f84b41316fc2b037914392b5eb524e2809542a2f0d60a9baf61381dc0ae0f05497c94d80e7f753ffea8483c9730026b6ea4e9faea1261a08d49e1f0c4cc03411205d353941eddb843ee1db9194d660cfe443b00554548caf1d46ea56286cc440135b0acddfa77107ef61d2e6bb651e9ad0432d86d7c89d75bfe7fb06b77d9c7d751fb6bb5d9886d6f4168f8e2c09ce2c22d7a0e0276b6a5c4fd82d30ec0b74c13608374668b8730e078b6a1acfea5e7557d0095a4dc39173279a01a1f89bdcc73b84273932fef9fdb676d0946ec1ce5e136b74dba9ceeb13b959f1babb3bbf1549a165ff5eb5db424eca48fe548a2d584f92ee70640a1f55964fa13826ddf120c90</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink-CDC/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink-CDC-Schema_Evolution内核实现</title>
    <link href="http://yoursite.com/2022/02/14/Flink-CDC-Schema-Evolution%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2022/02/14/Flink-CDC-Schema-Evolution内核实现/</id>
    <published>2022-02-14T05:51:03.000Z</published>
    <updated>2022-03-01T03:55:41.150Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="35ac2e8ee147aaa0f698db04f1f8a41b7abc5a57b6d1dbe68ee619552f7a580b">916cb86842850c8a91db281fa86d9955de8e0dde7043e2cc5a655c6643ae815274f6780949280fe5603a23eab47beb5a3f9e23f989c879e2dccf2ff3b591b2125befe8f99f61daed6bfde9c388830520c3deca62d85d5996e17a993b7fb63220e2536b008066b7cb9c2c559be90e344de6d3deb164fcc6168192e998bdbee55fb509a990b30a4ee92a03b775954be09c085507d78f6d3a62da3cb4f2212d227a4ea139e92878e11fa46e7e0b69bcb43490a8de55679195d80b1b6e49db30efe10575fbd3b5ea5f334a21935c7eff0b06c1258e5460741f7cb63b95bdd2e06761b9b3aff20430e0fdc6c2a707d1ffc5e5c81aec74e3566abda56e435acd605fc8aa38a3eb7d7672accaf2c2edfd6b5bef882582a157ee41ac1ff495ee3a99fa7a509b2bf885c58f5d03d4c5d92c7408eaade53596e73495230ca43922090208bf3ff3f4f7e5b01059538dcaf67d4fbe99b219168ec5db9ae0f54c2b23677d14e25c1c5bccb998b8870c1392f789c9950a087350b2636fa040dff58207f68fa5ac49553a92f2dd4871e6fee3f7477d6026c17335566b7b823960a4bcbb1e2ea17a73dbcc294d80b54890b2238a45e4d2775aaafbab616beb23bc264634bef4389f1394e9427750ab0d0c44440ca021edaf42c589330275957425012cfef091ee164e51142b5e72a3c90d6f95c726f7387335cd00ea7e89755195298fd43720aac40ec564444aba547eee982a21a69295fb7679a193241da6fd13584027cd389d32fde28c13f70bf617a3e1210b967684305b0c4eae226810b33b4e6ce4d09f3444931977f1e93bab6d62aaf4f6239530d7ac1185209f61d706a411b4ee0c0a776ce2de7eab3887abed5c192fb068bf3c3f7ab2600cb38f1c302c09c42898083af4ef3917b57ab41192a13c140c0b5d60da729a9b0c37cbaee63725fb2f8bd0af55ec181cbdac733282e0a30adb8c9adb060582149fe1b8ae5fbb915c0fe74dfd8327c49e658d826976c3aa8a89d11e196ee97c2ffe61687c342de6df6e9a6bf2f8c11d5fe96188702b6c8e0d8584ab65b864c9e1ff26b485fa3e9bd302ccb97acf748f6bc49d75aa7b287660fca7eb0d100142baf15591efe5487637da6a88d14ccd0d95126a916d9c0d289605fa8b68d105e3d4e806c6c223883363e2cfa51e7da0eee6dc361c9833b6318dce80ee11518d9774429819893cda8b3ec876922f08e4a055b2f0ecc4a9f0fcdd5a33035dd6eff59415c36abf85442d90f7fdfdbb00ae664d06c8139ea91e36ec6103b79e85eb0424834eb9906499f08698f640dc59dd8c7d3ae6e5c21ba4ea7879f58c117eae5a7d6269155f246b5661454c99ea85de6c51db018bbefb29bf31650fafdc706a1f9af2fabc3d3e2568d014a81d7e4088d2c3c677150055371c74dae0ad8491ff8d7500fcea3a93eefa69c265249a595d2dc1e837dfe3574342d77ce54fcd875f54cd3b15a938aab2a0aaa52283007cdee94a202492a509a4e51a181865980c3a6e3a06a41bf22dde379fd07906a1f9be818fa6dcf8c9e2d344ca3affd8c164e58fe5ed0e3f0caa1f43af8ccde9ed68ec73504df50eecdc3d8ac14947bc81db59c74df0baa859a264a86b2b7f710817</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Flink-CDC" scheme="http://yoursite.com/categories/Flink-CDC/"/>
    
    
  </entry>
  
  <entry>
    <title>声明式(declarative)vs命令式(imperative)</title>
    <link href="http://yoursite.com/2022/02/11/%E5%A3%B0%E6%98%8E%E5%BC%8F-declarative-vs%E5%91%BD%E4%BB%A4%E5%BC%8F-imperative/"/>
    <id>http://yoursite.com/2022/02/11/声明式-declarative-vs命令式-imperative/</id>
    <published>2022-02-11T03:25:38.000Z</published>
    <updated>2022-02-11T03:38:02.539Z</updated>
    
    <content type="html"><![CDATA[<p>声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。</p><a id="more"></a><h2 id="命令式vs声明式"><a href="#命令式vs声明式" class="headerlink" title="命令式vs声明式"></a>命令式vs声明式</h2><p>例如我们有一个用户列表，用 python 查找手机号为 183 开头的用户，可能会这么写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_users</span><span class="params">()</span>:</span></span><br><span class="line">ret = []</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line"><span class="keyword">if</span> user[<span class="string">'phone'</span>].startsWith(<span class="string">'183'</span>):</span><br><span class="line">ret.append(user)</span><br><span class="line"><span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>这是命令式的做法，给出通向目标的每个指令；而声明式语言则直接描述目标，如SQL可能会这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> phone <span class="keyword">LIKE</span> <span class="string">'183%'</span>;</span><br></pre></td></tr></table></figure><p>显然，声明式语言对用户更友好，用户可以关心更少的细节。更重要的是：它允许多种底层实现方式，保持目标不变的同时不断优化，如上例中 SQL 的实现既可以遍历所有的用户，也可以使用索引来加速查找。</p><p>而命令式的好处自然是它的表达能力了，图灵完备的语言可以表达任何的可计算问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://lotabout.me/2020/Declarative-vs-Imperative-language/" target="_blank" rel="noopener">声明式(declarative)vs命令式(imperative)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。&lt;/p&gt;
    
    </summary>
    
      <category term="术语" scheme="http://yoursite.com/categories/%E6%9C%AF%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Alink-常见业务Demo</title>
    <link href="http://yoursite.com/2022/02/03/Alink-%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1Demo/"/>
    <id>http://yoursite.com/2022/02/03/Alink-常见业务Demo/</id>
    <published>2022-02-03T09:45:41.000Z</published>
    <updated>2022-02-11T03:26:40.670Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9f5b0107136d991a3c94e5ddb2b79853aacfe923679340497ca418bad4a3db5e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Alink" scheme="http://yoursite.com/categories/Alink/"/>
    
    
  </entry>
  
  <entry>
    <title>Alink 基础概念与使用</title>
    <link href="http://yoursite.com/2022/02/01/Alink-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/02/01/Alink-基础概念与使用/</id>
    <published>2022-02-01T06:01:20.000Z</published>
    <updated>2023-02-01T07:41:50.126Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="02415ff35c0d277de88c1573c2bdab53cd70054e0207c49b0b2cea34d052d125">d3dc1eefcfbf0cbe91ca8c97c0f224d767286618131b11d5013e5395ebf7476063a4ea1b1bdd1883d644b4c8468007f8a0f8e7d223726dd67fee25bf9f6750cd21cbd35142645b454d7fd3f966f3304ac506746de9fc935ac63ae90cd85cb18cf54328e42cc15e22ca423ccf8d439689e6b6ebf0bbf30349f08c5e491bee73b74bad3881eeda4fad3ddf8c80d15f50c868fd5607963e83a1adf40692148fdc9be3c2e51ff118f8a1672f80ac97555c8cf605b2f97e645083b06a6702f4a896f8a8fbb4bac6ca124deea6434cde53ad06e0e1f4ab897284784b4e814ec7dbe052665ef82ac4499fdf6b96bf449914a4b1ccbf223b059aa69433151258e73da88fc3fb8db6a6f764d9d54acde9988dca15fe69031b6444b42afc8b93e00b10e8f99b2a17d199a02874c978036129e335d242ba31783fd1d6fb64847a4dbd5c6451f60797372902e19903ba5956d8dddfde2967a91b63a9587d833f4c3d27e42d103fc7eb59c424c25dcd67fda45e643a012a34539d31e3cf7e483d4a4b50f4f131c2edcca72701d842ab30a5972420a4f385b0d3de5317e99db1db0140309a5dca05614184f0a83269f80f12b2995ba5e36e37067f0f0685aec335ee0f3c15e877c1ea564d22751b6fb9392cfd57b4c8f063279200b5248fbdafb9045915c36cb6a66196b96e8904737c1bbd507daabe76d51eddd40e8784b52145eb875861e9196bd81f83fd516786900884da76bc90d48849c1a47eee826dfbd53ff1bddc49d1a42de2071006de4e9f08b254f7009cd905ff93c11d225cc264a518d228334196d12eee48437badfaa66f8c7cab3afc3aa11166311ce9edd2efb4f6f41b88da85fce866090c8448bda4a633fbfa40dd4d6808948d142c60f76f79c9bf858b8fe192c5016db3b3b9b9ddac3d4a305cdfa70be491a6c69a250c44e6a58d6a62142ebe1c4826e4eebbbd6a75e5861a5a0792b62b091d202146a3e509945a466bf13b18a821a6b2b9895fcb9d7c524e94c50e783c7feb8b98c7c3dabd13a821af6a42a9b73b87d5144d465ed59c2789449564434449e9f48252084aa2e6d11f60759ce6cfc0a00b8673083058b91ae3243f20d75e686cacef8578b08a8d05908bb5b520e292b27014b4c1ce1d233777b17c987ff22d3e10a18a91ffc4852a24f8848b4a3dbaade92278aaac4e2a4e7e99be0c0cc0eaf2e550f634fd5b741a2298104b57742d9239b62da5bcaa94eeefbbf76be61394d97630c7b74987e650a4f4dbe11f7ad95792c00a9051c8e6a2955873c50b6b0639f2a95ca27e17bcf63e5403310427f7a2ab7cdc189c7860ccbcdbfad3213fd893ba7316e81d4dc062ddaa0be4906e2817ff86b1981e3b1bb02c4b5628ac364a3d83ec6ebc1a9cd2bca34437376968b7b30e9bb2237c14c8b59d29c5eb21697e7dc3a53c5ab47054e6c9dd417da3d013238558d8a02312685dfbf1261880693d2976823ab30761d7afcb19e92b9071ba8eb388c28846f68976897a6a1dc20f0475c95c968f4dca9d3504aba31b28c6e22f9f19475f3178555ac3de3f6b967bb92476e9e32881d3799d33628207bb339f51df0f70f2651fee657b4d4c42d3175c934de34a3de6f8e5cb022f42f971262cbb171c9bbc37632dfb63a1e4239c29b26c5469e9d108e09b55d78d1e230366e04e425eb559dc90634399fb1bc5baf44d2a04df86d608f69662b5fec19484cb83f9405282dc9832b8acaf29c7e775df3a07376b3bf7f329ad2e97bbe20a516e3b29842660a3141ef481b2fa437f1f2fb66a17092f202154a599976b1951cbcc944632d14823cd7d618fe911980e413552a222236c4587bf5a2ed2a94de314e6360bd90235cc9077cd185bff3967c14c13f51553c40dd42554c2bbc172e4c79c6c61f2b43c0d453ee47dd847fe650f517b05859c5be9d3eb44e3409f9e3ba75e0c47515df5e3a93fa970863852d8dcc60352a11a049a1fa5a9383950e18a0b75f404cca05712f3b75509f94359ccf5e204a296aa38deec18d74bcc7f82685840c7d0a64bf6bfaa0e5fde78a21536b56a476368c5d2480e3189026821f6e8c5d748d7c4f0ca418a1f1321c1721e6d0a5454d1b4bf559abb9c28c4d729ad38dd3663083f630493516c90b99459169cba59be351cc6158b463e271abdd38a843e9ad56f7ac59e5b0568fdd38db744a3d80e5813ca7ae92488b34478a05b6bc8fd08c653de31c18cebc03943e1607e7cd00de9ed7336ef81509e62a91783afe9869b8127a62c7a00c256373f4f7cc0d9713f38a12017508c3fce89a4be3ca49974625a98ac834dba2d4f1699c98bfe4004e32dc9fd021bd38e07ee45b4d9043e50aa581a75805abe14e09d61c6b0e282a15c19cae2c814cb50a7c4ecb54dee3db50034f98fa7276bf3373495f3a7575832a3fddb192da41ba8242fcb9ae08464cc04961b2f238d5331245387dec77d04d4893a3f58099236e4b953e2355b6640b7bae3baf60c5000c32b7d784df840753b9e17bdf4aa42dcb8717aaab24e735855d131076513d95c75d293614bc1d570f21e590a0a10c365ea4728ceb5997720cddb46ab14865c613aa003657b060e6b6a45018e79ef315a88b186266f81118861610bbf1d5823f550d2108c5bc9abe65e1b739a5dbe33dfea5e62b64649c54aa62ad6ac2ad1cffce391de0e8d8c93cfa669669870493208497c4763597419ebfa7d92da6f252952e4e0ed3199098668158aba336211322d3201075cb1c1273edf197e2a88f3c9c7dfc5ac3731bd697475e1c1ffdee14a31e54b2c6e3e5c74eff7a9c9d91dca2efd1f54474caa59c976587206eca9a22cf24a43a692962b090a6fc56b01cc52c28e2b7275cb7c21b547f135613e9774c92534cea4ee737aba80091210103050ab1d351fd0e43d8e4e5e64c070f87e30ae5c0e10218a5ec226cc2e7762a9c86acb3f90a584493608c22e9ecfa99c82527c1c195cb5b52679ae7b87d6aea85caf1ba1bf545df78179527a171bd2921736a6bd27449d260488b61c9545450eada3dbf0fce9a747d9dfbc47f8f99195ca1a806c6edd8facba3f6d251edf55f15022dd4d8c231f85e5013e379077b54f65cd045715b87c3cc173fd6029a78359a9ba797c4c66e5109dc33ffe0407f004e697e4988be824793813559dc618761845d4a3cff0cbbc0bc6b096853ceab5b99f4dd7c7ccb931c8bd90ffe31cb20eae4f02ddb54df780eddb7fd1d48c9ae93251f15899c8489287a3bf6ab5e77b014f6f2bbbfff4d4debf2608c0aac87265bc64223f9e388f903fceee47382f2330000f0de937ffc2366cca74def205cb1216caaaaa6ff4e3aba743705672aa65f5414944f694e6592ad5e284d154fbdc42509f6e1d94fb56fa6ddcd93dc7962bd61f7ac467d3d59be76e302eeb71f36711697b055e51c5ca9b48a790285a2684c74701a206c30baa3a57a047690bc8cdfb5e38b96b680bfcd145bbf81b22e497bf5043a9caba2bbecd49302802aaecd4bde7b0bc24f2156c6b5db0e99a738ba9e9d3ce6b297f46ed7307d923e528d168ad59e082b835a32da1df2aa18b3cdb55e2e24d8db10c7b5216ab7999c01946e75cbd2d7a23216e2c306e247c493bf225360ba43f8fc9713eda7fc9561d4a3f3d905c3d372a8dc3e797a4ed1ed3b8fc214bd709d0dcd23c34b0bc5d0492383aea544a6c1c51af445621c886f36efb7e901e68e24677c69f9b805edbae77dcee090d4c421aef91f3b21641ad2f447b941f5a401847ebae50ac49fac1be9a641e575e0249830737620426008ca60cca02d07596568fb083b7a30c9141a83d2723deab4e42a4868901e9bdbe7ffb0b8dd96bcc0d9b04ba44732ab81865ce11e9b5f94995aaffe2479dde7c40c7674b75fe3ab9d6106e257134d59fc36a27d5ca6351c64954cc283a41a4ac9ad3beae852736a33be4c9e72b08e8c58a5fe6ab1e4e1ecf20d35b40d005aa15210446213a61951d8337beca97af883ed85a9465dc5a4b808a33e79170a7e283330eb651f76012bc3b7e637a3ef27421a1726507f6733bc2710d56306ad2f89d6cb196484b6a858aa5c46c87b118b83efef1411e1269275937af6aa1b4bc6ede09756d8861a1f2c5449d1ad76f513712462584e5859e9820683dee2638441b5f67d03b8ffddc82346c169df66cf320f77caedc7ac5445c7073283e2295cc7da40b630aefcf954161576e432fa341bdfb58eb4af988a86828d2085eb2887af8444afd84bf90b8ecb6a53422ee0df1ca5845b7cec21da26527182c53f9efb8ca4787b1b42d2beb840a44d7184d1fb0299f037e33498476c494774961c52f5a99cfa9da0673e402eaa7b6d2163508e2d94769ccb021876e9182dc91446c45166ef3d03af79abde89dcc6def0f59c43e4ef74ae942cdf037112a27928bf009a499c8df13e8c4f3b0c3e0b157548c4ddf123250beb8bf90ae0eec3044857e8d117899d6d8921d1eabaadea2b1e8b1f9f97bdddae34637d06f3b981c3ca2c0e032df5cdba210289c7b45666f9953eab6a2e28751445e875d7ac1a72fb576144dcc825005b11261a3decf8adb7bee1a2c5a9a3370b3d7c48cbfd55d1367e355de065f91f48de5eac7527ee18a8cb85ca9e6a0d6de8c3d949e4164bbeb7f0be459f270d0571ad08d4dd5657a324f6b5e462609f79c9f8a9c857e9c130412160eb78fea85e55b820100b5754da67127665d9730d1276ad6197543ff025b459c60fb51d66db2f19c6f062913232519a3dcd347cdd8ac581e3260d816ad2ddb2dad6307a73ed1c31d57cdc0f4fc14dae1696cc11bcd7042e80c6fca287cec46be58f4026b9723b9641e6603a1bbbcfe8e0560e72ebcd10dd2fe385f5d6f58822b76ae6242b3db2bce4f83ccd1a997c0bd491770ddcb5e63627a37ff0fdd8f51f65ca3af63c61f75eb49fc08fe5346be86ff4514bd911c799eeea41443c0ece628005eec8087140d83584f964c8023c687aef8e8756b3073b813ffe929c584f7a86ae44b46fb50783f4d601e08499299a043c06c80aa7368f717df4e9312056ed1c02a06462712d15c2bde2a2e60712e350a165cc2ea304d9a34a68c76a6290a0c311b0004653ae0aa9e39afdded380c32076c5c79c40bcfc36c0366ffe2852a7ca5ca0dfad017628a774bcb702e58e3aba343d40a357279b1f41fca5a33f4aa583655c9a843511bcee1cd7a4ee693cdb252af7911dea6f507df4b72f42e7770edd34b18b45efd4493174774b9bab6486f816fd43d830026df92cce353c8aa819a0d63b17414e0a3d55abcf358f56fe7a94e89ce6c5f828cadd82447451c564b65924038d44454c6c14f1cec4b6a8234b4a43b6a19d614d63fcbb3acdd4ffbf10ee47d1c06dc8d9eb511c25a518fe81e2cd2b17f1dc64905112b66a8281cba966e59a8fa5f96309532e2375f05f5177e39c6e3bf6300ab5cc2a974f437cec2e424615c88e50268a8527d30b916b5d40a038969217ccf30167ef4a8eeb70b5f1ef428dbf6e66f742178506e7bb5a9957ece67d8e277cd1b4b20c489d84de4e8b6a7ee4d24ba49d0ed4fd96a704a0f7e0995a7099a33c13461ecccc56100d573a964b44a2cf808eb277cf660e026cfb56ee579d268519f3e4fcc7ff92bd6884e5c98d5f663c988f00ef07be89374baeb8dc4bac28ebf16471bf5ff4407f28b8e62db2874913b759122f5078b3c00eeb7d55e63a48c6e5d4851c97f71352d85e7904d71c21bf7914834d1808ce4a28f0fa5dfdd122debdf6faf8ae9e3bc9d6b59afe6726130cd39cd5efed16bbc53c82d8ad295512f6b4a348f9b65ee43022babfe906263cc40660e9a8b3d1522c2f8f0bd45bee2ccc66ccfa0f7f7ee455a8efeecfd68a744a21febab8a85caae4c13ea48e55583441ecdd753e71983b61c0883b754b0d5cfc86d94a914262306cd5cc3753333c3fdfe7de81ae134c48fe9d29e878f5d5f45e297524ac380e66a8f471718658415acb2f38ab00d81b2adbe4414e011b8d453ac7594321cf31a0226493f2211ae0dbe441615f8eb8a04d08560a33e2dc44edff1ec2b8c014de255bbc92fa5dce649aa7f9b005169e17948276c0a08e03dbf407eacea6ec3c0c3fe1c1b93d3bd8d81d33329d606f4e68044ad31ef57f63d2581afc0d30ad859761db70de4dedcf748193717966ac05cc4b95b8b59ba2a94b3ece5e34e4b2ecd911c0c4f5168b4857cd9047e8d8f1f4cb12caf9ea3b60fd3028acae36d4781e1c48ecb28b99c4ff5c11ba0dd7c5cc1ef3eef6c43603e071ba7c20c371d77cded37992c74b9db013274d1cbe35546df602c9ccf07ab12b66015f4fd24d3994c7de32c27f855276f42afc2284b25b2f31df8f1a3b9cbcb2a4f2c47e381cb45e979ba946c1463ba88e0afb65da329436b9d4a2969d14d0ebeb8f1208e43757c3befe24dcbad97a251bf0893527b330855d004403e6b5d37e16747d3cd95bc29ce2a8bd0da0e1ac934b24a5504726fddf81b7a7a8ee094d45353417e278084f8003ceffac4de2fd6077048bfc9e4a8c5da7c1cb69237e49fe1528d08901db91ed56771350d74d0c7748a7dc7d8917c4cab1e61313d4c817095dd553037cd9e75f15ef010ffa1e78385037d4a362873b64d1aacc93005c841c0e8e2b473f7029b0480bcfbcbbf22427889ba8a644b8b31b6e84d4f9d86be8d17c12b1d5ad32e8e2f2bb4d1ff5b32f59dd9bd80ee33b17927c9f2b54ef50499b0ec326f5d6140b30d558106f001ecc2651d38b740743828d416682accba7de814b4afc012cdac6929ce33b423f839f08ac1beca58ad02033939c7aceb1a4895d90cd7457c88b08d3787f74b0f5226a7a0ea60c8fa70745289c639e28967e733a2b3719e7c726a935c5872b96f6b3567164fbe22d6c5cfdd7b6dbcae3a509e865b442584fcb7fa7471b3275872ee6dfd540953e83205d29d0311cabd09c1603b6e551e20fee3fc62d7951708490d2aeefb773ef3a7717d7ffe77f5a9205bbd850eb0d034e47a6ad12fe96d0a0fbc8aae5851f94c6e0065203ab59f831521c8d52ecf4b114cd7801275e358a2a6fb8e86816605443a2426b02f8d6b58fa124ea99ff130f730b2bd474c9bcf78ae404b49480c9c09ee7dd6999f17eb2b9b5e861facf919abbad418f7fb5e6a64d5e3450dece1ca3d3d993ae6e782c9e06f1af937b56d17e08614a3bb8296c50d4ef7cd3081f95c370a8a15ce9747db159dc0d25c055f77f767d76d160f24a7b4e6e19f969fef96e6889b4dd6a96633f62f03456eceffad24c71846e9075736eff48ca725a99b1b3f751bca1da9f340e44f30054e681a84f0745227f0c18886d72b98ee8473de7cc992102b39bde2782edea297b1e099c45e0ec2a1734c2c10afbc11926f67d632cc5c2edf82e6b3b0d9dc761288ca604c86a63c7183a159cc3d1d38b9253ffb8b3f7f239aa6cdd963766fd44d1f5ad4def11908bb6833d512e3305216ac9642a33548782fa20ed2fd2c11f0fcc9117f20221b7f4828b50a3105bae69a5f9a3ef01cf4a4ee0d3a83d9dcb83f21a317e2932f97c27bd3f3b9f26dd021144c81ef6b6a9b3c7df29216992749970fcd32f67571e20424975e18fd47f4592e12d750cba8d117fa2ec65518eeaabd25686ec8e19fe47ea0caefcc09efef5d74fdb0d25b8464e83389555f37c4c9a8959bcecae9bafbc14fc89c52c30ce360db2fce2287f334c6f341372920677e9109d82a4012dbbec5b778c1c41f52d6adbefc7c30a3c48b319217722c301c43f50f51f693093f75a73114b02ab4f7b5f8dfff1f2518b1ec2bf5e86ca202c6cf0f207906a018489382631848bec80f37a5b382d570d990400b18f722a3eb655a355082e3924f8b6dacec3bc569917722e3d209bcab89dd5448493980f5e0fc3fccb01f3acf8e453d3090a370484a1460384843d684e73eb662e0f5dc1d52ba76c1fc1dc6af1f9660655032e5e0b63a4c735ab365b876386949746be8c5be24de4530e854762567c370d0fa6cba0a38d748f7dc0c7ac692d9c58a0fc8a5ff4e0c824f1f5cd4a64db871f10d062396f38ccb2e9dfbffdc278350f5325421bbee6d6eefe4002754b995be1a7beb45c23e7b9735ceda87414bd59f7662c36e1e156b3debcc13ae71bf13a2ad84465396bb2855fc6d59eaca95e039e9cc1f43d3a9cd606ca30975e723c118480bdfd75d682bf4bd1e1afed2f055f343e1c903d73118a5d1409d48a18cdbff17231bc51a75dd1f2d6faf690ecb8957f15515ba779d7bc258bb0e957dd43fdd3cc765c41c8610015bda33cd07f2f7b97d7366675975588317ad4dba423527a820d935c8ac3b067916beff3343c79537e6d7e7cec2cc599bc4c98db78d0522842bfed05ff2f087c146fa83e00a5b2412169482950f0d8d7a57f0579f596cb78a0950d73a5e4bac6dbead54214e885cb163f9535188c082a74698231b8b34b901098fd13e0997ed8417d40f7326ce9a93a7f0c4513eae3af0e99cbb61947bcd11699b1266b64da80e021267fa47f29d70666ca44fbb9c9e38281878dbd237ca0aef7d6821615bf7846168d6e6f45e014268f6d0df9c9ae310443715b8dd29df276c3872d4a4509151539b12aacfa5232b2c57882a0d1f974d687014f6441e11a13118ae3f53cafb4c61a35aa797d198a017e13b19782347734d85eb1af63edfe701fb75f4037a5f8d5776756a4f4f41ee0739e28292b4d977ea4d43350049b8087579cba783f19d67c26f7f46e235fd08469f535ef6824080e2e1540307a2ab127cc433196210ad2d1b1a0d9d70a0b2b862fde33a070aa76a5adf82965b92ebdd708dfc9134ed68ca83c2faf503a515602f74300546ed7e82e36727f4c9e4bc657aedb0f74a13f6e6bb2d2f7679cb4019e547ebc4819064e68956512e6cbcd74a149a48bda90c43ef84e28fc895c3a1df369cd5a88286aed7a7c246fb3dbc31cc847f64b505dee0372bad0ac4c82fdc122929e01a8561e8d7b060562762a59313493c30e24a4d79be2975657fc4eebcc6508cfaa744cc2ae48190786215545e0b07b9a303ae5a58af3859762348096e0e29eaf8bf049aabff0a5124225dc0b82d4826e13bd3c82f68fd9bbef87b5a7457a8fb540a67c7907a533af356f83b1c643236c252ad5ec79baeb6c3729d7baff63991ed25599efa5737d0e07ee74cc50be071a11d1cda244569dcca6b848bc57dd52430ccac1e2f6dc48644608ca69fc446d089f0724c130041488dc5a2dbf13a978903f1725519672a7692a4c51925f90807cf2b4b61dfc92d4231ac058453e310d7326261ca7304fd333871ae8c2265baf1e13823b19835de0a8aa567d30999cbce25b6a25cb971b87220bf1ca000c10251aaaa8845b1f13d8b7de0ea3059247405595af19bff4e57d9a4ba41352b36e723d38a61173a7b763f3e74dc13e44b4acf9fb172fd25180d971f6f6eb206d67181cd7215f80bc1fc18cca804b7c702a2865e35558100e2a1cfb7a78baade7b589e88d6d4c7ced89a77a96b9307f7c61349b49707c5792a5f34bad730d028a5bc88938c727944a1f51e80821d3055f7cb48593306deb0a69dfb38a398e7705bc0d2b1478f667a767dec23934faada3cad869b69fe7733c9873ebc577f784dc4eed7b4a1be83ba3c76e43e08e825eb66ae2e367cb004d5d6aba8c7b4e4c09b8d0dd0201ec8e4cefe433e6d8ab6cdf6f7758cd507b8ecc67cf8ebef3a4323066dc1006c3eb1f502f300d2a5d6809789f460a9e808722bfb77a72106fb1a039d84d4775c5029a8a367dedaea7616779b06e91655230a40b3bbae3832e7598eba5835ec22c756c894fac3b4ca3fbcd26d4c74e46bd085bee0e397bf3a986a16620ad150e2ff4daa8697759937675c7b3630ca3b299e84f6fc5e9d49ec5d09caa86111bd1d76fd411cb3ed90b06f69ca25f7d28a76b07f192fe25fc17d93a11e661a265d32cacdd418282bd1abc6f2afb6af4e3013eb5c3a00ab78e5808b6c1a7876434fcee4dbff253366cb6ac3c498a40bfe8d101d5675db0ce570e679534c6d451d3806d3d501aa112150f9cdc65671846fabd6f05e5ed32d0a0d3a30ff947c3833c1290752bd3764fc8ef9d6f4a9435fcac15eb105118879196650c5c218fbc3807ee108b9b5d9b4413346f71ffa0fb274f3ff70c3f964d7f3af2dcbb734724702535b5b2389e67f8dea0e549a17bd48c4cb17a7e23350724531f87f0db5c1138b94293eba093dfc28f5651825de9bce055dbe6c45254cc84f459da837068d251d84749cc365a3370736182b1697825faa85704553cf972545457a7a301dd61a2eedba983369bc7f4a831448d24742fb6ab7dfa19d4a627bbe89cadee5633e32f734929faa858d4b0fb082c434c3375647c0c85bfdca021e925d7c99fd5f7fcb55fb280a44d4f547361efba7385587ce667f11c70c253442c0fbbb23d13853f6cce5cfda11ef1768e24d4d359bbaa8bdcbfdb24abb23a9ba12b96ed4ff61857bac82cfbace8c5789bdfc730fb5626149374fd67898cba69149fc1d7a904f45efd9cab0faf8053a97df17b4afe505af6f94c5b9d829ae5be3584e4f8507aeacb15a515e9fb6d302a53993334db124719b4a5d7eac8ac8b900de17baea5625c37f16ebca94952a054c94b0746ace4126a2f8baa681d016be4c684d218f80764127320b46bcf1ec54048dccf30d7c52380f0de5daa52fd74acfb76808ce02fb926b26b32d95af0104026ca50f7b42fae33772f2720cfdbc0b4e1373aba99e0b09e837b8e3a4bd371a9a28b45d6d1ded6de7554eddfe4a4287fbd22002d47253b7228ecbe0f471383d5fe69eba1a01340982a08ab0c29bf119fe113154feece86af8f4c197a53cccdef1784f5e6a96414bb597488afff1b31f16f3330e0ffe5f2c5f3703f44e518438db5c0a63408d6fe27559b1b4d757950e7a3b15770b199ec54e2947461fc334938b2835a23748e72b565e309cb9aef1619312577ba3f574716d703730f7b4b151b147aa43be164300a45d731c96741f7d324b75fa553626867be8d64b7816568f89d2a69aae88b68fcdd7ca59326649787966a07026762676c984c47adb5bc30c9eb8e64e9982540db834d524711a308b81f15a444d936f78d8cb730164796b93c5c1c98b6beed16e0b9e317d32578e7f2aae08912ac0cced84b4633c824496aa42e7cc371e54846de83308b36cad0b87b3450ca922948979078fc0e71d3e99e6dd749d703872aa2845a41a66369551333aef3ee27e352401c58c82bb697aa6494ab1d15e63d993606d89701f409508c6847d6547314126c9072f9f3942fc14a87ff5e5a83ba1678ee7aef08e35d4be4273a6bcbec4cf595c854457fa905a811ac78f64c0dbef96769f53ee172355200cfbf52c67770e65a968bddae6507c90d4220e65e2329b32eaddddc9da428ca1ddc243fffb9395392f94a619d370fbb576a8682046471920fb57f5675fddbe650e23f96b4d14eb90ea043bffe4470bd1c13d249cd92a40dd594192a835f5c37d372c154916204707a2cfb3e571b2ad017cdf2630261aa00ef2a1ae3822ed0ce5e352b3acd203b09e1960d3cf204fbce5d3d3e5eddd667b659cd2fd980b7c73517a7cc65ae28e3cfda76f9a885c64ea1c3bc70dab5a136cc77e45b223a86a78758eb9d3d414ca8de54a69c90d1bda27cecec8d01fc5003e683d459fe1400b4dcb703c3d71208f280f51f1e948192359774ac49ca8bc20c8f96d549c5dff38bfd5c5d8f76cdc701e4f806bc3b6d5fce76b9c5cc59853d3aafd3c41468246f81d9842a54ecb2c7a01c697dfcb3ec0bdb1ae3cd10f8b215def0757574e87bd53fc7a0576704d6e6189b0c6193c5263a711266331058bf9aa71b4600d8a4383d3cc18690f3354fe636db9bfa0b9880109d040d4778f2d485a168f430caf816d604b2ffd4a5c289ec75c349e7eeec592337a35867ce3037f5738a06d21e637bfe35236ec52e9d40519f3a07d6ca7936cd0646a6ede7b1650839670d78419fd21e750500c8332ba093256d04f683831e74c2e7b56b4d548b66ce2a9f8683c659ee014fc8ebba88aa46ceb0d0405ac8ce263f64df8e9133fa95377f7c337268efe27989f0d7cf02bf11a3f77acf21cb852d8daca96618ae0954892ee2f90b0c94407e77d00a3a426117a755de6256cd0876c3651fb125a8a9bf4577b76975889cae9e1d79ee25de3423c652840277681f2c44ea4824717c9dd972c53b4501582c1066bcd700d65554e35b467ea473d2299471d479fa8a997ae76f65cccba80cfe103daae0872877f510c9fea291cdc6baa0d8598f91b685c68472cdeb03743a14dd2c09a793d7fa6ac3ba014a48e065bfc2a0d046fb1800fab6903997e63b07c63cbc3f5a37fe45d8fa964b0125526dc7be2da82e351515ba2a748f721c553b9dbe24c681a521666cc124864134ef997a42574e02072ed0f2e3d17a1206a1f8306b09a7b599f93a7ab6a95ab0a20cea14d9acb685b3f82285ceb5746b490dab34c46d1df2845a8e9590b9eca06038d434cc63202a13a4fa955e0ab4d555edc9acd4e9ca8b10ea430fa37581ca2ede262b1c188fe34f7ac8638fbc38cee6ef8d43a0b87b5d1e5f71ea32e17227f36fbb6ff779f6acbb9087dc24137f379011abdcd1ad617c8c936a0a44ecd75a690c0e1e7701dcaf53f5333ca757fb6c92e712e117d59ec75d7e3ac4ca63a33d7c2d92ab22bed6ef49d4eb04f37e5cb134c2fdab8f4e027156fd5f2b370c331ecd51f72ad0cfc576091f57e05cf3f6b46f842ddf319b2a0cc5467adf69e7b460e8b8ebc52a97a6eb43dbe56b3aa3cc8fb30ea5ce10a4bbd8d1177361b78f10ff0317af137f8374c8354f9f7b264f0dea8f2c8f7a1024d47cfa2668b82654cd72121f866baa5a7be3e2990ceaeb6dc322c59eb1bddae15569b1b3fd89e298c4b30ef6fc070658fead267a89affbb95b4ac15b61c170fcd5725e0f9e07a126ea04bc3522ff8b80b46b9cdd8b998062897f907e2eaaccc5286d864fb51695696a938a93375ded63eadd008cfccf7eed63e9c09f15ecbc13127d3fb9b260627e0d4413641c88de0d987585cb3adb285f43f59b4ffce466dfc4d60e8f08ebe01e1194e78b9c4c96a8acf0d94cd1e4f6ef24ef49907dcd622f1719c96c97f31eac1fc916e73e19226a54e0dce1ee69c976dea4c5304298b31407d062feda940d97106a7349c7fcb5f22de4ca91b49841b74e65a38f535f51200d7194a4fb74df27b7da87376b6da92b420ef5dc381ce30645b713b79ebdcb0ca3e51025f9906de87737a85adb12a243733293151103cbca7d6551afd6e426dbd4b24480ce43cb0af399fcbebda2c1dcefc9b59bc80a590b193e4b47426a3faa5eba86cd3e832b01d9dfc70cb0165efc5b436546c3b94d96a7c03a06420607ab41fcf23948569e56bebaec34bda2b8de341686c7d4dc1999854df2d9317b271e7e9f5bb2f024fbd95f8143772d29344b7e7d32c2736b44f6a018584888d576fbef43520b2c8b19bcd6c64b0d059722f9cc4522908b5f8b6a79ce14b7a1262b051c782eac1144c2722991db982cd66f5a7571033a75d226c24bee7ad81a509ae5b127d35925cf883d4179dec161fbb367d1d91930aea1ea05ba880e205fae628f921f3ad868300c907087dfa5b640688546decdc3771e0f2c60163ea760e16a46305813921955a7b05c07fe8b10b64c61d87380a1295b4c835456b789e4bb4fb402beabe1ca712995a07686bdebd70a3f18dc2428ae909d2dfe13ea5509803d66b1043aae2b3ed7ee3e0b84114d24c31a2539136460ddff4a85faa95a76be46d1a8e528a9a717087d4a13df9441dbcab14ec27321b943ac788f68a79145832aa729bc0a3ff17439801e571ffa03d7d9101df00ad95bb4ac441e1c14667180a95fe595c4d7a2a328fe5990c1d033afd7a872ae08a97d9ced810e2ca6bd793d8353a924e2c369914fc3b0b3e50e2be57f2f143bab37ec65aa9cd183dda0a1d4bce686fe9ecba1f03c034712e87183834a9b8e4827b21766ead28e5cb6454fd7df906704a61ec4ded31f4559ed171da8985ce4f48fe939f239cf3c2a5fae5d40ec939134e0f556b3e93ebb7ddb5398403f7a424d579a8be7551270705c7ac2a19c3aa750a2aff8911e1378cecb45a6d94a9a2c022478d2078cc735aa3263492f24b61efc471116673c77066e6c4b14e5472887797f31b040997a95bd3458386727ea57cca6c9109cdfb690b3ad7716b894ffd697789964920ad980dadaf19b071be4544b0eb5ab50c5b04aaa6f85f8095b5a5390bbee8a99a5a300040797510e66a5df34d2f8fbb13a56fac65cef08f3848df6b6384d4b2642396335c0bda1f430ca8a12aaecfae7078b9bb20c3512589f64ec0e446ea27d45c1c81cdbfb2b7d5d51d82bcfb1246b3c3f6185e723de631d80a929cd5f3343dc1758610bb17a09725db1f1f6b310231cf7ee810c3b40f2471a8a6e3a299c72589ac0e1756c349481d63c5e6c7c14f770cbd6290c2b0f9fbf80dd2e32224edd7e02fdc82429dbd28039902774a235f2062ed7905351b4f316cc7efd2d05eef27ba75da822d2e8b0f54b76bd0091fdec7021c2b92357c3a401c4024ee6157f11487128b98d37d1e5e397b6d7b26d164afc9af1583dd032b2c6c8b3957c9623225e0d395c1cbd1ecc0d3b6ad1104b57d97c329d80514e19b9625281ed49f8bf553180c600bc6d85d340095037294d12e15277849b2c8dc8994e385bd81c30cac79ebd8189dbbc4015df49d7be4bd0ae267159d9e71330fcedda823514c1e5d0d6f9fdca9e0b0ce76a7ef4a050ff18229786cef549217f7c59df52fab0e4d32fc9dd1d49abd2eb8be976c4e611e5ecfe79622617960acba03acb66a6e77801629f4ad6c2a7c5e91ff9de592443535144f34a6b0879c766814aafa7c482c414d85149e3d0afdfd2ac4bb1d728624213188c5f31a9eebacac308266cebadc6f3fb505d3f21f1907884ec7ba04ffa141a489c08985dc971995cc9d8781f18097099edc36b594c486d3d52f72091bb1a13435d8c99b0d8bf3cdf779a24e9fe674f9973c4590895bff3760ebcfa808404e97dccfbd4ea73e5ce671308734d83228f18ad5873e8ab59c415b5f5bcb1b6b07a2443c8f7e63c7d1a358b8b866095bc3bf64e911c6786427bbd65ac961cef90525b6058133a4a89d795e6229c11786c82448a1a2fa61977d755050532724588948bc31a11ef2a92ba3c6cbd8ef1416c067324f33f5e87e97ee4f46b30a6781fcf7f83db2d53106db28aa14b122e0cd1fba119fe5edbd572ec2e639576a99ee4a9577ffae87529b4e051553bb17ec283f0975e8c076c2ef35b3476768242ed458aad25caee1250bb3ce1f6b778db95f6356817bcc049a1f19f92ea74858813c71c8c35dc2e5c3f9c7ee8d448b60b2aa8d2b27a96b71cdfb622767f7dd1e82086a6d2eecbf378369523e1473c7eb99c9d444a023c8b44b7747db69f121580821f5a519e53d341f0bdb9f48060ae90359c429f23a87767c79427ff070f67e696b60ad77ac61854d18822892a3082b757b9651aa3a89dbfcc18ab068a260daab9a22ffba34831c06972c85bcc8edad25427ebfed66fa6c7535f3b9d4c61be04f179a0fe5c6cb08001c35fe55e193b1754aee128614d65fd6dd515af16e744a24991161b76c77360f8110b7d83eca2e75d4e11ee26500fca5e51fa2478ee03d5d57fb503b667439fafeb23765b2d43c7bce6bf7ce691b06e1aa83353bf7e5f91eadd6321c93b05dd9b2f90117198a905e29bb3901e5ebd7ffc1de23d6eda713c21aecfb6a73897c3b5cfb43f2f65dd8162587ecfabaefc7454dcf70d12c995733b24284498b383fac13bff82f5df0a6a5f81e8817b3c400afebd22b35a8f9193e39ff61dc2cce19cba86c6269520f100bb6781e892acd46120d055894aaf047c7a681ae23dd7b355b835738cfae012d905da491b5aabd1522f2c452da89cdd0a297cf1bc200e27e25905297a7fb17c945026e35cc8c32ddee0c5502a998469d3c60bc50249d726e85ffb0e113f46f6e0552b116e206c46f97bee4be6c1218aba0b31547ca23f712e5224a3942668ef489d60d23d166356b0c92998f3e9ddc3d5072ac70b8e6b8328e572aacc17b29f3ca8e77d66ce78f2cd5d5e85185e88b0c606cf8002c0a1ac32bab335ef0215a0be56852cd570f8462f3611a3834cbee5dd16f244d3ea87acc9867b4d3b5b969ce2f9fa1e531d9ad6148ba997f013dcba1519cc2427813867c66de4bd2fbf996be63179284876964783ad488a9cf1447d3eacdeff9c6a6c86222a75d579a08d8918a0e7e4d75dd07ae616b8063a65d9d3e9a3df116a5bc5c60b45a38f50ad25859a7ca93b83371a92d66d63af1ec3765869d6bba7e0ac622399e30f9f15168947bba7c5ff4c4b95eae19069940d8dd4247a18ff02044db3285e74971fa7fbd46feac968211289b3b2eb3d9dd0953542f135df4c14f949a9c9360f2a6ae9392167dc6cdf13fd69eacc780195f107fecd3643fd31dd6fedcc4ab5afca2ae4e2b6e6109318ac7040050d86e121bbb8d168d89de6503bea134c6fa2f701acedf44ffd9fe46003957247cdaba7c30f2faefbc3277b4cfd95fce1d4b09bcbd95389f2cce7732e954f57f71de49acd27895876b73854b0373c6dc955295f8b28fe8f4c9334c55cb520e72c7fe22bcfc747e0d387a6d3b394440344a4ba628a359945d29e8339eaa09412b827b59eb530732879cddbab98ecb74ff791aabf82121708b215717a0fd537fd3a94eaf14b399b6abdec02c0fed7babc53d453d1ff3fec2a184c9fcd985a46b8718f8d1b1d61d4f15a7f4542dc4b8960e1beae5979748c9cca06960f7f89cb26f3fcce574967e8d29446f5d0b422ca651e7dfc32d2c2f5f0b2769d533fefd8ff546dc28790aaed4e3cedf051fa53a39106a21a39c1006739dbc1fdb026b687b1fe6709a494977878ace56e72543e8adb5ecc7a48918097bbd3f158143a4cd2646e7d12e3664cf1f9862ef78292ac9b3e52c3761e3a917dfb2b292637d9dd5569093a484fae21417b744175956f0b0e840f7ecc14991818db8c18214711da9b31ff6893bc779515769e741b60a6fb9554f71df0f48d0d2caf87cecb9edb34d62232afa0492528ff9b54b1402b913905a1c7504aa1bdb0afb78b8152f63da5f90b527d624a81c0089f9777c22f2e34ddd8d97a665c774a1003cf82c7f9ff7d7bd37f423e59b3bea3e285542b5727d820b94b42ce54c2bc07b5100a8b47ff7802ca94b286e15a0363e38f5d8f95807537979a1a5a8792c3dec8ce43648a47b83d0b5021172c68b53a00de7782a3f1d485781a84078ec493a4a6421e2842c896ed8ebae78545821feabf27ed25cb4717cd1662f9da17cfdebed0097fb723aa47e63bbd3675ad7e8286a181c60eaf3477872d7497dc431bcdcda0e9e9607547ac67a41ce1e83097fa59d8d707a5787a764c2eb042cd6f94e77eb2f0321f8b3afd29e71f3fd434ca497ded963f38a41e43c928924c1f5fee0b2988ed8ec096efe56e7ab968349867e49f551b8f608f409636edb594046f1593dd34577e604e13898ade9ad2d4cabf7ca6c502a3c6d8965d851945e801c86cf7ad991ed59f6f551603a9d9c8b8dc7427e1be920152bd198ed1be744005bad0dc2c6087fe15e6e450c3299395a1486793655af6d7625d23afc7fd7267ea7bff25f2423777fd3724ecf714785fb87bfe5bafa2ff8281948210f90daf6344d7c9929fe687d69300e0749f5183c11afa55a386b38218b8f8bad3c0db43d4d0cabe5beee0c7234991347cd2ff434b4798e17a13cc32f5447578436e44d1f81b8651b21853cd2c4a22c0f3bb0e4524ddd1d57f6c88045db1c13f6069ae020d77139923f3130b3be7fd45ce2047ba7764e979611a36b27fe6d48f021b06cf7741d0cb92cba0efadb8e67a02774c262cf652e87a66b2c0fbb6ada8e8d9f5e8dbc33e37e048384827206cc3c0c7f28b489dc856a6435effaee9b399b81eb4bf698bbc6fffe58755ef93dc527494999778162636bccc4bac1379cbdd1bf8656666ec9111fa152c1b4cc5c4e66ed723dbb6d7dc7576d695b86d2a9ac02d869bbe070f1e3348e0008e9b0a5e535dffbb4a56a4465d37c13b3dc375ba64b2cb21da23bd751a543d89f843b24b1b59f2f16ea07e62203d7640b55147833cf9041ed03839c65eef8d2941de10abf2a15a92e0d0eb8201874afba729d112dc56998ae9ffa3fed0825a9ab8e018153ed28273ea312872b150ce391e8b489b4bf2b250229193f38576dfb952b6cf15b931d611444f1f26368a59e0d0bb2963fdb5832fce56ad4a53cb213fc48fa926dad82ee565f59d1672c26d9c33780d6ebecf8ed6f60350923238a70af8d3bb0be14109b31977c29c1e858759230e6a5c408b34573da6a412f6010438ebcddff454742bbf43a6deacea06bd46e3f50bff9c6233b630374c897017aa5961c8c602fb7ac92513445df76746520b74486dcdd110c5dc8f5c32368e109ebeb3a5bde372c5eca8ea2820cbf9c7556eb627fe61775f90bc556eaac5503298a9275c23bf55851b57b622fd255c302762e1f8ec7e59b9b1f1655e0ba246a3f5a97624663d3c84dcb8cf47d509ec29a2d3b4343a8466e0c66795847fe9c5b63d0f9a7bb9fb7b82f585634f757b235c87a061f1fd1390693036daf25ec7f71686203197a8f505690bcac59097b28a5a6784b86def2fa360b145a40d7653026b15eaada6032068afa60f3aff83b07067381767f686568205b90d426654fa5c75eb84f65f5a445ea67082bfd943252e0d15869d345c358e16304b04e145cc0799f66f6729cae8e3910776dfd2b068d5440fed3b7b25f3c8b7291f48aa7f7acbf9a2f88faa18df37eaea6e3b9d73b9dde1b033e9b183aaf7beabe51ca7696a95efac247caa7482261ab4e94a2d70676cc5e8aa359d2015d03e05541facf053d5e90708a59e36c40ac12d462f7339fea8b61fc0b8ab0546c0eda4f35ebe5fe4b603bfe3596c66fcd39fd500dd9acb55c5119fd74c73e4ed59ad5ad0dea20f3ebf5a88f289b7a70a5214dcaa80f683b9a1caf11d5c89359099ae84f7fd181860a04c4aee4df06b2dcac4f4e1af66c585f5976ed39ba2bf48e55baac829c0e8dd1bf89d5cb64f21157938b38335435ab70e3bae48b1ce1e18bcf81fa9d191dcd6c9d3908b800aab108e95df8a52e58d1db1507b1bf50cd9b13fad2022d1c06703e7ec8df5c921687e4b451e83921fbf628ef22d4a7941e137c6daefd80f0c16a3235a27cd452c2f1c53609a7f98d12dcf35ad970540266d63c937080e655a9164b5d81f2162658aaa673838928b702d6ed3504c3f10702f01a21c06d871f7e6c46f997b2242c8b6ea3bf78945d411c5934a8b421adb782b02426e4a9af403ef9292340ed5f643cc78a23b749454c90369fd7a8b31c6207c5f9dc7bc1b8d75fdf2039d8103b25e2ce6506882aee87644a624783bb45a3108dcf15469bc2c86f5b3d84ff5a910afee694ea154b0a69fffb1476c38d6b6e88de9d6a464ad226fcb4f413009f87f78fe7821412aa88ea6e58215c91e4f921961196ab61b64dc9a90ff9444cc0ab7ad06872b69749e3411b586dfba7f8a3ec1c2944e83bc1078918b157b9db6184578760019e5bc67267d2416e876d5b76d1c8052a8d5391a12c3df1fe45b980d9ba4c3c7894c1a194d0ab235bc5e9190f67d96118e30892d3da726635b4a67a86cdc06d7cd697a30c78fc2cb914f0ee25c4af95a77769e0bfc226303821c996a4daeccc7c9c36bc4eb000f64e2d401f5ff90df51c11339778702a15929dbe20200fe2b0bcc826d8683e8038dc21bc2e4dbad788aecdb0ac487a7733ef7cb20f57d8a26f6473e51c77c46c63375f44a7ad805722f185124aaafcb3dcccd767130c16963496837afec3fd23e4b81af3859966005e79664503fc3c2709d1a330df2168c5ce110b798006f91c067d171731ddf442b830f78ce6e2c01327f2864a1fac022a673db6668ef43bdecdfc0d6e6f50bcc15f33422e7736eb432a9d48863231a434f3c95670425dda81e9ca32d51195415b689d291c1c935e796569c24d4b700bb702f1d56ff012d146c6f0968cd375a3e83d7960cbd01cc08d2f2bbcaa33fca8404ce91d5805f970abc415ca3ba859fde8c2c9aaf3d7e41af57ed2c49df77dc21e2284f9f9d338802c2f359b9a4396e0e061646e69134714097b034824b043a57c76d4d031ded0944d0a93f07d2d72cdce54489418bfd52276663c72f0bc4cf455eccc061417c3b439171bde0c53052b9b86ad90482dacbd51f9281fc5abb416cf37de513e07531284023daee9fbb1dfe976b93267717094a131161709999c28b6abd95558b06a61334ff26c1322df49fdde66137a1dbdd3ab056b5fc85e277af7c6ae89c15027845f13162b2cc4d8172fbf70caa38acd7eed08aec01354ef264fd942a80324df52aa2e97fb98f8e1f5f664c02baac5c7a0311196009f2ac32cb04133397a9514efe24be1a4f62ad413d209654b8b8fca69c2c00fde0e888b258ab280c2bbf9e6063b6b708c4b7b72e164663cd92e0278eec4dbcfedb92101d63fddd8550c95a42dfff9477aab8c2adc6e160e9ff4ac577bcb4f9f94aa2d4fda13ed8717add776dac82582c1fa0c39bce3ee54171eddf5bd4903bee07321a6b6be3e71ba19c66a50e3c8c19057c9c49e370fa5de9b0d928dacf04c931f13e4fb61b59cb3eb0e25685dc800a97151125d31076fc53c0cb36dde4be4caab20d0c5cc4517a165569825000883022856f7cea779eb638e396a6398c1591abe91230414110e5e70966317636b51b89f42c369c6fbe762f6d35242b54fb351f66decd819bce678af27b96f632eab245df02fc32ee827de15ef3184529d6050532bd4f7ec496d78be331f46a77fec1bc7e1cf23764cd8dad6047585c27257d6f1884e493edf6d3b7544a046c8360e1e9167ee0ed96fc5acc3f04b0cb82e54e6b04435feb0d60941502ed592ff4ce3bab59fe5966492755ec2a3dbb4410135dc27119f5ee6693b3efee0d87243b41cc56a6a107be03e33e2db2764a999673405c377045ac3085ea71aa025a9e482cff3e140627c06cd39e5203d2e2b2c30d5c2c93965fad71dc3bcdde0fe218d9a090fe8a5a9dd7e3b040ff582b0a1d9ea441a107b79630ac551b4fdf4f7d2c3017f76c6f004420bf1e0a088ad0a26052bf071d996e59ee654f72a93cae760a4c0d0e25446bd9cb5080eb6b2f9edec5696dfb20d2dd4b5ad1fefb3247255ed7723a968232d55b1d7434959129dd01d0151db270a4ffee05087d3e34a2bcfa7d52c575e8a129cf11d9d2e4058c107c67a98485c9cc377447c6bd09491d037abeaabafaa84ef2759739ab18b9cafc05cbfc7fe312d92cbfd70890afd6d44de29667373a5a708aebc380f4aede588cc745471d990be4c51b6cea97defbced189d592b9f1cd6efa89c62198d1c8d87e5d713e51f046899aa37452cacb566032ba988ab83796449759fa799971542ef831eb8bb3a2976ba0b7a8d481d7569ffd79b9523f3891e0d0362c9d95a987d309a3a4c82afc4ca8a2c550b322d0352dca0a4af57586dc316e4be17d12d423c67d9f16e961cd134791b6a1ff565a973266b81a40eb2653c09f5a1b764105bd0c11fef471ab6db726c5d82fcc3b0c7c7ffa09ac055edfe234eb05146a68989d70b42a52c0bdd5431a814e4bbdcff25e4fa4e42111261b174bd801230292e5ea96646516a8c6a628a612c7dc01fd3d66419221b13376e5b42b87248dcf55191d69bbabb69fde30d0cf5ebe2ab3816bdca98abacbe8ae0a43937622c2d6618c89833c275ba45d0c052b15134bb9e26217dffdc07144e26a8c32ad9c07ddb27c6a803e1db2de4aa4f2f326a5ece06479f3b97e235c154c14325e73dcda1ba85254fc5b8908b91250d4d41d269189bdfd2f9958addaff0c018024dd38d8200e396814966b63fc4c1e5765aaf7c6006d958cd8881bcbdcfbc26da21a80bfee35352f18870340e14fe90ac2336ad6c9974b33122cb239f33f32435807cca112b49a4f048656e57fe7cb5b9a9227dd711ace682dd49af23a42fd2c0e38e4b62b9e5b2989795065ac322d68ad720a5ecf9f31b50e4ff4a3e446af867370ddc022bebb5a1854c8568cce1ee70ddbfbdd01eeba7412ccbae044b5e156f86e7adbad18190580e652c11cb9c4d6448de0a45344e021331dac3a8ceedb0f385e83d3f20465ae7227ac933f68caf597d65fff5ba6bfc8929d3357d46ccd2538a6e8b115c58e865789956d8b6accb12523ffadfb07dad6759a167070b321e2066462bf3f6707bb102fe426e68d36e2429af1dd2ae066c1075dde405aea98ffe647c4a76f75f4d9813964068bf73ac56ab6616d4e5cb69ca28dc28061003450ffb0ba8ebd3a29ebf526991c8e68c16e95cea47a25e7c58dcdbbfa5a94b8318796a296080a1db8e837a05f3e18b7e01c8cd15b910265499f05766b1ce26c17d48e69dd4610a8d33f4f459c39c88375ffe742aaabea11a3d1c7dd6dca6b9b6a1a4fd8a9ec2fcecb5437f122df5262da438cc4ed8e0fcefa67072e49dfd96bc6dc13e9f27af38d23577d3a895409166632e94dfbb555b32d739c626106cdd06559b34689e34e7c1af905f2bd0f0a1b558d2dd1ccf352f7f4f773af4f5c4f3b6982988f571fc0693ce871e71a9142d2014adf11c35e9d7da0d93b7c9a901bb1856e44dd2bacbb74814c46e44ca96023684ef966dc7884b7aef5d34e02c7998b4fff12ef5146361ea5765b0c84eb8dc41f0ab17e2bb9609bb177938f9c3396330527de5956e49ad3e067a1760def24ecc6ff985fca983fa6a5faa0665f36a2e34503f89d9434d78fc6c3dcb5a999c101853b20c912aa2b5b31eef6143b52c110b05fcab4db541d7bee71a11bd8e1b4abafb182a672e438ca9ef855abed17f3ca7615c10634172e2e449c5dd756446b1882b2c7f8199fd886e421b596302a53d1ec6a06e92aa8dd1de8cb67a3b54291081c416890ccc5c7751e47ae31b088a2bdc82652d688e53dd3ce6a7185a89b8ff9ca4e4a0026db046710af2c5e636fa3b358963840d38ceebcbaa32aa0b0365c68d58a2fffef392</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Alink" scheme="http://yoursite.com/categories/Alink/"/>
    
    
  </entry>
  
  <entry>
    <title>2021年终个人总结</title>
    <link href="http://yoursite.com/2022/01/31/2021%E5%B9%B4%E7%BB%88%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2022/01/31/2021年终个人总结/</id>
    <published>2022-01-31T06:56:50.000Z</published>
    <updated>2023-02-01T07:45:48.586Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="458037a99bbdb745995d02762d9d46977fc6f0395562b3e828a8c98aec574143">49f7eb9bea6cd6a47e660ee8aad95e5f9a954d8b48b2bb794057481bd08335c672ebb26e00f8739adf909c35c96c842814b748dc6d385eea9a4e70a84dc5bace3dc33ed807ee08d57c526b6f6ba8f248c9a07fea839ca4d90a0fbb409449a3ed942e9f26ce6d9c2b17ce39131b88af5fa6a069fb7898bfa706d80ae517ece6828a7abc38810cb04a2a04da596e3d71d92cc82fe798c497f1ed41277459571c58973268717c0f758afa3885c997568df3af0900da59b89aa4a0587624e67c76f0ca9652984b8a821fa950df2adc44d213e2d1f6b19dba94dbae059a97cc6dd5c90a292e123dc369179782a8696e7c94e2dc31c47aa60a0688c87cd325e5f01780cc7e2c8dafc6da76657fa61a6578101f0e272692ac082b7d3d027d9dbc54605787a63a3441ad1152f8ed12a3d6839a02558217b255626ab6d1ebed5e213b9864aaf2bf5774e065705afe8fc04e382df22bc5df556371f488917733071c404f66a470427ba0c7ccb7c1c8f740c7f3889273d36b226874e7f6982d14c46e18ac90a02aa0f7d5a8cdaaff5b035e8e0f9d3ed8cbef10719d90a8ee550bfb42342b9c3840ab6412297cd35cd168873e2f9a5db06fb4ed297e28bf0261d17f866c94533798548c0556697f1e903da24a6c24aa7e8deded0a720df5b56de9e7c55f4f72f4a816f8b8bb78883be61b069fbda0c53cce61e1e63650705eaa6e76841832420ee1afdd36aea8c7f93bed34947f848e7e8207f3145143f3519523007c4dfaceb64dd5bfb5a022e7d9efc8273fbf40b34526ecc8a4cdba137c02c0c9a073a25a2ca8b8a414c6e284f6702b300c55f40b37fac7620714a404289c164a9a693299433c913d8682731c2193ec0f3385b7561c0d7dba9558f661ad018964ba0608f151643afcac0865bb3f46ab51301835e5bdc2d060beff7a25d5a39e2c649129b0baa97a3090e4da9e9e1adc366a6ca42701d07f67e4344c3d48d3df6b6427c2ca11264cdcc2a0cfab0ba8f26beb2bdb9a49bf9ae350446ecf21becc586d0e16bda131b3955400b2a7e1efee5fef5287d59f03515d0d8bba256ae64abe8e004913abf806fcdf2ba2b8e80cfd364792c88546800d70e675fbe486bbccb619e26b25131d4bae3fcfd93eab89ab784a4a05b3ab44ce31057d07be353ddfe34a9fffaeb2c7a194f964339a5f55cd06b58f51f7f187a51d3905b10b451b9380d107da13acfe59fc030dfccfe90a72a1d3557e02250f599135f868fae908121f0fa3bf6cad3a2ccc9b364a655a4deb5292954a6530d219e49328f964cdfd34a503445ef3fc0fdedeac99e69eab6a6696274e0a1b369f1397a9bb95156a015044568018281fd842cedbc9b0bcba70c568a52dbdf9c6b295ea7bca760fc65e3ce6081b88608f4b9aa839c79cedc7bf4a03420e3031f0449e3885b3dd45bcb93b44e78b0104be76d86e56f22ed2c18508b250ae372374e4c64fd31adb540e89d434657a6abb025738208af66874e13990dd821c94158805618e1cf036cb6815ee5b659074b7b1a7f2dea837acba7ca10c17e8be1c46844ee1a6e5168e8807702770aad4d3ed75e3c4ee81ca6b89a7ccc5578c7ee9353e96f1815bc1706572ceccca8bf03b021d4e0c8578a35de862cb876a03bad6831753f7bce015d7e7399f6941ab0eb2a2fc65a29f2aca7331042f53eef7d3dba076a3c522444addbadbeb22314e4cea0f02640174beb7d09294c0d1d039f680893b2abe7fa582463c62b9a114f1fea3153762464da32119006da2eac9a3d051edfb0c95d980686e8750e78c6329ccf6e85e12ccacada2d11e11c86ccaba47d1eb39f543d88eac7bedefe66e57dbac1a39939a601b45c8373b8986f0d03cd71116d0c6f06eb501e1b4aa52d4f9e5f8fbe2613742df32e76028718365975f18d5902a185a989ad720420b0caaacbf8e4e37248e7927439343949067ab02900f3b9ce6043e57231da658363839cec54c34fa033ebc24f21c45d4aa86aa6eb403af13969159cfe2c647ca13bdffc2a789ea3c97db98aa10613b51068c1cac39a3018efb20e37a7b44012a88449a6dc6fb30d9c55bc87f55bf3fe406b865b1952acdc8aff6aaf55e9c314f15d008e918d225559d244349c8ac7a9e8f986e683b1ac250c7abfa49c127159259034994f4fcdff85cb233c7879360e49370a0c602aec4cd1ab13b83a6fcbde20c256bb8edbbdfb2da93164c16468eb689547e8241b926a1c18241b0f427c72b47418b5c6aa67c1e10d810e697781fdc2882038f41ac5a0965dd37e80e1e1c7714b4321ebd7b38911d4ec5c316638d68451127d02607b6ee0aa30a4eab0fac07a74380409ecbb294d2f53df0a2ce60071d795bb0807604ef38203a1712a2b9a00803ff36222ac3ea8158c7deae3f3f22fac9ea5c5382fb9f0565a03aa6f40ac048fa2c138f89d12cff639abbc5a7849bab02bf070563782c520be18426ea9b247b6acc7a72137f66d27541f912bc9d3a352737b64f33581f9a0b29a2b8f623b29d021c3d577d96f38a42611b0da379df930c97a4c2c3b21b810510f67bf7b63eb0a4d51839b377de33025f123b15b6fb013f663cff8e63c3bba03b77651e108d868021b386825f957ba6a0083ce94d8c2f9f1b3feaa5ff361bf01caf1d49062f453a0d096e9cd13d99873580025f520f94e14ddcce1458b51fc9ff589917c608a3a7b5ca1ec607a4f68e76db217d39482dfcb1c3569a793b4e815ce149ebee8be57ca34e1ebd4261749e0f02dd1520feeb791a98eff623dba38fe7620fba57c3cb0aeec3b0ae064d24f3734d227b16c4afe6e613f2b1f6a0407c033fe82269f2098f8c0a32dd7fe545664d644c54eddd5400997e2a91445a9b8eadd72a8b1cd27b8e9c3ae32324e0ef89b2cbd1e51df3ac9d709954d7c1ff3fb64cc8be10a807eadd830968d285e59316b2f8ae24a237b1ae2c080b4c8606419038911f782d864074ba025e4a6a87adecc83704701f018243a79b046f8c1561276563328a8ce8fe126d5a398b2a3a1f53093ffe147ac8b095c83df1c4d88097babeaef1b57035e48d085be63cf6e55b26b24787fa17e43d20850b031605e5fdeba06ee8ff3a1fdfa43cbc0fb292877499f8efd1b3839250d88c3efb973e3cb8ebbaa39c2643f36d735041ab1fbd81d281a9de9dc06590c5b8bc2d4c4086e4482c5016e5912208bdedbe4d70b25de6d81892b5ed8355d43caf127f38a519a87bfaccc019e9a43730f21358b16e0be34420759f7e509e328ad70d0d4b565a2a8025a2babfd29da6f93642833bb23f80609f32fcc18e852835b3462d26e2bb78632bcf1d484ab122a990ccd8dbfab2a6a458b5c3d33bf63b367e66fb53c3e7ed91a72d137cc0eb9cfa7e809765fd27abb51ee051388e2f61112a6e4fcf1f8ef0302f951d15b6ea0d9c3884b6319c63b3137b42bcf8daf641009851ea668ec839124a8ecd8404d8fdb5066f174ea655c0aafdf5af9d05b4615edfc452173ccd3dbd27c47dad30130c0dffe94779c6ea3ae904881319c6610f92bc92ac258350da8c4494f2d50a9e626e8767d91ab4878b25e8961db6461b817c32b8413f49ff172fc3501e72f184dd24993796b7bea18661611fdbd8251b12f714c5c7e6675bcf8a0d750ab7f98cadbfd3724febf2660360ea41dc6211cb2cd12916e81b58d2ed66999ca1c25c79176722cf6dc8e50f059568912228df8d6c2836ecf38322f9d0af96b1b22fb88ce31c0d9f88ccdf952735bcb84e66e37971cf55811a5f38725787ce62e0ca9f8f73afb377a9c0189e24f51cacba12a38d8530b9cd295dfe79ac00b2895b84246f15d2f8e6b828fd89f438fdbb1c1d2ae9f796fd012dc5d0e7fb58d48fa99a789aadfb012aac404828b1a7cf45d5daa069870e449601be7c9854e69ba700836c764c30ea952b59a0205a7ffa7b14892b1390f785957fa08005f9791829843239b62c93b7011271d7e29ba74ed025e199c29879ba79815df1d87df88780bcba6c9bb6e7cb01765ce0861a3556bf7c1fe5448a51ec8cf292489d62a01ffe8a3de5f051def50ac567cedc378d2fc5c7fd9fa1eb7048647fb5bdf5125bbbb9c9d7be9f809cf214936138082237e5e60618fb15895a8972430346da4ba3d5aa53bedb099f0306a6a4bf6af8e7647d719f415cbe31eecdb241cde59cc90a3244739354a60018e6fa75612e7c87</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
